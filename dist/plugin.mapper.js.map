{
  "version": 3,
  "sources": ["../plugin.mapper.js"],
  "sourcesContent": ["const mapper = {\n\n\t// All loaded maps.\n\tmaps: [],\n\n\t// Currently active map.\n\tcurrentMap: null,\n\n\t// Map of entity types to their handlers.\n\ttypes: {},\n\tsystems: {},\n\tactions: {},\n\tsettings: {},\n\tbg: {},\n\n\t// The player entity ID.\n\tplayer: null,\n\n\n\t/**\n\t * Initialize and start the game with the provided map data.\n\t *\n\t * @param {Object} mapData - The map data object containing map layout, tiles, objects, and settings.\n\t * @returns {void}\n\t */\n\tplay: function( mapData ) {\n\n\t\tb8.Utilities.checkObject( 'mapData', mapData );\n\n\t\tmapper.load( mapData );\n\n\t\tb8.Scene.add( 'menu', mapper.sceneMenu );\n\t\tb8.Scene.add( 'game', mapper.sceneGame );\n\t\tb8.Scene.set( 'menu' );\n\n\t},\n\n\n\t/**\n\t * Load a map into the game.\n\t *\n\t * @param {Object} mapData - The map data object containing map layout, tiles, objects, and settings.\n\t * @param {string} mapName - The name to assign to the loaded map.\n\t * @param {boolean} setCurrentMap - Whether to set this map as the current active map.\n\t * @returns {void}\n\t */\n\tload: function( mapData, mapName = 'world', setCurrentMap = true ) {\n\n\t\tb8.Utilities.checkObject( 'mapData', mapData );\n\n\t\t// Combine map data into single string.\n\t\tconst mapDataString = mapData.map.join( '\\n' );\n\t\tb8.Utilities.checkString( 'mapDataString', mapDataString );\n\n\t\tmapper.settings = { ...mapData.settings };\n\t\tb8.Utilities.checkObject( 'mapper.settings', mapper.settings );\n\n\t\t// Setup player.\n\t\tmapper.player = b8.ECS.create(\n\t\t\t{\n\t\t\t\tType: { name: 'player' },\n\t\t\t\tLoc: { row: 0, col: 0 },\n\t\t\t\tDirection: { dx: 0, dy: 0 },\n\t\t\t\tSprite: {\n\t\t\t\t\ttype: 'actor',\n\t\t\t\t\ttile: parseInt( mapper.settings.character ) || 6,\n\t\t\t\t\tfg: parseInt( mapper.settings.characterColor ) || 10,\n\t\t\t\t\tbg: 0,\n\t\t\t\t\tdepth: 100,\n\t\t\t\t},\n\t\t\t\tCharacterAnimation: {\n\t\t\t\t\tname: 'idle',\n\t\t\t\t\tdefault: 'idle',\n\t\t\t\t\tduration: 0,\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// Convert maze strings to 2D array of characters.\n\t\tconst maze = b8.Tilemap.convertFromText( mapDataString );\n\t\tconst map = b8.Tilemap.createFromArray( maze, mapData.tiles );\n\n\t\tmapper.maps.push(\n\t\t\t{\n\t\t\t\t\"name\": mapName,\n\t\t\t\t\"screenWidth\": mapData.screenWidth,\n\t\t\t\t\"screenHeight\": mapData.screenHeight,\n\t\t\t\t\"screenCountX\": mapData.screenCountX,\n\t\t\t\t\"screenCountY\": mapData.screenCountY,\n\t\t\t\t\"mapWidth\": map[ 0 ].length,\n\t\t\t\t\"mapHeight\": map.length,\n\t\t\t\t\"map\": map,\n\t\t\t}\n\t\t);\n\n\t\tif ( setCurrentMap ) {\n\t\t\tmapper.setCurrentMap( mapName );\n\t\t}\n\n\t\t// Add objects.\n\t\tfor ( const obj of mapData.objects ) {\n\n\t\t\tconst handler = mapper.types[ obj.type ];\n\t\t\tif ( handler?.spawn ) {\n\t\t\t\tshouldAdd = handler.spawn( obj.x, obj.y, obj.props );\n\t\t\t}\n\n\t\t}\n\n\t\t// Count coin objects.\n\t\tconst coinCount = mapData.objects.filter( obj => obj.type === 'coin' ).length;\n\t\tb8.data.totalCoins = coinCount;\n\n\t\t// Add systems.\n\t\tb8.ECS.addSystem( 'characterAnimation', mapper.systems.characterAnimation );\n\n\t\t// Play music.\n\t\tif ( mapper.settings.bgm ) {\n\t\t\tb8.Music.play( world.settings.bgm );\n\t\t}\n\n\t\t// Validate map data.\n\t\tif (\n\t\t\tmapper.settings.splash &&\n\t\t\tmapper.settings.splash.length > 10 &&\n\t\t\tb8.Tilemap.validateTilemap( mapper.settings.splash )\n\t\t) {\n\n\t\t\tmapper.bg.splash = b8.Tilemap.load( mapper.settings.splash );\n\n\t\t}\n\n\t},\n\n\n\t/**\n\t * Update the game state.\n\t *\n\t * @param {number} dt - The delta time since the last update call.\n\t * @returns {void}\n\t */\n\tupdate: function( dt ) {\n\n\t\tb8.ECS.run( dt );\n\n\t},\n\n\n\t/**\n\t * Draw an actor at its location with optional offsets.\n\t *\n\t * @param {Object} actor - The actor entity with properties: id, col, row, fg, bg, animation.\n\t * @returns {void}\n\t */\n\tdrawActor: function( actor ) {\n\n\t\tif ( !mapper.currentMap ) {\n\t\t\tb8.Utilities.error( \"No current map set.\" );\n\t\t\treturn;\n\t\t}\n\n\t\tconst screenPosition = mapper.camera.getScreenPosition( actor.col, actor.row );\n\n\t\tconst actorX = actor.col - screenPosition.col;\n\t\tconst actorY = actor.row - screenPosition.row;\n\n\t\t// Draw the actor at its position with the specified offset.\n\t\tb8.locate( actorX + offsetX, actorY + offsetY );\n\t\tb8.color( actor.fg, actor.bg );\n\t\tb8.drawActor( actor.id, actor.animation );\n\n\t},\n\n\n\t/**\n\t * Render all entities on the screen with optional offsets.\n\t *\n\t * @param {number} offsetX - Horizontal offset for rendering.\n\t * @param {number} offsetY - Vertical offset for rendering.\n\t * @returns {void}\n\t */\n\trender: function( offsetX = 0, offsetY = 0 ) {\n\n\t\t// Handy caches so look-ups are O(1) inside the loop\n\t\tconst list = [];\n\n\t\tfor ( const id of b8.ECS.query( 'Sprite', 'Loc' ) ) {\n\t\t\tconst spr = b8.ECS.getComponent( id, 'Sprite' );\n\t\t\tconst loc = b8.ECS.getComponent( id, 'Loc' );\n\t\t\tconst anim = b8.ECS.getComponent( id, 'CharacterAnimation' );\n\t\t\tlist.push( { spr, loc, anim } );\n\t\t}\n\n\t\t// nothing to draw\n\t\tif ( list.length === 0 ) return;\n\n\t\t// Depth-sort (default depth = 0)\n\t\tlist.sort( ( a, b ) => ( a.spr.depth ?? 0 ) - ( b.spr.depth ?? 0 ) );\n\n\t\t// Draw\n\t\tfor ( const { spr, loc, anim } of list ) {\n\n\t\t\tconst pos = mapper.camera.getTilePosition( loc.col, loc.row );\n\n\t\t\tb8.locate( pos.col + offsetX, pos.row + offsetY );\n\t\t\tb8.color( spr.fg ?? 15, spr.bg ?? 0 );\n\n\t\t\tif ( 'actor' === spr.type ) {\n\t\t\t\tb8.drawActor( parseInt( spr.tile ), anim.name );\n\t\t\t} else {\n\t\t\t\tb8.printChar( parseInt( spr.tile ) );\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\n\t/**\n\t * Draw the visible portion of the current map to the screen.\n\t *\n\t * @returns {void}\n\t */\n\tdrawScreen: function() {\n\n\t\tif ( !mapper.currentMap ) {\n\t\t\tb8.Utilities.error( \"No current map set.\" );\n\t\t\treturn;\n\t\t}\n\n\t\tconst loc = b8.ECS.getComponent( mapper.player, 'Loc' );\n\t\tconst screenPosition = mapper.camera.getScreenPosition( loc.col, loc.row );\n\t\tconst currentMap = mapper.currentMap;\n\n\t\tb8.Tilemap.draw(\n\t\t\tcurrentMap.map,\n\t\t\tscreenPosition.col,\n\t\t\tscreenPosition.row,\n\t\t\tscreenPosition.w,\n\t\t\tscreenPosition.h\n\t\t);\n\n\t},\n\n\n\t/**\n\t * Set the current active map by name.\n\t *\n\t * @param {string} mapName - The name of the map to set as current.\n\t * @returns {void}\n\t */\n\tsetCurrentMap: function( mapName ) {\n\n\t\tlet currentMap = mapper.maps.find( map => map.name === mapName );\n\t\tif ( !currentMap ) {\n\t\t\tconsole.error( `Map \"${mapName}\" not found.` );\n\t\t\treturn;\n\t\t}\n\n\t\tmapper.currentMap = currentMap;\n\n\t},\n\n\n\t/**\n\t * Set a tile at the specified coordinates in the current map.\n\t *\n\t * @param {number} x - The x-coordinate (column) of the tile to set.\n\t * @param {number} y - The y-coordinate (row) of the tile to set.\n\t * @param {string} tile - The tile character to set at the specified coordinates.\n\t * @returns {void}\n\t */\n\tsetTile: function( x, y, tile ) {\n\n\t\tif ( !mapper.currentMap ) {\n\t\t\tb8.Utilities.error( \"No current map set.\" );\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tx < 0 ||\n\t\t\ty < 0 ||\n\t\t\ty >= mapper.currentMap.map.mapHeight ||\n\t\t\tx >= mapper.currentMap.map.mapWidth\n\t\t) {\n\t\t\tb8.Utilities.error( \"Mapper.setTile, coordinates out of bounds.\" );\n\t\t\treturn;\n\t\t}\n\n\t\tmapper.currentMap.map[ y ][ x ] = tile;\n\n\t},\n\n\n\t/**\n\t * Get the action verb for a given entity ID.\n\t *\n\t * @param {number} id - The entity ID to get the verb for.\n\t * @returns {string} The action verb associated with the entity, or an empty string if none exists.\n\t */\n\tgetVerbForEntity: ( id ) => {\n\n\t\tconst a = b8.ECS.getComponent( id, 'Action' );\n\t\treturn a?.verb ?? '';\n\n\t},\n\n\n\t/**\n\t * Get the action verb for the entity directly in front of the player.\n\t *\n\t * @param {number} playerId - The player entity ID.\n\t * @returns {string} The action verb of the entity ahead, or an empty string if none exists.\n\t */\n\tpromptAhead: ( playerId ) => {\n\n\t\tconst ids = mapper.entitiesAhead( playerId );\n\t\tfor ( const id of ids ) {\n\t\t\tconst verb = mapper.getVerbForEntity( id );\n\t\t\tif ( verb ) return verb;\n\t\t}\n\t\treturn '';\n\n\t},\n\n\n\t/**\n\t * Get the tile coordinates directly in front of the player.\n\t *\n\t * @param {number} playerId - The player entity ID.\n\t * @returns {Object} An object with x and y properties representing the tile coordinates ahead of the player.\n\t */\n\tahead: ( playerId ) => {\n\n\t\tconst loc = b8.ECS.getComponent( playerId, 'Loc' );\n\t\tconst dir = b8.ECS.getComponent( playerId, 'Direction' ); // {dx,dy}\n\t\tconst x = loc.col + ( dir.dx || 0 );\n\t\tconst y = loc.row + ( dir.dy || 0 );\n\t\treturn { x, y };\n\n\t},\n\n\n\t/**\n\t * Get all entities located directly in front of the player.\n\t *\n\t * @param {number} playerId - The player entity ID.\n\t * @returns {Array} An array of entity IDs located ahead of the player.\n\t */\n\tentitiesAhead: ( playerId ) => {\n\n\t\tconst { x, y } = mapper.ahead( playerId );\n\t\treturn b8.ECS.entitiesAt( x, y ) ?? [];\n\n\t},\n\n\n\t/**\n\t * Handle collision when the player attempts to move to a new tile.\n\t *\n\t * @param {number} x - The current x-coordinate (column) of the player.\n\t * @param {number} y - The current y-coordinate (row) of the player.\n\t * @param {number} newCol - The target x-coordinate (column) the player is moving to.\n\t * @param {number} newRow - The target y-coordinate (row) the player is moving to.\n\t * @param {number} dx - The change in x (column) direction.\n\t * @param {number} dy - The change in y (row) direction.\n\t * @return {boolean} True if the movement is blocked by a collision, false otherwise.\n\t */\n\tdoCollision: function( x, y, newCol, newRow, dx, dy ) {\n\n\t\t// ECS collision.\n\t\tif ( mapper.systems.tryPushing( x, y, dx, dy ) ) return true;\n\n\t\t// every entity occupying the target tile\n\t\tfor ( const id of b8.ECS.entitiesAt( newCol, newRow ) ) {\n\n\t\t\tconst typeComp = b8.ECS.getComponent( id, 'Type' );\n\t\t\tconst handler = typeComp ? mapper.types[ typeComp.name ] : null;\n\n\t\t\tif ( handler?.onCharacterCollision ) {\n\t\t\t\tconst blocked = handler.onCharacterCollision( id, newCol, newRow, dx, dy );\n\t\t\t\tif ( blocked ) return true;\n\t\t\t}\n\n\t\t\tconst isSolid = b8.ECS.hasComponent( id, 'Solid' );\n\t\t\tif ( isSolid ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\n\t/**\n\t * Perform the action associated with the entity directly in front of the player.\n\t *\n\t * @param {number} playerId - The player entity ID.\n\t * @returns {void}\n\t */\n\tdoAction: ( playerId ) => {\n\n\t\tconst action = mapper.promptAhead( playerId );\n\n\t\tconsole.log( 'do action ', action );\n\n\t\tif ( action && mapper.actions[ action ] ) {\n\t\t\tmapper.actions[ action ]( playerId );\n\t\t}\n\n\t},\n\n\n};\n\n\nmapper.CONFIG = {\n\t// Time in seconds for player movement delay.\n\tmoveDelay: 0.15,\n\t/**\n\t * Offset to apply when drawing the map and actors.\n\t * This is to account for any borders or UI elements.\n\t */\n\tmapOffsetX: 1,\n\tmapOffsetY: 1,\n\t// UI graphics.\n\tgameUI: `hpgYhRhhCAAAoIUYYQgAAKCFGGEIAACghRhhCAAAoIUYYQgAAKCFGGEIAACghRhhCAAAoIUYYQgAAKCFGGEIAACghRhhCAAAoIUYYQgAAKCFGGEIAACghRhhCAAAoIUYYQgAAKCFGGEIAACghRhhCAAAoIUYYQgAAKCFGGEIAACghRhhCAAAoIUYYQgAAKCFGJUHAACghRiVBwAAoIUYlQcAAKCFGJUKAACgmBiFGBwHBgCghRgZBwYAoIUYGQcGAKCFGBkHBgCghRgZBwYAoIUYGQcGAKCFDAYHAKCFGBkHBgCghRgZBwYAoIUYGQcGAKCFGBkHBgCghRgZBwYAoIUYGQcGAKCFGBkHBgCghRgZBwYAoIUYGQcGAKCFGBkHBgCghRgZBwYAoIUYGQcGAKCFGB0HBgCghRgZBwgAoIUYIAgHAKCFGCsHBgCghRkBXAoAAKCYGIUYKwYHAKCFEgAHAKCFAAgAAKCFAAgAAKCFAAgAAKCFAwEAAKCFAAgAAKCFAA8AAKCFEwAHAKCFAQcGAKCFGQG0CgcAoIUBBwYAoIUBBwYAoIUBBwYAoIUZAbUKBwCghQEHBgCghQEHBgCghQEHBgCghQEHBgCghREGBwCghQAAAACghRMABwCghRgrBwYAoIUZAV4KAACgmBiFGCsGBwCghQEABwCghRkBnwgAAKCFGQGfCAAAoIUZAZ8IAACghRkBnwgAAKCFGQGfCAAAoIUZAZ8IAACghQEABwCghRg9AAEAoIUYPQABAKCFGD0AAQCghRg9AAEAoIUYPQABAKCFGD0AAQCghRg9AAEAoIUYPQABAKCFGD4AAQCghQEHBgCghRgrBwYAoIUAAAAAoIUAAAAAoIUYKwcGAKCFGQFdCgAAoJgYhRgrBgcAoIUBAAcAoIUBAAEAoIUADgAAoIUADwAAoIUADwAAoIUADwAAoIUADwAAoIUAAQAAoIUABQEAoIUBAQcAoIUBAQcAoIUBAQcAoIUBAQcAoIUBAQcAoIUBAQcAoIUBAQcAoIUYUAABAKCFAAYHAKCFGCsHBgCghQAAAACghRglAAcAoIUYKwcGAKCFGQFeCgAAoJgYhRguBwYAoIUBAAEAoIUAAQAAoIUAAQAAoIUAAQAAoIUAAQAAoIURAQAAoIURAQAAoIUBAAEAoIUYYQABAKCFGGEAAQCghRhhAAEAoIUYYQABAKCFGGEAAQCghRhhAAEAoIURBgEAoIURBgEAoIUYYgABAKCFEQYHAKCFGC8HBgCghRgZBgcAoIUYGQYHAKCFGDEHBgCghRkBXQoAAKA=`,\n};\n\n\nmapper.actions.pull = function( playerId ) {\n\n\tconst loc = b8.ECS.getComponent( playerId, 'Loc' );\n\tconst dir = b8.ECS.getComponent( playerId, 'Direction' ); // {dx,dy}\n\n\tmapper.systems.tryPulling( loc.col, loc.row, dir.dx, dir.dy, playerId );\n\n};\nmapper.actions.read = async function( playerId ) {\n\n\tconst entities = mapper.entitiesAhead( playerId );\n\n\tfor ( const id of entities ) {\n\n\t\tconst obj = b8.ECS.getComponent( id, 'Message' );\n\t\tconst sprite = b8.ECS.getComponent( id, 'Sprite' );\n\n\t\tif ( !obj || !sprite ) continue;\n\n\t\tb8.color( sprite.fg ?? 15, sprite.bg ?? 5 );\n\t\tconst message = mapper.helpers.processChatText( obj.message || '' );\n\t\tawait b8.Async.dialogTypewriter( message, [ \"OK\" ], 20 );\n\n\t}\n\n};\nmapper.camera = {\n\n\t/**\n\t * Get the top-left tile coordinates of the screen the player is currently on.\n\t *\n\t * @param {number} pCol - The player's column position.\n\t * @param {number} pRow - The player's row position.\n\t * @returns {Object} An object with col, row, w, and h properties representing the screen's top-left tile and dimensions.\n\t */\n\tgetScreenPosition: function( pCol, pRow ) {\n\n\t\tif ( !mapper.currentMap ) {\n\t\t\tb8.Utilities.error( \"No current map set.\" );\n\t\t\treturn { col: 0, row: 0 };\n\t\t}\n\n\t\tconst currentMap = mapper.currentMap;\n\n\t\tconst screenWidth = currentMap.screenWidth;\n\t\tconst screenHeight = currentMap.screenHeight;\n\n\t\t// Calculate which screen to draw based on player position.\n\t\tconst screenX = Math.floor( pCol / screenWidth ) * screenWidth;\n\t\tconst screenY = Math.floor( pRow / screenHeight ) * screenHeight;\n\n\t\treturn { col: screenX, row: screenY, w: screenWidth, h: screenHeight };\n\n\t},\n\n\n\t/**\n\t * Get the on-screen tile coordinates for a given map tile.\n\t *\n\t * @param {number} col - The map tile's column position.\n\t * @param {number} row - The map tile's row position.\n\t * @returns {Object} An object with col and row properties representing the tile's on-screen position.\n\t */\n\tgetTilePosition: function( col, row ) {\n\n\t\tconst loc = b8.ECS.getComponent( mapper.player, 'Loc' );\n\t\tconst pos = mapper.camera.getScreenPosition( loc.col, loc.row );\n\n\t\tlet tileCol = col - pos.col;\n\t\tlet tileRow = row - pos.row;\n\n\t\t// If out of bounds push off the screen to avoid rendering.\n\t\tif ( tileCol < 0 ) tileCol = -100;\n\t\tif ( tileRow < 0 ) tileRow = -100;\n\t\tif ( tileCol >= pos.w ) tileCol = -100;\n\t\tif ( tileRow >= pos.h ) tileRow = -100;\n\n\t\treturn {\n\t\t\tcol: tileCol,\n\t\t\trow: tileRow,\n\t\t};\n\n\t},\n\n};\nmapper.collision = {\n\n\t/**\n\t * Check if there is a solid object at (col,row).\n\t *\n\t * @param {number} col\n\t */\n\tisSolidAt: ( col, row ) => {\n\n\t\treturn b8.ECS.entitiesAt( col, row ).some( id => b8.ECS.hasComponent( id, 'Solid' ) );\n\n\t},\n\n\n\t/**\n\t * Check if (col,row) is free (walkable and no solid object).\n\t *\n\t * @param {number} col\n\t * @param {number} row\n\t * @returns {boolean}\n\t */\n\tisFree: ( col, row ) => {\n\n\t\treturn mapper.collision.isWalkable( col, row ) && !mapper.collision.isSolidAt( col, row );\n\n\t},\n\n\n\t/**\n\t * Check if (col,row) is walkable (not a wall or closed door).\n\t *\n\t * @param {number} col\n\t * @param {number} row\n\t * @returns {boolean}\n\t */\n\tisWalkable: function( col, row ) {\n\n\t\t// Check bounds.\n\t\tif (\n\t\t\tcol < 0 ||\n\t\t\trow < 0 ||\n\t\t\tcol >= mapper.currentMap.map.mapHeight ||\n\t\t\trow >= mapper.currentMap.map.mapWidth\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet mapCell = mapper.currentMap.map[ row ][ col ];\n\n\t\tif ( true === mapCell[ 3 ] ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for spikes.\n\t\t// if ( cell === '^' ) {\n\t\t// \tlet spike = Tile.spikes.list.find( s => s.x === x && s.y === y );\n\t\t// \tif ( spike && spike.up ) {\n\t\t// \t\treturn false;\n\t\t// \t}\n\t\t// }\n\n\t\treturn true;\n\n\t},\n\n};\nmapper.helpers = {\n\n\t/**\n\t * Capitalize the first letter of each word in a string.\n\t *\n\t * @param {string} str Input string\n\t * @returns {string} Capitalized string\n\t */\n\tcapitalizeWords: ( str ) => {\n\n\t\treturn str.replace( /\\b\\p{L}/gu, c => c.toUpperCase() )\n\n\t},\n\n\n\t/**\n\t * Process chat text, replacing tokens with dynamic values.\n\t *\n\t * @param {string} str Input string\n\t * @returns {string} Processed string\n\t */\n\tprocessChatText: ( str ) => {\n\n\t\t// Replace [levelName] with the actual level name.\n\t\tstr = str.replace( /\\[levelName\\]/g, b8.data.levelName ?? 'Unknown' );\n\n\t\t// Replace [playerName] with the actual player name.\n\t\tstr = str.replace( /\\[playerName\\]/g, b8.data.playerName ?? 'Player' );\n\n\t\t// Replace [totalCoins] with the actual total coins value.\n\t\tstr = str.replace( /\\[totalCoins\\]/g, b8.data.totalCoins ?? '0' );\n\n\t\treturn str;\n\n\t},\n\n}\nmapper.menu = {\n\n\t/**\n\t * Get the instructions text.\n\t *\n\t * @returns {string} The instructions text.\n\t */\n\tgetInstructions: function() {\n\n\t\tif ( mapper.hasInstructions() ) {\n\t\t\treturn mapper.settings.instructions;\n\t\t}\n\t\treturn '';\n\n\t},\n\n\n\t/**\n\t * Check if there are instructions available.\n\t *\n\t * @returns {boolean} True if instructions are available, false otherwise.\n\t */\n\thasInstructions: function() {\n\n\t\treturn !!mapper.settings.instructions;\n\n\t},\n\n\n\t/**\n\t * Get the credits text.\n\t *\n\t * @returns {string} The credits text.\n\t */\n\tgetCredits: function() {\n\n\t\tif ( mapper.hasCredits() ) {\n\t\t\treturn mapper.settings.credits;\n\t\t}\n\n\t\treturn '';\n\n\t},\n\n\n\t/**\n\t * Check if there are credits available.\n\t *\n\t * @returns {boolean} True if credits are available, false otherwise.\n\t */\n\thasCredits: function() {\n\n\t\treturn !!mapper.settings.credits;\n\n\t},\n\n\n\t/**\n\t * Draw the splash screen.\n\t *\n\t * @returns {void}\n\t */\n\tdrawSplash: function() {\n\n\t\tif ( mapper.bg.splash ) {\n\t\t\tb8.Tilemap.draw( mapper.bg.splash );\n\n\t\t\t// b8 Logo\n\t\t\tconsole.log( 'Drawing b8 logo' );\n\t\t\tb8.locate( b8.CONFIG.SCREEN_COLS - 1, b8.CONFIG.SCREEN_ROWS - 1 );\n\t\t\tb8.color( 15, 0 );\n\t\t\tb8.printChar( 88 );\n\t\t}\n\n\t},\n\n\n\t/**\n\t * Check if there is a splash screen available.\n\t *\n\t * @returns {boolean} True if a splash screen is available, false otherwise.\n\t */\n\thasSplash: function() {\n\n\t\treturn !!mapper.bg.splash;\n\n\t},\n\n};\nmapper.sceneGame = {\n\n\tUI: null,\n\n\n\t/**\n\t * Initialize the game scene.\n\t *\n\t * @returns {void}\n\t */\n\tinit: function() {\n\n\t\tconsole.log( mapper.CONFIG );\n\n\t\tmapper.sceneGame.UI = b8.Tilemap.load( mapper.CONFIG.gameUI );\n\n\t},\n\n\n\t/**\n\t * Update the game scene.\n\t *\n\t * @param {number} dt Delta time in seconds since last frame.\n\t * @returns {void}\n\t */\n\tupdate: function( dt ) {\n\n\t\tmapper.CONFIG.moveDelay -= dt;\n\t\tif ( mapper.CONFIG.moveDelay > 0 ) return;\n\n\t\t// Get player components\n\t\tconst loc = b8.ECS.getComponent( mapper.player, 'Loc' );\n\t\tconst anim = b8.ECS.getComponent( mapper.player, 'CharacterAnimation' );\n\n\t\tif ( mapper.CONFIG.moveDelay > 0 ) return;\n\n\t\tlet dx = 0, dy = 0;\n\n\t\t// Calculate direction of movement.\n\t\t// Use else if so we can only move in one direction at a time and not jump\n\t\t// over collision walls diagonally.\n\t\tif ( b8.keyp( \"ArrowUp\" ) ) { dy = -1; }\n\t\telse if ( b8.keyp( \"ArrowDown\" ) ) { dy = 1; }\n\t\telse if ( b8.keyp( \"ArrowLeft\" ) ) { dx = -1; }\n\t\telse if ( b8.keyp( \"ArrowRight\" ) ) { dx = 1; }\n\t\tif ( b8.keyp( \"ButtonB\" ) ) mapper.doAction( mapper.player );\n\n\t\tif ( dx !== 0 || dy !== 0 ) {\n\n\t\t\tlet newCol = loc.col + dx;\n\t\t\tlet newRow = loc.row + dy;\n\n\t\t\tif ( dy > 0 ) anim.name = 'move-down';\n\t\t\tif ( dy < 0 ) anim.name = 'move-up';\n\t\t\tif ( dx > 0 ) anim.name = 'move-right';\n\t\t\tif ( dx < 0 ) anim.name = 'move-left';\n\t\t\tanim.duration = 0.3;\n\n\t\t\t// Now check for regular collision (walls etc).\n\t\t\tif ( !mapper.collision.isWalkable( newCol, newRow ) || mapper.doCollision( loc.col, loc.row, newCol, newRow, dx, dy ) ) {\n\t\t\t\tnewCol = loc.col;\n\t\t\t\tnewRow = loc.row;\n\t\t\t}\n\n\t\t\tb8.ECS.set( mapper.player, 'Direction', { dx, dy } );\n\t\t\tb8.ECS.setLoc( mapper.player, newCol, newRow );\n\n\t\t\tmapper.CONFIG.moveDelay = 0.15;\n\n\t\t}\n\n\t\tmapper.update( dt );\n\n\t},\n\n\n\t/**\n\t * Render the game scene.\n\t *\n\t * @returns {void}\n\t */\n\trender: function() {\n\n\t\tb8.cls();\n\n\t\tb8.locate( mapper.CONFIG.mapOffsetX, mapper.CONFIG.mapOffsetY );\n\t\tmapper.drawScreen();\n\t\tmapper.render( mapper.CONFIG.mapOffsetX, mapper.CONFIG.mapOffsetY );\n\n\t\t// Draw UI background.\n\t\tb8.locate( 0, b8.CONFIG.SCREEN_ROWS - mapper.sceneGame.UI.length );\n\t\tb8.Tilemap.draw( mapper.sceneGame.UI );\n\n\t\t// Draw currency value.\n\t\tb8.locate( 2, b8.CONFIG.SCREEN_ROWS - 2 );\n\t\tb8.color( mapper.settings.coinColor, 0 );\n\t\tb8.printChar( mapper.settings.coin || 266 );\n\n\t\tb8.color( 15, 0 );\n\t\tb8.print( ' ' + parseInt( b8.Inventory.getCount( 'coin' ) ).toString().padStart( 4, '0' ) );\n\n\t\t// Draw keys.\n\t\tconst keys = b8.Inventory.filter( /^key/ );\n\t\t// Loop through keys and draw them.\n\t\tkeys.forEach(\n\t\t\t( item, index ) => {\n\t\t\t\tconst color = parseInt( item.id.split( '-' )[ 1 ] ) || 15;\n\t\t\t\tb8.locate( 10 + index, b8.CONFIG.SCREEN_ROWS - 2 );\n\t\t\t\tb8.color( color, -1 );\n\t\t\t\tb8.printChar( 255 );\n\t\t\t}\n\t\t);\n\n\t\t// Draw actions.\n\t\t// -------------\n\t\tb8.color( 15, -1 );\n\n\t\t// A button.\n\t\tb8.locate( 11, b8.CONFIG.SCREEN_ROWS - 4 );\n\t\tb8.print( ' ' );\n\n\t\t// B button.\n\t\tb8.locate( 15, b8.CONFIG.SCREEN_ROWS - 4 );\n\t\tb8.print( mapper.helpers.capitalizeWords( ' ' + mapper.promptAhead( mapper.player ) ) );\n\n\t\treturn;\n\n\t},\n\n};\n// const menuBg = `mB6YGIUBBAAAoIUBBAAAoIUBBAAAoIUDBQQAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUSDwQAoIUTDwQAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIURAwQAoIURAwQAoIUBBAAAoJgYhREDBACghQEEAACghQEEAACghQEEAACghRgpCgQAoIUBBAAAoIUBBAAAoIUSDwQAoIUBDwQAoIUBDwQAoIUABA8AoIUBDwQAoIUTDwQAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUDBQQAoIUBBAAAoIURAwQAoIURAwQAoIUBBAAAoJgYhREDBACghQEEAACghQEEAACghQEEAACghQEKDQCghQEEAACghQAKBACghRgkDwQAoIUYcgQKAKCFGD0ECgCghRigBA8AoIUYPQQKAKCFCwQPAKCFAQoNAKCFAQQAAKCFEg0EAKCFAg0MAKCFEw0EAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCYGIUBBAAAoIUBBAAAoIURAwQAoIURAwQAoIUBCg0AoIUWCgQAoIUABAoAoIUBBAAAoIUYTgQKAKCFGD0ECgCghQMFBACghRgoBAoAoIUBCg0AoIUBCg0AoIUBBAAAoIUACg0AoIUYKQQNAKCFAAoNAKCFGBkNBACghRgZDQQAoIUYGQ0EAKCFGBkNBACghQEEAACghQEEAACgmBiFAQQAAKCFAQQAAKCFEQMEAKCFEQMEAKCFAQoNAKCFAgoJAKCFAQQAAKCFAQQAAKCFGE4ECgCghQEEDQCghQEEAACghQEEAACghQEEAACghQEKDQCghQEEAACghQAKDQCghRgqBA0AoIUACg0AoIUABA0AoIUABA0AoIUABA0AoIUYJQ0EAKCFAQQAAKCFAQQAAKCYGIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUBCg0AoIUYKAQKAKCFGGEECgCghQEEAACghRhOBAoAoIUBCg0AoIUACgQAoIUBCg0AoIUBCg0AoIUWBAoAoIUBBAAAoIUYJA0EAKCFGGEFDQCghRglDQQAoIUBBA0AoIUABA0AoIUYgQ0EAKCFAQQAAKCFAwUEAKCFAQQAAKCYGIUBBAAAoIUDBQQAoIUBBAAAoIUBBAAAoIUYKgoEAKCFAQQAAKCFGCkKBACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACghQEEAACgmBiFGDUNBACghRgyDQQAoIUBBAAAoIUBBAAAoIUSDwQAoIURBA8AoIUYTgQKAKCFEQQPAKCFEw8EAKCFAQQAAKCFGE4ECgCghQEEAACghQEKBACghQEEAACghQEKBACghQEKBACghQEEAACghRYKBACghRhQBAoAoIUACgQAoIUABAoAoIUCCgkAoIUCCgkAoIUBBAAAoJgYhRgiBA0AoIUYIQQNAKCFAQQAAKCFEg8EAKCFAQ8EAKCFAQ8EAKCFGE4ECgCghRYKDwCghRhQBAoAoIUTDwQAoIUYTgQKAKCFGBoKBACghQIKCQCghQEEAACghQEKBACghRg9BAoAoIUBBAAAoIUBCgQAoIUYcwQKAKCFAQQKAKCFAQQAAKCFGFAECgCghQEEAACghRIPBACgmBiFAAANAKCFEAwNAKCFGDINBACghRgkDwQAoIUBDwQAoIUYoAQPAKCFGE4ECgCghRhQBAoAoIULBA8AoIULBA8AoIUYTgQKAKCFAgoJAKCFAgoJAKCFAwUEAKCFAQoEAKCFAQQAAKCFAQQAAKCFAQQKAKCFGFAECgCghQEECgCghRIPBACghRhQBAoAoIUBDw0AoIUBDw0AoJgYhQMFDQCghQAADQCghRghBA0AoIUBBAAAoIUBBAAAoIUBBAAAoIUYTgQKAKCFGCgECgCghRhQBAoAoIUBBAAAoIUYTgQKAKCFGBoECgCghQEKBACghQEEAACghQEKBACghQEKBACghQEEAACghQEKBACghRhQBAoAoIUSDwQAoIUYoAQPAKCFGFAECgCghQsEDwCghQsEDwCgmBiFAAANAKCFAwUNAKCFGDIBDQCghQAABACghQAABACghQEEAACghRgqCgQAoIUBBAAAoIUBBAAAoIUBBAAAoIUACgQAoIUBBAAAoIUACgQAoIUBBAAAoIUBBAAAoIUBBAAAoIUBBAAAoIUXDwQAoIUBDw0AoIUYoAQPAKCFGLMEDwCghRigBA8AoIULBA8AoIULBA8AoJgYhREBDQCghRgyAQ0AoIUAAA0AoIUYMg0EAKCFAAAEAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAwUEAKCFAQQAAKCFAQQAAKCFAQQAAKCFEQMEAKCFEQMEAKCFEQMEAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCFAQQAAKCYGIUDBQ0AoIUAAA0AoIUAAA0AoIUYIQQNAKCFAAAEAKCFAQQAAKCFEQMEAKCFEQMEAKCFEQMEAKCFAAMEAKCFAAAEAKCFAAAEAKCFEQMEAKCFAAAEAKCFAAAEAKCFAAAEAKCFEQMEAKCFEQMEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAQQAAKCYGIUDBQ0AoIUBDQQAoIUJDQUAoIUYMgENAKCFAAAEAKCFAAAEAKCFEQMEAKCFEQMEAKCFEQMEAKCFAQQAAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFAAAEAKCFGEsHBACghRhLBwQAoIUAAAQAoIUDBQQAoIURAwQAoJgYhQAADQCghQAADQCghQAADQCghQAADQCghRgyDQQAoIUAAAQAoIUBBAAAoIUBBAAAoIUBBAAAoIUACAQAoIUYNAgEAKCFAAAEAKCFGHcDBACghQAABACghQAABACghQAABACghQAABACghQAABACghQAABACghRkBTQIFAKCFGQFNAgUAoIUYMwgEAKCFAAAEAKCFEQMEAKCYGIURAQ0AoIUQDA0AoIUAAA0AoIUYMgENAKCFGCEEDQCghQMFBACghRg1BQQAoIUYMgUEAKCFAQQAAKCFAAgEAKCFGBkHCACghRgZBwgAoIUYGQcIAKCFGBkHCACghRgZBwgAoIUYGQcIAKCFGBkHCACghRgZBwgAoIUYGQcIAKCFGQFOAgUAoIUZAU0CBQCghRgZBwgAoIUACAQAoIUYNQUEAKCYGIUDBQ0AoIUDBQ0AoIUAAA0AoIUQDA0AoIUYIQQNAKCFAAAEAKCFGCIEBQCghRghBAUAoIUBBAAAoIUDBQQAoIURBwgAoIURBwgAoIUZAQgHCACghRkBCAcIAKCFGQEIBwgAoIUZAQgHCACghRkBCAcIAKCFGQEIBwgAoIUZAQgHCACghRkBTQIFAKCFGQFNAgUAoIUZAQgHCACghRgyBQQAoIUYIgQFAKCYGIUAAA0AoIUAAA0AoIUAAA0AoIUAAA0AoIUAAA0AoIUYLAQFAKCFAAIFAKCFGCkBBQCghRgyBQQAoIUYGgEEAKCFGQEIBwgAoIUZAQgHCACghRkBCAcIAKCFGQEIBwgAoIURBwgAoIUZAQgHCACghRkBCAcIAKCFGQEIBwgAoIUZAQgHCACghRkBCAgHAKCFGQEICAcAoIUZAQgHCACghQACBQCghRgaAQUAoJgYhQMFDQCghQMFDQCghQAADQCghQAADQCghRAMDQCghRgoDQUAoIUYNQEFAKCFAAIBAKCFGCwFAQCghQACAQCghRkBCAcIAKCFGQEIBwgAoIUZAQgHCACghRkBCAcIAKCFGQEIBwgAoIUZAQgHCACghREHCACghRkBCAcIAKCFGQEIBwgAoIUZAQgHCACghRkBCAcIAKCFGQEIBwgAoIUYNQEFAKCFAAIBAKCYGIURAQ0AoIUDBQ0AoIUAAA0AoIUYMgENAKCFEAwNAKCFAAANAKCFAAIBAKCFAAIBAKCFAAIBAKCFGFkFAQCghRkBTQUBAKCFGQFNBQEAoIUZAU0FAQCghRkBTgUBAKCFGQFPBQEAoIUZAU0FAQCghRkBTQUBAKCFGQFNBQEAoIUZAU0FAQCghRkBTgUBAKCFGQFNBQEAoIUZAU0FAQCghRhXBQEAoIUAAgEAoJgYhQMFDQCghQAADQCghQMFDQCghQAADQCghQAADQCghRgyAQ0AoIUYMg0BAKCFAAIBAKCFAAIBAKCFGFkCAQCghRkBTQIFAKCFGQFOAgUAoIUZAU0CBQCghRkBTQIFAKCFGHIBDQCghRg9AQ0AoIUYPQENAKCFGHMBDQCghRkBTQIFAKCFGQFNAgUAoIUZAU0CBQCghRkBTgIFAKCFGFcCAQCghQACAQCgmBiFEQENAKCFAwUNAKCFAAANAKCFAAANAKCFCQ0FAKCFAAANAKCFGCEBDQCghQACAQCghQACAQCghRhZAgEAoIUZAU0CBQCghQEABQCghRkBTQIFAKCFGQFNAgUAoIUYTgENAKCFAQAFAKCFAQANAKCFGFAFDQCghRkBTQIFAKCFAQAFAKCFAQAEAKCFGQFNAgUAoIUYVwIBAKCFAAIBAKCYGIUAAA0AoIUAAA0AoIUAAA0AoIUDBQ0AoIUAAA0AoIUYMgENAKCFAAANAKCFGQEgDA0AoIUZATIMDQCghRkBMgwNAKCFGQFNAgUAoIUYKwABAKCFGQFNAgUAoIUZAU0CBQCghRhOAQ0AoIUYKwABAKCFAQEFAKCFGFAFDQCghRkBTQIFAKCFGCsAAQCghQEBAQCghRkBTQIFAKCFGQEgDA0AoIUZASEMDQCgmBiFGDIGDQCghQMFDQCghRgyBg0AoIUYNAwNAKCFGDQMDQCghQAADQCghRgyDQwAoIUZATMNDACghRENDACghRENDACghRkBTQIFAKCFGBkCAwCghRkBTQIFAKCFGQFOAgUAoIUYTgENAKCFGD0MDQCghRg9DA0AoIUYUAUNAKCFGQFNAgUAoIUYGQIDAKCFGDcDDwCghRg3Aw8AoIUYNwMPAKCFEQ0MAKCYGIULBgcAoIULBgcAoIUOBgcAoIUYVwcMAKCFAAAMAKCFGQEgDQwAoIUZASUNDACghQAADACghRkBJQ0MAKCFGFMCDACghRkBTgIFAKCFGQFNAgUAoIUZAU8CBQCghRkBTQIFAKCFGIQFDQCghQsNBQCghRhhBQ0AoIUYhQUNAKCFGQFNAgUAoIUZAU0CBQCghRg3Aw8AoIUYNwMPAKCFGDcDDwCghRkBNw0MAKCYGIURBgcAoIUY5QYHAKCFGQEaBgcAoIUYVwcMAKCFAQwAAKCFEQ0MAKCFAQwAAKCFGQElDQwAoIUBDAAAoIUYUw0MAKCFAQ0MAKCFGQEyDA0AoIUBDQwAoIUZATcMDQCghQENDACghQENDACghRkBMgwNAKCFAQ0MAKCFGQEzDA0AoIUBDQwAoIUBDQwAoIUYPQUPAKCFAQwAAKCFGQElDQwAoJgYhRiUBw0AoIUYlAcNAKCFGJQHDQCghRgoDQwAoIUZASUNDACghQEMAACghRkBJQ0MAKCFGQElDQwAoIURDQwAoIUYVg0MAKCFGQE3DA0AoIUZATMMDQCghQENDACghRcFDQCghQEFDACghRglBQ0AoIUBDQwAoIUZATIMDQCghRkBNwwNAKCFAQ0MAKCFGQEzDA0AoIUBDQwAoIUZATUNDACghRENDACgmBiFAwENAKCFGQEzDA0AoIUZASUMDQCghRkBNwwNAKCFGCgNDACghRkBJQ0MAKCFAQwAAKCFGQEgDQwAoIUZATcNDACghRkBJQ0MAKCFAw0MAKCFAw0MAKCFGQElDQwAoIUDDQwAoIUZATcNDACghRcCDACghQMNAgCghRMCDACghRkBMw0MAKCFGFYNDACghRkBNwwNAKCFGQEyDA0AoIUZATMMDQCghRkBJQ0MAKCYGIUYWAwNAKCFGQElDA0AoIUZASUMDQCghQAMDQCghRkBMwwNAKCFGQEzDA0AoIUZATcMDQCghRgoDQwAoIUZASUNDACghQEMAACghRkBNw0MAKCFAQwAAKCFGQEzDQwAoIUZATcNDACghRICDACghRgYAgwAoIUZATMNDACghRkBJQ0MAKCFAQwAAKCFGQElDQwAoIUZASUNDACghRkBJQ0MAKCFGQElDQwAoIUZASUNDACg`;\n\nmapper.sceneMenu = {\n\n\t/**\n\t * Initialize the menu scene.\n\t *\n\t * @returns {void}\n\t */\n\tinit: function() {\n\n\t\t// No splash screen so skip the menu.\n\t\tif ( !mapper.menu.hasSplash() ) return;\n\n\t\tmapper.sceneMenu.main();\n\n\t},\n\n\n\t/**\n\t * Draw the main menu.\n\t *\n\t * @returns {void}\n\t */\n\tmain: async () => {\n\n\t\tb8.locate( 0, 0 );\n\t\tmapper.menu.drawSplash();\n\n\t\tb8.locate( 5, 18 );\n\t\tb8.color( 0, 10 );\n\n\t\tlet menuChoices = [ \"Start Game\", ];\n\t\tif ( mapper.menu.hasInstructions() ) menuChoices.push( \"Instructions\" );\n\t\tif ( mapper.menu.hasCredits() ) menuChoices.push( \"Credits\" );\n\n\t\tlet choice = await b8.Async.menu(\n\t\t\tmenuChoices,\n\t\t\t{\n\t\t\t\tborder: false,\n\t\t\t\tpadding: 0,\n\t\t\t\tcenterH: true,\n\t\t\t}\n\t\t);\n\n\t\tconst selected = menuChoices[ choice ];\n\n\t\t// Start a new game.\n\t\tif ( 'Start Game' === selected ) {\n\t\t\tb8.Scene.set( 'game' );\n\t\t\treturn;\n\t\t}\n\n\t\t// Show instructions.\n\t\tif ( 'Instructions' === selected ) {\n\t\t\tb8.locate( 2, 2 );\n\t\t\tb8.color( 15, 13 );\n\t\t\tconst instructions = b8.wrapText(\n\t\t\t\tmapper.menu.getInstructions(),\n\t\t\t\tb8.CONFIG.SCREEN_COLS - 6\n\t\t\t);\n\t\t\tawait b8.Async.dialog( instructions, [ \"OK\" ] );\n\t\t}\n\n\t\t// Show credits.\n\t\tif ( 'Credits' === selected ) {\n\t\t\tb8.locate( 2, 2 );\n\t\t\tb8.color( 15, 13 );\n\t\t\tconst credits = b8.wrapText(\n\t\t\t\tmapper.menu.getCredits(),\n\t\t\t\tb8.CONFIG.SCREEN_COLS - 6\n\t\t\t);\n\t\t\tawait b8.Async.dialog( credits, [ \"OK\" ] );\n\t\t}\n\n\t\tsetTimeout( mapper.sceneMenu.main, 10 );\n\n\t}\n\n};\n\nmapper.systems.characterAnimation = function( dt ) {\n\n\tconst anims = b8.ECS.query( 'CharacterAnimation' );\n\tif ( !anims ) return;\n\n\t// Loop through anims.\n\tfor ( const id of anims ) {\n\n\t\tconst anim = b8.ECS.getComponent( id, 'CharacterAnimation' );\n\t\tif ( !anim ) continue;\n\n\t\tif ( anim.duration > 0 ) {\n\n\t\t\tanim.duration -= dt;\n\t\t\tif ( anim.duration <= 0 ) {\n\n\t\t\t\tlet defaultAnimation = anim.default || '';\n\t\t\t\tconst direction = b8.ECS.getComponent( id, 'Direction' );\n\n\t\t\t\tif ( direction ) {\n\t\t\t\t\tconst directionNames = {\n\t\t\t\t\t\t'0,1': '',\n\t\t\t\t\t\t'0,-1': '-up',\n\t\t\t\t\t\t'1,0': '-right',\n\t\t\t\t\t\t'-1,0': '-left'\n\t\t\t\t\t};\n\t\t\t\t\tconst directionName = directionNames[ `${direction.dx},${direction.dy}` ] || '';\n\t\t\t\t\tdefaultAnimation = defaultAnimation + directionName;\n\t\t\t\t}\n\n\t\t\t\tanim.name = defaultAnimation;\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n\nmapper.systems.tryPortal = async function( col, row ) {\n\n\tconst id = b8.ECS.entitiesAt( col, row );\n\tconsole.log( 'Checking for portal at', col, row, id );\n\tif ( !id ) return false;\n\n\tfor ( const entityId of id ) {\n\t\tconst portal = b8.ECS.getComponent( entityId, 'Portal' );\n\t\treturn mapper.systems.handlePortal( portal );\n\t}\n\n}\n\nmapper.systems.handlePortal = async function( portal ) {\n\n\tif ( !portal ) return false;\n\tif ( portal.target === '' ) return false;\n\n\t// Find portal with the matching name.\n\tconst doorways = b8.ECS.query( 'Portal' );\n\tconst targetDoorway = doorways.find(\n\t\t( id ) => {\n\t\t\tconst targetPortal = b8.ECS.getComponent( id, 'Portal' );\n\t\t\treturn targetPortal.name === portal.target;\n\t\t}\n\t);\n\n\tif ( targetDoorway ) {\n\t\tconst targetLoc = b8.ECS.getComponent( targetDoorway, 'Loc' );\n\t\tif ( targetLoc ) {\n\t\t\tawait b8.Async.wait( 0.1 );\n\t\t\tb8.ECS.setLoc( mapper.player, targetLoc.col, targetLoc.row );\n\t\t}\n\t}\n\n\treturn false; // Allow stepping onto the portal\n\n};\n\n\nmapper.systems.tryPushing = ( col, row, dx, dy ) => {\n\n\tconst hitX = col + dx;\n\tconst hitY = row + dy;\n\n\tfor ( const id of b8.ECS.entitiesAt( hitX, hitY ) ) {\n\n\t\t// If not a solid object, or pushable, skip.\n\t\tif ( !b8.ECS.hasComponent( id, 'Solid' ) ) continue;\n\t\tif ( !b8.ECS.hasComponent( id, 'Pushable' ) ) continue;\n\n\t\tconst loc = b8.ECS.getComponent( id, 'Loc' );\n\t\tconst newCol = loc.col + dx;\n\t\tconst newRow = loc.row + dy;\n\n\t\tconst blocked =\n\t\t\t!mapper.collision.isWalkable( newCol, newRow ) ||\n\t\t\tb8.ECS.entitiesAt( newCol, newRow ).some( e => b8.ECS.hasComponent( e, 'Solid' ) );\n\n\t\tif ( !blocked ) {\n\t\t\t// move the pushable thing.\n\t\t\tb8.ECS.setLoc( id, newCol, newRow );\n\n\t\t\tb8.Sfx.play( 'fx/action/drag' );\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\treturn false;\n\n};\n\n\n\nmapper.systems.tryPulling = ( col, row, dx, dy, playerId ) => {\n\n\tconst hitCol = col + dx;\n\tconst hitRow = row + dy;\n\n\tfor ( const id of b8.ECS.entitiesAt( hitCol, hitRow ) ) {\n\n\t\tif ( !b8.ECS.hasComponent( id, 'Solid' ) ) continue;\n\t\tif ( !b8.ECS.hasComponent( id, 'Pushable' ) ) continue; // now covers pull\n\n\t\tconst backCol = col - dx;\n\t\tconst backRow = row - dy;\n\t\tif ( !mapper.collision.isWalkable( backCol, backRow ) ||\n\t\t\tb8.ECS.entitiesAt( backCol, backRow ).some( e => b8.ECS.hasComponent( e, 'Solid' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Move target into player's tile, move player back\n\t\tb8.ECS.setLoc( id, col, row );\n\t\tb8.ECS.setLoc( playerId, backCol, backRow );\n\n\t\tb8.Sfx.play( 'fx/action/drag' );\n\n\t\treturn true;\n\n\t}\n\n\treturn false;\n\n};\n\n\nmapper.systems.teleportSystem = async function( dt ) {\n\n\tconst list = b8.ECS.query( 'Teleport' );\n\n\tfor ( const [ id, teleport ] of list ) {\n\t\tconst doorways = b8.ECS.query( 'Portal' );\n\t\tconst targetDoorway = doorways.find(\n\t\t\t( [ targetId ] ) => {\n\t\t\t\tconst targetPortal = b8.ECS.getComponent( targetId, 'Portal' );\n\t\t\t\treturn targetPortal?.name === teleport.target;\n\t\t\t}\n\t\t);\n\n\t\tif ( targetDoorway ) {\n\t\t\tconst targetLoc = b8.ECS.getComponent( targetDoorway[ 0 ], 'Loc' );\n\t\t\tif ( targetLoc ) {\n\t\t\t\tawait b8.Async.wait( 0.1 );\n\t\t\t\tb8.ECS.setLoc( id, targetLoc.col, targetLoc.row );\n\t\t\t}\n\t\t}\n\n\t\t// Remove teleport after executing\n\t\tb8.ECS.removeComponent( id, 'Teleport' );\n\t}\n\n}\n\n\nmapper.types.skeleton = {\n\n\tinit: function( obj ) { },\n\n\tonCharacterCollision: async function( obj, newCol, newRow, dx, dy ) { },\n\n\tupdate: function( obj ) { },\n\n\trender: function( obj, offsetX = 0, offsetY = 0 ) { },\n\n};\n\nmapper.types.coin = {\n\n\tspawn: function( col, row, props ) {\n\n\t\treturn b8.ECS.create(\n\t\t\t{\n\t\t\t\tType: { name: 'coin' },\n\t\t\t\tLoc: { col, row },\n\t\t\t\tSprite: {\n\t\t\t\t\ttile: parseInt( mapper.settings.coin ) || 266,\n\t\t\t\t\tfg: props.fg || 14,\n\t\t\t\t\tbg: props.bg || 0\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\n\t},\n\n\tonCharacterCollision: function( id ) {\n\n\t\tb8.ECS.removeEntity( id );\n\t\tb8.Inventory.add( 'coin' );\n\t\tb8.Sfx.play( 'game/coin/002' );\n\n\t\treturn false;\n\n\t},\n\n};\n\nmapper.types.crate = {\n\n\tspawn: function( col, row, props ) {\n\n\t\treturn b8.ECS.create(\n\t\t\t{\n\t\t\t\tType: { name: 'crate' },\n\t\t\t\tLoc: { col, row },\n\t\t\t\tSprite: {\n\t\t\t\t\ttile: 352,\n\t\t\t\t\tfg: props.fg || 15,\n\t\t\t\t\tbg: props.bg || 0,\n\t\t\t\t\tdepth: 10\n\t\t\t\t},\n\t\t\t\tSolid: {},\n\t\t\t\tPushable: {},\n\t\t\t\tAction: { verb: 'pull' },\n\t\t\t}\n\t\t);\n\n\t},\n\n};\n\nmapper.types.doorOpen = {\n\n\tspawn: function( col, row, props ) {\n\n\t\tconst doorProps = {\n\t\t\tType: { name: 'door' },\n\t\t\tLoc: { col, row },\n\t\t\tSprite: {\n\t\t\t\ttile: 216,\n\t\t\t\tfg: props.fg || 14,\n\t\t\t\tbg: props.bg || 0\n\t\t\t},\n\t\t\tPortal: {\n\t\t\t\tname: props.name || null,\n\t\t\t\ttarget: props.leadsTo || ''\n\t\t\t},\n\t\t};\n\n\t\treturn b8.ECS.create( doorProps );\n\n\t},\n\n\n\tonCharacterCollision: function( id, newCol, newRow, dx, dy ) {\n\n\t\t// Check if the player is trying to step onto a portal.\n\t\tmapper.systems.tryPortal( newCol, newRow );\n\t\treturn false;\n\n\t},\n\n};\n\nmapper.types.doorStairs = {\n\n\tspawn: function( col, row, props ) {\n\n\t\tconst icon = props.icon || 197;\n\n\t\tconst stairsProps = {\n\t\t\tType: { name: 'doorStairs' },\n\t\t\tLoc: { col, row },\n\t\t\tSprite: {\n\t\t\t\ttile: icon,\n\t\t\t\tfg: props.fg || 14,\n\t\t\t\tbg: props.bg || 0\n\t\t\t},\n\t\t\tPortal: {\n\t\t\t\tname: props.name || null,\n\t\t\t\ttarget: props.leadsTo || ''\n\t\t\t},\n\t\t};\n\n\t\treturn b8.ECS.create( stairsProps );\n\n\t},\n\n\n\tonCharacterCollision: function( id, newCol, newRow, dx, dy ) {\n\n\t\t// Check if the player is trying to step onto a portal.\n\t\tmapper.systems.tryPortal( newCol, newRow );\n\t\treturn false;\n\n\t},\n\n};\n\nmapper.types.door = {\n\n\tTILE_DOOR_OPEN: 216,\n\tTILE_DOOR_DEFAULT: 219,\n\n\tspawn: function( col, row, props ) {\n\n\t\tconst icon = props.icon || mapper.types.door.TILE_DOOR_DEFAULT;\n\n\t\tconst doorProps = {\n\t\t\tType: { name: 'door' },\n\t\t\tLoc: { col, row },\n\t\t\tSprite: {\n\t\t\t\ttile: icon,\n\t\t\t\tfg: props.fg || 14,\n\t\t\t\tbg: props.bg || 0\n\t\t\t},\n\t\t\tPortal: {\n\t\t\t\tname: props.name || null,\n\t\t\t\ttarget: props.leadsTo || ''\n\t\t\t},\n\t\t};\n\n\t\tif ( icon !== mapper.types.door.TILE_DOOR_OPEN ) {\n\t\t\tdoorProps.Solid = {};\n\t\t}\n\n\t\treturn b8.ECS.create( doorProps );\n\n\t},\n\n\n\tonCharacterCollision: function( id, newCol, newRow, dx, dy ) {\n\n\t\t// If the door is open, allow passing through.\n\t\tif ( !b8.ECS.hasComponent( id, 'Solid' ) ) {\n\n\t\t\t// Check if the player is trying to step onto a portal.\n\t\t\tmapper.systems.tryPortal( newCol, newRow );\n\t\t\treturn false;\n\n\t\t}\n\n\t\tconst sprite = b8.ECS.getComponent( id, 'Sprite' );\n\t\tconst keyName = `key-${sprite.fg ?? \"default\"}`;\n\n\t\tif ( b8.Inventory.has( keyName ) ) {\n\t\t\tb8.ECS.removeComponent( id, 'Solid' );\n\t\t\tsprite.tile = mapper.types.door.TILE_DOOR_OPEN;\n\t\t\tb8.Sfx.play( 'ui/click/004' );\n\t\t\treturn true;\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n};\n\nmapper.types.key = {\n\n\tspawn: function( col, row, props ) {\n\n\t\treturn b8.ECS.create(\n\t\t\t{\n\t\t\t\tType: { name: 'key' },\n\t\t\t\tLoc: { col, row },\n\t\t\t\tSprite: {\n\t\t\t\t\ttile: 255,\n\t\t\t\t\tfg: props.fg || 14,\n\t\t\t\t\tbg: props.bg || 0\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\n\t},\n\n\tonCharacterCollision: function( id, newCol, newRow, dx, dy ) {\n\n\t\tconst keyName = `key-${b8.ECS.getComponent( id, 'Sprite' ).fg ?? \"default\"}`;\n\t\tb8.Inventory.add( keyName );\n\n\t\t// console.log( 'Collect key:', keyName );\n\n\t\tb8.ECS.removeEntity( id );\n\t\tb8.Sfx.play( 'tone/bloop/006' );\n\n\t\treturn false;\n\n\t},\n\n};\n\nmapper.types.signpost = {\n\n\tspawn: function( col, row, props ) {\n\n\t\treturn b8.ECS.create(\n\t\t\t{\n\t\t\t\tType: { name: 'signpost' },\n\t\t\t\tLoc: { col, row },\n\t\t\t\tSprite: {\n\t\t\t\t\ttile: props.icon || 252,\n\t\t\t\t\tfg: props.fg || 15,\n\t\t\t\t\tbg: props.bg || 0\n\t\t\t\t},\n\t\t\t\tSolid: {},\n\t\t\t\tMessage: { message: props.message || \"\" },\n\t\t\t\tAction: { verb: 'read' },\n\t\t\t}\n\t\t);\n\n\t},\n\n};\n\n\nmapper.types.start = {\n\n\tspawn: function( col, row, props ) {\n\n\t\tb8.ECS.setLoc( mapper.player, col, row );\n\t\t// player.x = x;\n\t\t// player.y = y;\n\n\t},\n\n};\n"],
  "mappings": "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",
  "names": ["offsetX", "offsetY"]
}
