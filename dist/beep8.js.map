{
  "version": 3,
  "sources": ["../beep8.js"],
  "sourcesContent": ["/*!\n * beep8.js - A Retro Game Library\n *\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n * \u2591\u2591\u2591\u2591       \u2591\u2591        \u2591        \u2591       \u2591\u2591\u2591     \u2591\u2591\u2591\u2591\u2591        \u2591\u2591      \u2591\u2591\u2591\u2591\u2591\n * \u2592\u2592\u2592\u2592  \u2592\u2592\u2592\u2592  \u2592  \u2592\u2592\u2592\u2592\u2592\u2592\u2592  \u2592\u2592\u2592\u2592\u2592\u2592\u2592  \u2592\u2592\u2592\u2592  \u2592  \u2592\u2592\u2592  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592  \u2592  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n * \u2593\u2593\u2593\u2593       \u2593\u2593      \u2593\u2593\u2593      \u2593\u2593\u2593       \u2593\u2593\u2593     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \u2593\u2593      \u2593\u2593\u2593\u2593\u2593\n * \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\n * \u2588\u2588\u2588\u2588       \u2588\u2588        \u2588        \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588  \u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n *\n * beep8.js is a retro game library designed to bring\n * the charm and simplicity of classic games to modern\n * web development. A fork of qx82, beep8.js retains\n * the original's elegance while enhancing its features\n * for today's developers.\n *\n * ---\n *\n * Website: https://beep8.com\n * Games: https://beepmini.com\n * Github: https://github.com/BinaryMoon/beep8\n * BlueSky: https://bsky.app/profile/binarymoon.bsky.social\n *\n * ---\n *\n * MIT License\n *\n * Copyright (c) 2024 - 2025 BinaryMoon\n *\n * Permission is hereby granted, free of charge, to any\n * person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the\n * Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall\n * be included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * An example project structure.\n *\n * const playGame = {\n *   init: () => { }\n *   update: async ( dt ) => { }\n *   render: () => { }\n * }\n *\n * window.addEventListener( \"load\", () => {\n *   beep8.init( async () => {\n *     // A function to run after everything loads.\n *     beep8.Scene.add( 'game', playGame, 30 );\n *     beep8.Scene.set( 'game' );\n *   } );\n * } );\n */\n\n/**\n * Things to note:\n *\n * By default tiles are 12\u00D712 pixels.\n * Coordinates (x, y) are pixels from the top-left.\n * Text grid uses (col, row) in 12\u00D712 tile units.\n * All text widths (maxWidth, widthCols, heightRows) are in columns/rows, not pixels.\n * Time: dt and durations are in seconds. Core.getNow() returns seconds.\n * Fonts: fontName is the name passed to TextRenderer.loadFontAsync.\n * Public API is beep8.* and beep8.Async.*; arguments are validated.\n * Actors have animations; tiles do not.\n * ECS locations and queries use tile coordinates (col, row).\n * setTile origin: locate(col,row) offsets draw*, and print* by tile origin.\n * Actor ids go from 1 to 20. Animations include idle, move-left, move-right, move-up, move-down.\n * Useful tile ids 0 = blank, 1 = solid, 330 = wall, 206 = water, 268 = fire, 182 = tree, 352 = crate, 256 = gem.\n * Handy color ids: 0 = black, 5=blue, 8=red, 10=yellow, 12=green, 15 = white.\n * A and B buttons are mapped to ButtonA and ButtonB keys (eg keydown('ButtonA')).\n * Prefer the ECS over global variables where possible/ sensible.\n * ECS ids are ints returned from beep8.ECS.create.\n */\n\nconst beep8 = {};\n\n\n( function( beep8 ) {\n\n\tbeep8.CONFIG = {\n\t\t// Enable debug?\n\t\tDEBUG: true,\n\t\t// The name of the project.\n\t\tNAME: \"beep8 Project\",\n\t\t// The version of the project.\n\t\tVERSION: \"1.0.0-dev\",\n\t\t// Canvas settings\n\t\tCANVAS_SETTINGS: {\n\t\t\t// The ID to assign to the beep8 canvas.\n\t\t\tCANVAS_ID: \"beep8-canvas\",\n\t\t\t// If set, these CSS classes will be added to the beep8 canvas.\n\t\t\t// This is an array of strings, each of which is a class name (without the \".\"),\n\t\t\t// for example: [ \"foo\", \"bar\", \"qux\" ]\n\t\t\tCANVAS_CLASSES: [],\n\t\t\t// If null then the canvas will be appended to the body.\n\t\t\t// If this is not null, then this is the element under which to create the rendering canvas.\n\t\t\t// This can be the ID of an HTML element, or an HTMLElement reference.\n\t\t\tCONTAINER: null,\n\t\t},\n\t\t// Sound effects settings\n\t\tSFX: {\n\t\t\t// Key presses whilst using an input dialog.\n\t\t\tTYPING: 'ui/click/003',\n\t\t\tMENU_UP: 'tone/beep/002',\n\t\t\tMENU_DOWN: 'tone/beep/001',\n\t\t\tMENU_SELECT: 'tone/beep/003',\n\t\t},\n\t\t// The font files.\n\t\t// The font files must be PNG files, with the characters in a grid.\n\t\tFONT_DEFAULT: \"../assets/font-default-thin.png\",\n\t\tFONT_TILES: \"../assets/font-tiles.png\",\n\t\tFONT_ACTORS: \"../assets/font-actors.png\",\n\t\t// The characters in the font file.\n\t\t// These are for the default font(s). If you use a different list you\n\t\t// will need to upate the font file to match.\n\t\tCHRS: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*+=-<>_#&@%^~$\u00A3\u20AC\u00A5\u00A2!?:;'\"/\\\\()[]{}.,\u00A9\u00AE\u2122\u2022\u2026| `,\n\t\t// Character size. The characters file's width must be\n\t\t// 12 * CHR_WIDTH and the height must be 12 * CHR_HEIGHT.\n\t\tCHR_WIDTH: 12,\n\t\tCHR_HEIGHT: 12,\n\t\t// Screen width and height in characters.\n\t\tSCREEN_ROWS: 25,\n\t\tSCREEN_COLS: 20,\n\t\t// EXPERIMENTAL\n\t\t// This is an experimental feature and is subject to change at any time.\n\t\t// The number of colors to use.\n\t\t// 1 = each tile is 2 colors (foreground and background).\n\t\t// 2 = each tile could be multiple colours. A background colour, and\n\t\t// shades of a foreground colour based upon the greyscale colours used\n\t\t// in the tiles.\n\t\t// Make sure to change the tiles image as well if you change this.\n\t\tSCREEN_COLORS: 1,\n\t\t// Disable to turn off CRT effect.\n\t\tCRT_ENABLE: true,\n\t\t// Enable/ Disable vignette effect.\n\t\t// This is a boolean value.\n\t\tCRT_VIGNETTE: true,\n\t\t// Color palette.\n\t\t// Colors count from 0.\n\t\t// The first color is the background color.\n\t\t// This can be as many colors as you want, but each color requires us to\n\t\t// store a scaled copy of the characters image in memory, so more colors\n\t\t// = more memory.\n\t\t// You can redefine the colors at runtime with beep8.redefineColors([]).\n\t\tCOLORS: [\n\t\t\t\"#0A0C1F\", // 0. Very dark blue - almost black. The darkest colour.\n\t\t\t\"#263264\", // 1. Dark blue\n\t\t\t\"#A0ABB6\", // 2. Mid grey\n\t\t\t\"#B2EFEB\", // 3. Light blue\n\t\t\t\"#3FB0F1\", // 4. Mid blue\n\t\t\t\"#3548A3\", // 5. Blue\n\t\t\t\"#420241\", // 6. Dark red/ purple\n\t\t\t\"#6A3E49\", // 7. Brown\n\t\t\t\"#C22D44\", // 8. Red\n\t\t\t\"#E08355\", // 9. Orange\n\t\t\t\"#FFC763\", // 10. Yellow\n\t\t\t\"#A7D171\", // 11. Light green\n\t\t\t\"#30AB62\", // 12. Green\n\t\t\t\"#1E7F82\", // 13. Dark Green\n\t\t\t\"#FF76D7\", // 14. Pink\n\t\t\t\"#F4F4F4\", // 15. White\n\t\t],\n\t\t// The passkey for the game.\n\t\t// This is used when generating passcodes for levels.\n\t\t// It should be unique for each game so that passcodes are different for each game.\n\t\t// You can generate a passcode for a level with beep8.Passcode.getCode( levelId ).\n\t\t// The passcode will be a 4-character code.\n\t\tPASSKEY: \"beep8IsAwesome\",\n\t\t// If this is not null, then we will display a virtual joystick if the user\n\t\t// is on a mobile device.\n\t\tTOUCH_VJOY: true,\n\t\t// Cursor config:\n\t\tCURSOR: {\n\t\t\t// Blink interval in milliseconds.\n\t\t\tBLINK_INTERVAL: 400,\n\t\t},\n\t\t// If set, then special escape sequences can be used when printing (to set colors, etc).\n\t\t// These are the sequences that starts and end an escape sequence. See the documentation for\n\t\t// beep8.print() for more info on escape sequences.\n\t\t// If you don't want this, comment out these line, or set them to null.\n\t\tPRINT_ESCAPE_START: \"{{\",\n\t\tPRINT_ESCAPE_END: \"}}\",\n\t\t// The first character to use for the border in printBox & menus.\n\t\t// The number is the index of the top left corner of a border pattern in the font file.\n\t\t// The method will use the 4 corners, and the top horizontal and left vertical sides.\n\t\tBORDER_CHAR: 54,\n\t};\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * Initializes the API. This must be called before other functions and must\n\t * finish executing before other API functions are called.\n\t * Once the supplied callback is called, you can start using beep8 functions.\n\t *\n\t * @param {Function} callback - The callback to call when initialization is done.\n\t * @param {Object} [options] - Optional options object.\n\t * @returns {void}\n\t */\n\tbeep8.init = function( callback, options = {} ) {\n\n\t\tbeep8.Utilities.checkFunction( \"callback\", callback );\n\t\tbeep8.Utilities.checkObject( \"options\", options );\n\n\t\t// Combine options with beep8.CONFIG using deep merge\n\t\tif ( options !== null ) {\n\t\t\tbeep8.CONFIG = beep8.Utilities.deepMerge( beep8.CONFIG, options );\n\t\t}\n\n\t\treturn beep8.Core.init( callback );\n\n\t}\n\n\n\t/**\n\t * Sets the frame handler, that is, the function that will be called on\n\t * every frame to render the screen. This is only needed if you are making a\n\t * real time game. For asynchronous games, you can update the screen manually.\n\t *\n\t * @param {Function} handler - The frame handler function.\n\t * @param {number} [fps=30] - The target frames per second. Recommended: 30.\n\t * @returns {void}\n\t */\n\tbeep8.frame = function( renderHandler = null, updateHandler = null, fps = 30 ) {\n\n\t\tbeep8.Core.preflight( \"beep8.frame\" );\n\n\t\tif ( renderHandler !== null ) {\n\t\t\tbeep8.Utilities.checkFunction( \"render handler\", renderHandler );\n\t\t}\n\n\t\tif ( updateHandler !== null ) {\n\t\t\tbeep8.Utilities.checkFunction( \"update handler\", updateHandler );\n\t\t}\n\n\t\tbeep8.Utilities.checkNumber( \"fps\", fps );\n\n\t\treturn beep8.Core.setFrameHandlers( renderHandler, updateHandler, fps );\n\n\t}\n\n\n\t/**\n\t * Forces the screen to render right now. Useful for immediate redraw in\n\t * animations.\n\t *\n\t * You only need this if you are doing some kind of animation on your own\n\t * and you want to redraw the screen immediately to show the current state.\n\t *\n\t * Otherwise the screen repaints automatically when waiting for user input.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.render = function() {\n\n\t\tbeep8.Core.preflight( \"beep8.render\" );\n\n\t\treturn beep8.Renderer.render();\n\n\t}\n\n\n\t/**\n\t * Sets the foreground and/or background color.\n\t *\n\t * If you set the background color to -1, it will be transparent.\n\t *\n\t * @param {number} fg - The foreground color.\n\t * @param {number} [bg=undefined] - The background color (optional).\n\t * @returns {void}\n\t */\n\tbeep8.color = function( fg, bg = undefined ) {\n\n\t\tbeep8.Core.preflight( \"beep8.color\" );\n\t\tbeep8.Utilities.checkNumber( \"fg\", fg );\n\n\t\tif ( bg !== undefined ) {\n\t\t\tbeep8.Utilities.checkNumber( \"bg\", bg );\n\t\t}\n\n\t\tbeep8.Core.setColor( fg, bg );\n\n\t}\n\n\n\t/**\n\t * Gets the current foreground color.\n\t *\n\t * @returns {number} The current foreground color.\n\t */\n\tbeep8.getFgColor = function() {\n\n\t\tbeep8.Core.preflight( \"getFgColor\" );\n\n\t\treturn beep8.Core.drawState.fgColor;\n\n\t}\n\n\n\t/**\n\t * Gets the current background color.\n\t * -1 means transparent.\n\t *\n\t * @returns {number} The current background color.\n\t */\n\tbeep8.getBgColor = function() {\n\n\t\tbeep8.Core.preflight( \"beep8.getBgColor\" );\n\n\t\treturn beep8.Core.drawState.bgColor;\n\n\t}\n\n\n\t/**\n\t * Clears the screen using the specified or current background color.\n\t *\n\t * @param {number} [bg=undefined] - Optional background color index.\n\t * If provided, uses this index to get the color from the config. If not\n\t * provided, uses the current background color (drawState.bgColor).\n\t * @returns {void}\n\t */\n\tbeep8.cls = function( bg = undefined ) {\n\n\t\tbeep8.Core.preflight( \"beep8.Core.cls\" );\n\n\t\tif ( bg !== undefined ) beep8.Utilities.checkNumber( \"bg\", bg );\n\n\t\tbeep8.Core.cls( bg );\n\n\t}\n\n\n\t/**\n\t * Places the cursor at the given screen column and row. All drawing and\n\t * printing operations will start from here.\n\t *\n\t * @param {number} col - The column where the cursor is to be placed.\n\t * @param {number} [row] - The row where the cursor is to be placed (optional).\n\t * @returns {void}\n\t */\n\tbeep8.locate = function( col, row ) {\n\n\t\tbeep8.Core.preflight( \"beep8.locate\" );\n\t\tbeep8.Utilities.checkNumber( \"col\", col );\n\n\t\tif ( row !== undefined ) {\n\t\t\tbeep8.Utilities.checkNumber( \"row\", row );\n\t\t}\n\n\t\tbeep8.Core.setCursorLocation( col, row );\n\n\t}\n\n\n\t/**\n\t * Returns the cursor's current column.\n\t *\n\t * @returns {number} The cursor's current column.\n\t */\n\tbeep8.col = function() {\n\n\t\tbeep8.Core.preflight( \"col\" );\n\n\t\treturn beep8.Core.drawState.cursorCol;\n\n\t}\n\n\n\t/**\n\t * Returns the cursor's current row.\n\t *\n\t * @returns {number} The cursor's current row.\n\t */\n\tbeep8.row = function() {\n\n\t\tbeep8.Core.preflight( \"row\" );\n\n\t\treturn beep8.Core.drawState.cursorRow;\n\n\t}\n\n\n\t/**\n\t * Shows or hides the cursor.\n\t *\n\t * @param {boolean} visible - If true, show the cursor. If false, hide the\n\t * cursor.\n\t * @returns {void}\n\t */\n\tbeep8.cursor = function( visible ) {\n\n\t\tbeep8.Core.preflight( \"cursor\" );\n\t\tbeep8.Utilities.checkBoolean( \"visible\", visible );\n\n\t\tbeep8.CursorRenderer.setCursorVisible( visible );\n\n\t}\n\n\n\t/**\n\t * Prints text at the cursor position, using the current foreground and\n\t * background colors.\n\t *\n\t * The text can contain embedded newlines and they will behave as expected:\n\t * printing will continue at the next line.\n\t *\n\t * Fonts use the defined tile size as their dimensions. Each character will\n\t * be one tile. By default the tile size is: 12x12 pixels.\n\t *\n\t * If PRINT_ESCAPE_START and PRINT_ESCAPE_END are defined in CONFIG, then\n\t * you can also use escape sequences. For example:\n\t * - {{c1}} sets the color to 1\n\t * - {{b2}} sets the background to 2 (red)\n\t * - {{tfontname}} changes the current font to 'fontname' (temporary)\n\t * - {{z}} resets the color and font to their states before printing started\n\t *\n\t * Note: Font changes using escape sequences are temporary and will be\n\t * reset after the print operation is complete.\n\t *\n\t * See example-printing.html for an example.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} [maxWidth=-1] - The maximum width to wrap text at. -1 for no wrapping.\n\t * @returns {void}\n\t */\n\tbeep8.print = function( text, maxWidth = -1, fontName = null ) {\n\n\t\tbeep8.Core.preflight( \"beep8.text\" );\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"maxWidth\", maxWidth );\n\n\t\tlet font = fontName;\n\t\tif ( null !== font ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t\tfont = beep8.TextRenderer.getFontByName( fontName );\n\t\t}\n\n\t\tbeep8.TextRenderer.print( text, font, maxWidth );\n\n\t}\n\n\n\t/**\n\t * Prints text centered horizontally in a field of the given width.\n\t *\n\t * If the text is bigger than the width, it will wrap.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} width - The width of the space to place the text in, measured in Columns. Defaults to the screen width.\n\t * @returns {void}\n\t */\n\tbeep8.printCentered = function( text, width = beep8.CONFIG.SCREEN_COLS, fontName = null ) {\n\n\t\tbeep8.Core.preflight( \"beep8.printCentered\" );\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\n\t\tlet font = fontName;\n\t\tif ( null !== font ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t\tfont = beep8.TextRenderer.getFontByName( fontName );\n\t\t}\n\n\t\tbeep8.TextRenderer.printCentered( text, width, font );\n\n\t}\n\n\n\t/**\n\t * Prints text aligned to the right in a space of the given width.\n\t * If the text is bigger than the width, it will wrap.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} width - The width of the space to place the text in, measured in Columns. Defaults to the screen width.\n\t * @param {string} [fontName=null] - The font ID to use.\n\t * @returns {void}\n\t */\n\tbeep8.printRight = function( text, width = beep8.CONFIG.SCREEN_COLS, fontName = null ) {\n\n\t\tbeep8.Core.preflight( \"beep8.printRight\" );\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\n\t\tlet font = fontName;\n\t\tif ( null !== font ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t\tfont = beep8.TextRenderer.getFontByName( fontName );\n\t\t}\n\n\t\tbeep8.TextRenderer.printRight( text, width, font );\n\n\t}\n\n\n\t/**\n\t * Draws text at an arbitrary pixel position on the screen, not following\n\t * the \"row and column\" system.\n\t *\n\t * @param {number} x - The X coordinate of the top-left of the text.\n\t * @param {number} y - The Y coordinate of the top-left of the text.\n\t * @param {string} text - The text to print.\n\t * @param {string} [fontName=null] - The font ID to use.\n\t * @returns {void}\n\t */\n\tbeep8.drawText = function( x, y, text, fontName = null ) {\n\n\t\tbeep8.Core.preflight( \"beep8.drawText\" );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\n\t\tif ( fontName ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t}\n\n\t\tbeep8.TextRenderer.drawText( x, y, text, fontName );\n\n\t}\n\n\n\t/**\n\t * Measures the size of the given text without printing it.\n\t *\n\t * @param {string} text - The text to measure.\n\t * @returns {Object} An object with {cols, rows} indicating the dimensions.\n\t */\n\tbeep8.measure = function( text ) {\n\n\t\tbeep8.Core.preflight( \"measure\" );\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\n\t\treturn beep8.TextRenderer.measure( text );\n\n\t}\n\n\n\t/**\n\t * Prints a character at the current cursor position, advancing the cursor\n\t * position.\n\t *\n\t * @param {number|string} charCode - The character to print, as an integer\n\t * (ASCII code) or a one-character string.\n\t * @param {number} [numTimes=1] - How many times to print the character.\n\t * @param {string} fontName - The font id for the font to draw with.\n\t * @returns {void}\n\t */\n\tbeep8.printChar = function( charCode, numTimes = 1, fontName = null ) {\n\n\t\tbeep8.Core.preflight( \"beep8.printChar\" );\n\n\t\tcharCode = beep8.convChar( charCode );\n\t\tbeep8.Utilities.checkInt( \"charCode\", charCode );\n\t\tbeep8.Utilities.checkInt( \"numTimes\", numTimes );\n\n\t\tif ( numTimes < 0 ) {\n\t\t\tbeep8.Utilities.fatal( \"[beep8.printChar] numTimes must be a positive integer\" );\n\t\t}\n\n\t\t// Nothing to print.\n\t\tif ( 0 === numTimes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet font = fontName;\n\t\tif ( null !== font ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t\tfont = beep8.TextRenderer.getFontByName( fontName );\n\t\t}\n\n\t\tbeep8.TextRenderer.printChar( charCode, numTimes, font );\n\n\t}\n\n\n\t/**\n\t * Prints a rectangle of the given size with the given character, starting\n\t * at the current cursor position.\n\t *\n\t * @param {number} widthCols - Width of the rectangle in screen columns.\n\t * @param {number} heightRows - Height of the rectangle in screen rows.\n\t * @param {number|string} [charCode=8] - The character to print.\n\t * @returns {void}\n\t */\n\tbeep8.printRect = function( widthCols, heightRows, charCode = 8 ) {\n\n\t\tbeep8.Core.preflight( \"beep8.printRect\" );\n\t\tcharCode = beep8.convChar( charCode );\n\n\t\tbeep8.Utilities.checkNumber( \"widthCols\", widthCols );\n\t\tbeep8.Utilities.checkNumber( \"heightRows\", heightRows );\n\t\tbeep8.Utilities.checkNumber( \"charCode\", charCode );\n\n\t\tbeep8.TextRenderer.printRect( widthCols, heightRows, charCode );\n\n\t}\n\n\n\t/**\n\t * Prints a box with a border of the given size starting at the cursor\n\t * position, using border-drawing characters.\n\t *\n\t * @param {number} widthCols - Width of the box in screen columns, including\n\t * the border.\n\t * @param {number} heightRows - Height of the box in screen rows, including\n\t * the border.\n\t * @param {boolean} [fill=true] - If true, fill the interior with spaces.\n\t * @param {number} [borderChar=54] - The first border-drawing character to\n\t * use.\n\t * @returns {void}\n\t */\n\tbeep8.printBox = function( widthCols, heightRows, fill = true, borderChar = beep8.CONFIG.BORDER_CHAR ) {\n\n\t\tbeep8.Core.preflight( \"beep8.printBox\" );\n\t\tborderChar = beep8.convChar( borderChar );\n\n\t\tbeep8.Utilities.checkNumber( \"widthCols\", widthCols );\n\t\tbeep8.Utilities.checkNumber( \"heightRows\", heightRows );\n\t\tbeep8.Utilities.checkBoolean( \"fill\", fill );\n\t\tbeep8.Utilities.checkNumber( \"borderChar\", borderChar );\n\n\t\tbeep8.TextRenderer.printBox( widthCols, heightRows, fill, borderChar );\n\n\t}\n\n\n\t/**\n\t * Draws an image (previously loaded with beep8.loadImage).\n\t *\n\t * @param {number} x - The X coordinate of the top-left of the image.\n\t * @param {number} y - The Y coordinate of the top-left of the image.\n\t * @param {HTMLImageElement} image - The image to draw.\n\t * @returns {void}\n\t */\n\tbeep8.drawImage = function( x, y, image ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"image\", image, HTMLImageElement );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\n\t\tbeep8.Core.drawImage( image, x, y );\n\n\t}\n\n\n\t/**\n\t * Draws a rectangular part of an image (previously loaded with\n\t * beep8.loadImage).\n\t *\n\t * @param {number} x - The X coordinate of the top-left of the image.\n\t * @param {number} y - The Y coordinate of the top-left of the image.\n\t * @param {HTMLImageElement} image - The image to draw.\n\t * @param {number} srcX - The X coordinate of the top-left of the rectangle\n\t * to be drawn.\n\t * @param {number} srcY - The Y coordinate of the top-left of the rectangle\n\t * to be drawn.\n\t * @param {number} width - The width in pixels of the rectangle to be drawn.\n\t * @param {number} height - The height in pixels of the rectangle to be\n\t * drawn.\n\t * @returns {void}\n\t */\n\tbeep8.drawImageRect = function( x, y, image, srcX, srcY, width, height ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"image\", image, HTMLImageElement );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkNumber( \"srcX\", srcX );\n\t\tbeep8.Utilities.checkNumber( \"srcY\", srcY );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\n\t\tbeep8.Core.drawImage( image, x, y, srcX, srcY, width, height );\n\n\t}\n\n\n\t/**\n\t * Draws a rectangle (border only) using the current foreground color.\n\t *\n\t * @param {number} x - The X coordinate of the top-left corner.\n\t * @param {number} y - The Y coordinate of the top-left corner.\n\t * @param {number} width - The width of the rectangle in pixels.\n\t * @param {number} height - The height of the rectangle in pixels.\n\t * @returns {void}\n\t */\n\tbeep8.drawRect = function( x, y, width, height, lineWidth = 1 ) {\n\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\t\tbeep8.Utilities.checkNumber( \"lineWidth\", lineWidth );\n\n\t\tbeep8.Core.drawRect( x, y, width, height, lineWidth );\n\n\t}\n\n\n\t/**\n\t * Draws a filled rectangle using the current foreground color.\n\t *\n\t * @param {number} x - The X coordinate of the top-left corner.\n\t * @param {number} y - The Y coordinate of the top-left corner.\n\t * @param {number} width - The width of the rectangle in pixels.\n\t * @param {number} height - The height of the rectangle in pixels.\n\t * @returns {void}\n\t */\n\tbeep8.fillRect = function( x, y, width, height ) {\n\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\n\t\tbeep8.Core.fillRect( x, y, width, height );\n\n\t}\n\n\n\t/**\n\t * Plays a sound (previously loaded with beep8.loadSound).\n\t *\n\t * @param {HTMLAudioElement} sfx - The sound to play.\n\t * @param {number} [volume=1] - The volume to play the sound at.\n\t * @param {boolean} [loop=false] - If true, play the sound in a loop.\n\t * @returns {void}\n\t */\n\tbeep8.playSound = function( sfx, volume = 1, loop = false ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"sfx\", sfx, HTMLAudioElement );\n\n\t\tsfx.currentTime = 0;\n\t\tsfx.volume = volume;\n\t\tsfx.loop = loop;\n\n\t\tsfx.play();\n\n\t}\n\n\n\t/**\n\t * Draws a sprite on the screen.\n\t *\n\t * @param {number|string} ch - The character code of the sprite.\n\t * @param {number} x - The X position at which to draw.\n\t * @param {number} y - The Y position at which to draw.\n\t * @returns {void}\n\t */\n\tbeep8.spr = function( ch, x, y ) {\n\n\t\tch = beep8.convChar( ch );\n\n\t\tbeep8.Utilities.checkNumber( \"ch\", ch );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\n\t\tbeep8.TextRenderer.spr( ch, x, y );\n\n\t}\n\n\n\t/**\n\t * Draws an actor on the screen with a specific frame and direction.\n\t *\n\t * @param {number} ch - The character code of the actor.\n\t * @param {number} frame - The frame to draw.\n\t * @param {number} [direction=0] - The direction to draw the actor in. 0 = right, 1 = left.\n\t * @returns {void}\n\t */\n\tbeep8.drawActor = function( ch, animation ) {\n\n\t\tch = beep8.convChar( ch );\n\n\t\tbeep8.Utilities.checkInt( \"ch\", ch );\n\t\tbeep8.Utilities.checkString( \"animation\", animation );\n\n\t\tbeep8.Actors.draw( ch, animation );\n\n\t}\n\n\n\t/**\n\t * Draws a sprite on the screen.\n\t *\n\t * @param {number|string} ch - The character code of the sprite.\n\t * @param {string} animation - The animation to play.\n\t * @param {number} x - The X position at which to draw.\n\t * @param {number} y - The Y position at which to draw.\n\t * @param {number|null} startTime - The start time of the animation in milliseconds.\n\t * @returns {boolean} True if the sprite was drawn, otherwise false.\n\t */\n\tbeep8.sprActor = function( ch, animation, x, y, startTime = null ) {\n\n\t\tch = beep8.convChar( ch );\n\n\t\tbeep8.Utilities.checkInt( \"ch\", ch );\n\t\tbeep8.Utilities.checkString( \"animation\", animation );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tif ( startTime !== null ) beep8.Utilities.checkNumber( \"startTime\", startTime );\n\n\t\treturn beep8.Actors.spr( ch, animation, x, y, startTime );\n\n\t}\n\n\n\t/**\n\t * Checks if the given key is currently pressed or not.\n\t *\n\t * @param {string} keyName - The name of the key.\n\t * @returns {boolean} True if the key is pressed, otherwise false.\n\t */\n\tbeep8.key = function( keyName ) {\n\n\t\tbeep8.Core.preflight( \"beep8.key\" );\n\n\t\tbeep8.Utilities.checkString( \"keyName\", keyName );\n\n\t\treturn beep8.Input.keyHeld( keyName );\n\n\t}\n\n\n\t/**\n\t * Checks if the given key was JUST pressed on this frame.\n\t *\n\t * @param {string} keyName - The name of the key.\n\t * @returns {boolean} True if the key was just pressed, otherwise false.\n\t */\n\tbeep8.keyp = function( keyName ) {\n\n\t\tbeep8.Core.preflight( \"beep8.keyp\" );\n\n\t\tbeep8.Utilities.checkString( \"keyName\", keyName );\n\n\t\treturn beep8.Input.keyJustPressed( keyName );\n\n\t}\n\n\n\n\t/**\n\t * Play a song.\n\t *\n\t * @param {string} song - The name of the song to play.\n\t * @returns {void}\n\t */\n\tbeep8.playSong = function( song ) {\n\n\t\tbeep8.Utilities.checkString( \"song\", song );\n\n\t\tbeep8.Sound.playSong( song );\n\n\t}\n\n\n\t/**\n\t * Play a sound effect.\n\t *\n\t * @param {string} sfx - The name of the sound effect to play.\n\t * @returns {void}\n\t */\n\tbeep8.playSfx = function( sfx ) {\n\n\t\tbeep8.Utilities.checkString( \"sfx\", sfx );\n\n\t\tbeep8.Sfx.play( sfx );\n\n\t}\n\n\n\t/**\n\t * Redefines the colors, assigning new RGB values to each color.\n\t *\n\t * @param {Array<number>} colors - An array of RGB values.\n\t * @returns {void}\n\t */\n\tbeep8.redefineColors = function( colors ) {\n\n\t\tbeep8.Core.preflight( \"beep8.redefineColors\" );\n\n\t\tbeep8.Utilities.checkArray( \"colors\", colors );\n\n\t\tbeep8.Core.defineColors( colors );\n\n\t}\n\n\n\t/**\n\t * Sets the current font for text-based operations.\n\t *\n\t * @param {string} [fontName=\"default\"] - The font ID to set. Pass null or\n\t * omit to reset to default font.\n\t * @returns {void}\n\t */\n\tbeep8.setFont = function( fontName ) {\n\n\t\tbeep8.Core.preflight( \"beep8.setFont\" );\n\n\t\tfontName = fontName || \"default-thin\";\n\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\n\t\tbeep8.TextRenderer.setFont( fontName );\n\n\t}\n\n\n\t/**\n\t * Returns the current font.\n\t *\n\t * @returns {string} The current font.\n\t */\n\tbeep8.getFont = function() {\n\n\t\tbeep8.Core.preflight( \"beep8.getFont\" );\n\n\t\tbeep8.TextRenderer.getFont();\n\n\t}\n\n\n\t/**\n\t * Returns the font object for the given font name.\n\t *\n\t * @param {string} fontName - The name of the font.\n\t * @returns {Object} The font object.\n\t */\n\tbeep8.getFontByName = function( fontName ) {\n\n\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\n\t\treturn beep8.TextRenderer.getFontByName( fontName );\n\n\t}\n\n\n\t/**\n\t * Sets the current tile font for text-based operations.\n\t *\n\t * @param {string} [fontName=\"tiles\"] - The font ID to set. Pass null or\n\t * omit to reset to default font.\n\t * @returns {void}\n\t */\n\tbeep8.setTileFont = function( fontName ) {\n\n\t\tbeep8.Core.preflight( \"beep8.setTileFont\" );\n\n\t\tfontName = fontName || \"tiles\";\n\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\n\t\tbeep8.TextRenderer.setTileFont( fontName );\n\n\t}\n\n\n\t/**\n\t * Converts a character code to its integer representation if needed.\n\t *\n\t * @param {number|string} charCode - The character code to convert.\n\t * @returns {number} The integer representation of the character code.\n\t */\n\tbeep8.convChar = function( charCode ) {\n\n\t\tif ( typeof ( charCode ) === \"string\" && charCode.length > 0 ) {\n\t\t\treturn charCode.charCodeAt( 0 );\n\t\t}\n\n\t\treturn charCode;\n\n\t}\n\n\n\t/**\n\t * Stops a sound (previously loaded with beep8.playSound).\n\t *\n\t * @param {HTMLAudioElement} sfx - The sound to stop playing.\n\t * @returns {void}\n\t */\n\tbeep8.stopSound = function( sfx ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"sfx\", sfx, HTMLAudioElement );\n\t\tsfx.currentTime = 0;\n\t\tsfx.pause();\n\n\t}\n\n\n\t/**\n\t * Returns the raw canvas 2D context for drawing.\n\t *\n\t * @returns {CanvasRenderingContext2D} The raw HTML 2D canvas context.\n\t */\n\tbeep8.getContext = function() {\n\n\t\treturn beep8.Core.getContext();\n\n\t}\n\n\n\t/**\n\t * Saves the contents of the screen into an ImageData object and returns it.\n\t *\n\t * @returns {ImageData} An ImageData object with the screen's contents.\n\t */\n\tbeep8.saveScreen = function() {\n\n\t\treturn beep8.Core.saveScreen();\n\n\t}\n\n\n\t/**\n\t * Run a screenshake effect.\n\t *\n\t * @param {number} duration - The duration of the screenshake effect in seconds.\n\t * @returns {boolean} Returns true if the screenshake effect was successfully triggered.\n\t */\n\tbeep8.screenShake = function( duration ) {\n\n\t\tbeep8.Utilities.checkNumber( \"duration\", duration );\n\n\t\treturn beep8.Renderer.shakeScreen( duration );\n\n\t}\n\n\n\t/**\n\t * Restores the contents of the screen using an ImageData object.\n\t *\n\t * @param {ImageData} screenData - The ImageData object with the screen's\n\t * contents.\n\t * @returns {void}\n\t */\n\tbeep8.restoreScreen = function( screenData ) {\n\n\t\treturn beep8.Core.restoreScreen( screenData );\n\n\t}\n\n\n\t/**\n\t * Returns the text with line breaks inserted so that it fits within the\n\t * given width.\n\t *\n\t * @param {string} text - The text to wrap.\n\t * @param {number} maxWidth - The maximum width to wrap text at.\n\t * @returns {string} The wrapped text.\n\t */\n\tbeep8.wrapText = function( text, maxWidth ) {\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"maxWidth\", maxWidth );\n\n\t\treturn beep8.TextRenderer.wrapText( text, maxWidth );\n\n\t}\n\n\n\t/**\n\t * Add a new game scene.\n\t *\n\t * @param {string} name - The name of the scene.\n\t * @param {Function} update - The update function for the scene.\n\t * @returns {void}\n\t */\n\tbeep8.addScene = function( name, update = {} ) {\n\n\t\tbeep8.Scene.add( name, update );\n\n\t}\n\n\n\t/**\n\t * Switches to a specified scene by name.\n\t *\n\t * @param {string} name - The name of the scene to switch to.\n\t * @returns {void}\n\t */\n\tbeep8.switchScene = function( name ) {\n\n\t\tbeep8.Scene.set( name );\n\n\t}\n\n\n\t/**\n\t * Gets the current active scene.\n\t *\n\t * @returns {Object|null} The active scene object, or null if no scene is active.\n\t */\n\tbeep8.getScene = function() {\n\n\t\treturn beep8.Scene.get();\n\n\t}\n\n\n\t/**\n\t * Speaks the given text using the Web Speech API.\n\t *\n\t * @param {string} text - The text to speak.\n\t * @param {Object} [options] - Optional settings for speech synthesis.\n\t * @param {number} [options.pitch=1] - The pitch of the voice.\n\t * @param {number} [options.rate=1] - The rate of speech.\n\t * @param {number} [options.volume=1] - The volume of the speech.\n\t * @returns {void}\n\t */\n\tbeep8.speak = function( text, options = {} ) {\n\n\t\t// Speech synthesis is not supported in this browser.\n\t\tif ( !window.speechSynthesis ) return;\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkObject( \"options\", options );\n\n\t\tconst utterance = new SpeechSynthesisUtterance( text );\n\n\t\t// Optional settings\n\t\tutterance.pitch = options.pitch ?? 1;\n\t\tutterance.rate = options.rate ?? 1;\n\t\tutterance.volume = options.volume ?? 1;\n\n\t\tspeechSynthesis.speak( utterance );\n\n\t};\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t// Initialize a flag to track if we're already paused.\n\tbeep8._asyncActive = false;\n\n\t/**\n\t * ASYNC API FUNCTIONS\n\t * These functions must be called with 'await'.\n\t * For example:\n\t *\n\t * const k = await beep8.Async.key();\n\t * console.log(\"The user pressed \" + k);\n\t */\n\tbeep8.Async = beep8.Async || {};\n\n\t/**\n\t * Create a Proxy for beep8.Async to intercept method calls.\n\t *\n\t * The Proxy's get handler wraps each function so that:\n\t * 1. If no async function is currently active:\n\t *    - It sets the _asyncActive flag.\n\t *    - It pauses the scene.\n\t * 2. It calls beep8.Core.preflight with the method's name.\n\t * 3. It runs the original method.\n\t * 4. In the finally block, if the pause was applied:\n\t *    - It resumes the scene.\n\t *    - It resets the _asyncActive flag.\n\t *\n\t * This mechanism prevents nested async calls from applying the pause/resume logic more than once.\n\t */\n\tbeep8.Async = new Proxy(\n\t\tbeep8.Async,\n\t\t{\n\t\t\tget( target, prop, receiver ) {\n\n\t\t\t\tconst orig = Reflect.get( target, prop, receiver );\n\n\t\t\t\tif ( typeof orig === \"function\" ) {\n\n\t\t\t\t\t// Return a wrapped function for any async API function\n\t\t\t\t\treturn async function( ...args ) {\n\n\t\t\t\t\t\t// Only wrap if no async function is already active.\n\t\t\t\t\t\tlet doWrap = !beep8._asyncActive;\n\t\t\t\t\t\tif ( doWrap ) {\n\t\t\t\t\t\t\t// Mark that an async function has started.\n\t\t\t\t\t\t\tbeep8._asyncActive = true;\n\t\t\t\t\t\t\t// console.log( `pause beep8.Async.${prop}` );\n\t\t\t\t\t\t\t// Pause the scene to wait for the async call.\n\t\t\t\t\t\t\tbeep8.Scene.pause();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\t// Call preflight check with the method identifier.\n\t\t\t\t\t\t\tbeep8.Core.preflight( `beep8.Async.${prop}` );\n\t\t\t\t\t\t\t// Execute the original async function with its arguments.\n\t\t\t\t\t\t\tconst result = await orig.apply( this, args );\n\t\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t\t} finally {\n\n\t\t\t\t\t\t\t// Only resume and reset _asyncActive if it was this call that paused.\n\t\t\t\t\t\t\tif ( doWrap ) {\n\t\t\t\t\t\t\t\tbeep8.Scene.resume();\n\t\t\t\t\t\t\t\tbeep8._asyncActive = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Return non-function properties as-is.\n\t\t\t\treturn orig;\n\n\t\t\t}\n\t\t}\n\n\t);\n\n\n\t/**\n\t * Waits until the user presses a key and returns it.\n\t *\n\t * @returns {Promise<string>} The name of the key that was pressed.\n\t */\n\tbeep8.Async.key = async function() {\n\n\t\treturn await beep8.Input.readKeyAsync();\n\n\t}\n\n\n\t/**\n\t * Waits until the user clicks/ taps the pointer and returns its position.\n\t *\n\t * @returns {Promise<{x: number, y: number}>} The pointer position.\n\t */\n\tbeep8.Async.pointer = async function() {\n\n\t\treturn await beep8.Input.readPointerAsync();\n\n\t}\n\n\n\t/**\n\t * Waits until the user inputs a line of text, then returns it.\n\t *\n\t * @param {string} [initString=\"\"] - The initial string presented for the user to edit.\n\t * @param {number} [maxLen=-1] - The maximum length of the string the user can type. -1 means no limit.\n\t * @param {number} [maxWidth=-1] - The maximum width of the input line in characters. -1 means no wrapping.\n\t * @returns {Promise<string>} The input text.\n\t */\n\tbeep8.Async.readLine = async function( initString = \"\", maxLen = -1, maxWidth = -1 ) {\n\n\t\tbeep8.Utilities.checkString( \"initString\", initString );\n\t\tbeep8.Utilities.checkNumber( \"maxLen\", maxLen );\n\n\t\treturn await beep8.Input.readLine( initString, maxLen, maxWidth );\n\n\t}\n\n\n\t/**\n\t * Shows a menu of choices and waits for the user to pick an option.\n\t *\n\t * @param {string[]} choices - An array of choices.\n\t * @param {Object} [options={}] - Additional options for the menu.\n\t * @returns {Promise<number>} The index of the selected item or -1 if canceled.\n\t */\n\tbeep8.Async.menu = async function( choices, options = {} ) {\n\n\t\tbeep8.Utilities.checkArray( \"choices\", choices );\n\t\tbeep8.Utilities.checkObject( \"options\", options );\n\n\t\treturn await beep8.Menu.display( choices, options );\n\n\t}\n\n\n\t/**\n\t * Displays a dialog with the given prompt and choices.\n\t *\n\t * This allows shows a user the prompt and waits for them to select a choice.\n\t * You can use this for information (with an 'ok' response) or for multiple\n\t * choice answers.\n\t *\n\t * @param {string} prompt - The text to show.\n\t * @param {string[]} [choices=[\"OK\"]] - The choices to present to the user.\n\t * @param {Object} [options={}] - Additional options for the dialog. Uses beep8.Menu.display options.\n\t * @returns {Promise<number>} The index of the selected item.\n\t */\n\tbeep8.Async.dialog = async function( prompt, choices = [ \"OK\" ], options = {} ) {\n\n\t\tbeep8.Utilities.checkString( \"prompt\", prompt );\n\t\tbeep8.Utilities.checkArray( \"choices\", choices );\n\n\t\treturn beep8.Async.menu( choices, { prompt, center: true, ...options } );\n\n\t}\n\n\n\t/**\n\t * Displays a dialog with the given prompt and choices, showing the text character by character.\n\t *\n\t * @param {string} prompt - The text to show.\n\t * @param {string[]} [choices=[\"OK\"]] - The choices to present to the user.\n\t * @param {number} [wrapWidth=-1] - The width at which to wrap the text.\n\t * @param {number} [delay=0.05] - The delay between characters in seconds.\n\t * @param {Object} [options={}] - Additional options for the dialog. Uses beep8.Menu.display options.\n\t * @returns {Promise<number>} The index of the selected item.\n\t */\n\tbeep8.Async.dialogTypewriter = async function( prompt, choices = [ \"OK\" ], wrapWidth = -1, delay = 0.05, options = {} ) {\n\n\t\tbeep8.Utilities.checkString( \"prompt\", prompt );\n\t\tbeep8.Utilities.checkArray( \"choices\", choices );\n\t\tbeep8.Utilities.checkNumber( \"delay\", delay );\n\n\t\tif ( wrapWidth > 0 ) {\n\t\t\tprompt = beep8.TextRenderer.wrapText( prompt, wrapWidth );\n\t\t}\n\n\t\treturn await beep8.Async.menu( choices, { prompt, typewriter: true, center: true, ...options } );\n\n\t}\n\n\n\t/**\n\t * Shows text slowly, character by character, as in a typewriter.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} [delay=0.05] - The delay between characters in seconds.\n\t * @returns {Promise<void>} Resolves after the text is printed.\n\t */\n\tbeep8.Async.typewriter = async function( text, wrapWidth = -1, delay = 0.035, fontName = null, ) {\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"wrapWidth\", wrapWidth );\n\t\tbeep8.Utilities.checkNumber( \"delay\", delay );\n\n\t\tlet font = fontName;\n\t\tif ( null !== font ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t\tfont = beep8.TextRenderer.getFontByName( fontName );\n\t\t}\n\n\t\tawait beep8.TextRenderer.printTypewriter( text, wrapWidth, delay, font );\n\n\t}\n\n\n\t/**\n\t * Loads an image from the given URL.\n\t *\n\t * @param {string} url - The URL of the image.\n\t * @returns {Promise<HTMLImageElement>} The loaded image.\n\t */\n\tbeep8.Async.loadImage = async function( url ) {\n\n\t\tbeep8.Utilities.checkString( \"url\", url );\n\n\t\treturn await beep8.Core.loadImage( url );\n\n\t}\n\n\n\t/**\n\t * Loads a sound file from the given URL.\n\t *\n\t * @param {string} url - The URL of the sound file.\n\t * @returns {Promise<HTMLAudioElement>} The loaded sound.\n\t */\n\tbeep8.Async.loadSound = async function( url ) {\n\n\t\treturn new Promise(\n\t\t\t( resolve ) => {\n\n\t\t\t\tconst audio = new Audio();\n\t\t\t\taudio.oncanplaythrough = () => resolve( audio );\n\t\t\t\taudio.src = url;\n\t\t\t\taudio.load();\n\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Loads a font for later use in drawing text.\n\t *\n\t * @param {string} fontImageFile - The URL of the font image file.\n\t * @param {number} [tileSizeWidthMultiplier=1] - The width multiplier for the tile size.\n\t * @param {number} [tileSizeHeightMultiplier=1] - The height multiplier for the tile size.\n\t * @returns {Promise<string>} The font ID.\n\t */\n\tbeep8.Async.loadFont = async function( fontImageFile, tileSizeWidthMultiplier = 1, tileSizeHeightMultiplier = 1 ) {\n\n\t\tbeep8.Utilities.checkString( \"fontImageFile\", fontImageFile );\n\t\tbeep8.Utilities.checkNumber( \"tileSizeWidthMultiplier\", tileSizeWidthMultiplier );\n\t\tbeep8.Utilities.checkNumber( \"tileSizeHeightMultiplier\", tileSizeHeightMultiplier );\n\n\t\tconst fontName = \"FONT@\" + beep8.Utilities.makeUrlPretty( fontImageFile );\n\t\tawait beep8.TextRenderer.loadFontAsync( fontName, fontImageFile, tileSizeWidthMultiplier, tileSizeHeightMultiplier );\n\n\t\treturn fontName;\n\n\t}\n\n\n\t/**\n\t * Waits for a given number of seconds and then continues execution.\n\t *\n\t * @param {number} seconds - The duration to wait.\n\t * @returns {Promise<void>} Resolves after the specified time.\n\t */\n\tbeep8.Async.wait = async function( seconds ) {\n\n\t\tbeep8.Utilities.checkNumber( \"seconds\", seconds );\n\t\tbeep8.Renderer.render();\n\n\t\treturn await new Promise( resolve => setTimeout( resolve, Math.round( seconds * 1000 ) ) );\n\n\t}\n\n\n\t/**\n\t * Waits for the user to press a key to continue.\n\t *\n\t * @returns {Promise<void>} Resolves when the user presses a key.\n\t */\n\tbeep8.Async.waitForContinue = async function() {\n\n\t\twhile ( true ) {\n\t\t\tconst key = await beep8.Async.key();\n\t\t\tif ( key.includes( \"Enter\" ) || key.includes( \"ButtonA\" ) || key.includes( \" \" ) ) break;\n\t\t}\n\n\t}\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Hooks = {};\n\n\t/**\n\t * Internal hook management for actions and filters.\n\t * This is used to manage the hooks for actions and filters in the beep8 framework.\n\t * It allows you to add, execute, and remove hooks for various game events.\n\t */\n\tconst actions = {};\n\tconst filters = {};\n\n\n\t/**\n\t * Adds a hook to the specified store with the given name, callback, and priority.\n\t * This function is used internally to manage hooks for actions and filters.\n\t *\n\t * @param {Object} store - The store to add the hook to (actions or filters).\n\t * @param {string} hookName - The name of the hook.\n\t * @param {Function} callback - The function to call when the hook is triggered.\n\t * @param {number} [priority=10] - The priority of the hook.\n\t * @returns {void}\n\t */\n\tfunction _add( store, hookName, callback, priority = 10 ) {\n\n\t\tif ( !store[ hookName ] ) store[ hookName ] = [];\n\t\tstore[ hookName ].push( { callback, priority } );\n\t\tstore[ hookName ].sort( ( a, b ) => a.priority - b.priority );\n\n\t}\n\n\n\t/**\n\t * Registers an action hook.\n\t * This allows you to add a callback that will be executed when the action is triggered.\n\t * You can use this to modify game behavior or add custom functionality.\n\t *\n\t * @param {string} hookName - The name of the action hook.\n\t * @param {Function} callback - The function to call when the action is triggered.\n\t * @param {number} [priority=10] - The priority of the action hook.\n\t * @returns {void}\n\t */\n\tbeep8.Hooks.addAction = function( hookName, callback, priority = 10 ) {\n\n\t\t_add( actions, hookName, callback, priority );\n\n\t}\n\n\n\t/**\n\t * Executes all registered actions for the given hook name.\n\t * This will call each action's callback with the provided arguments.\n\t *\n\t * @example\n\t * beep8.Hooks.doAction( 'onPlayerMove', playerId, newX, newY, dx, dy );\n\t *\n\t * @param {string} hookName - The name of the action hook to execute.\n\t * @param {...*} args - The arguments to pass to the action callbacks.\n\t * @returns {void}\n\t *\n\t */\n\tbeep8.Hooks.doAction = function( hookName, ...args ) {\n\n\t\tif ( !actions[ hookName ] ) return;\n\t\tfor ( const { callback } of actions[ hookName ] ) {\n\t\t\tcallback( ...args );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Registers a filter hook.\n\t * This allows you to add a callback that will modify a value before it is returned.\n\t * You can use this to change game data or apply transformations.\n\t *\n\t * @param {string} hookName - The name of the filter hook.\n\t * @param {Function} callback - The function to call when the filter is applied.\n\t * @param {number} [priority=10] - The priority of the filter hook.\n\t * @returns {void}\n\t */\n\tbeep8.Hooks.addFilter = function( hookName, callback, priority = 10 ) {\n\n\t\t_add( filters, hookName, callback, priority );\n\n\t}\n\n\n\t/**\n\t * Applies all registered filters for the given hook name to a value.\n\t * This will call each filter's callback with the value and any additional arguments,\n\t * returning the modified value.\n\t *\n\t * @example\n\t * const modifiedValue = beep8.Hooks.applyFilters( 'modifyPlayerSpeed', playerSpeed, playerId );\n\t *\n\t * @param {string} hookName - The name of the filter hook to apply.\n\t * @param {*} value - The initial value to filter.\n\t * @param {...*} args - Additional arguments to pass to the filter callbacks.\n\t * @return {*} The modified value after all filters have been applied.\n\t */\n\tbeep8.Hooks.applyFilters = function( hookName, value, ...args ) {\n\n\t\tif ( !filters[ hookName ] ) return value;\n\n\t\tlet result = value;\n\t\tfor ( const { callback } of filters[ hookName ] ) {\n\t\t\tresult = callback( result, ...args );\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\n\t/**\n\t * Removes a specific action hook by its name and callback.\n\t * This is useful for cleaning up hooks that are no longer needed.\n\t *\n\t * @param {string} hookName - The name of the action hook to remove.\n\t * @param {Function} callback - The callback function to remove.\n\t * @returns {void}\n\t */\n\tbeep8.Hooks.removeAction = function( hookName, callback ) {\n\n\t\tactions[ hookName ] = ( actions[ hookName ] || [] ).filter( h => h.callback !== callback );\n\n\t}\n\n\n\t/**\n\t * Removes a specific filter hook by its name and callback.\n\t * This is useful for cleaning up filters that are no longer needed.\n\t *\n\t * @param {string} hookName - The name of the filter hook to remove.\n\t * @param {Function} callback - The callback function to remove.\n\t * @returns {void}\n\t */\n\tbeep8.Hooks.removeFilter = function( hookName, callback ) {\n\n\t\tfilters[ hookName ] = ( filters[ hookName ] || [] ).filter( h => h.callback !== callback );\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * Virtual joystick setup.\n\t *\n\t * This module sets up a virtual joystick for mobile devices.\n\t * The joystick has two parts: a directional pad on the left side of the screen,\n\t * and three buttons on the right side of the screen.\n\t * The directional pad has up, down, left, and right buttons.\n\t * The right side has three buttons, labeled A, B, and =.\n\t */\n\tbeep8.Joystick = {};\n\n\tlet repeatIntervals = null;\n\n\tconst VJOY_HTML = `\n<div class=\"vjoy-options\">\n\t<button id='vjoy-button-ter' class='vjoy-button'>Start</button>\n\t<button id='vjoy-button-screenshot' class='vjoy-button'>Snap</button>\n</div>\n<div class=\"vjoy-controls\">\n\t<div class=\"vjoy-dpad\">\n\t<button id='vjoy-button-up' class='vjoy-button'><span>U</span></button>\n\t<button id='vjoy-button-right' class='vjoy-button'><span>R</span></button>\n\t<button id='vjoy-button-left' class='vjoy-button'><span>L</span></button>\n\t<button id='vjoy-button-down' class='vjoy-button'><span>D</span></button>\n\t</div>\n\t<div class=\"vjoy-buttons\">\n\t<button id='vjoy-button-pri' class='vjoy-button'><span>A</span></button>\n\t<button id='vjoy-button-sec' class='vjoy-button'><span>B</span></button>\n\t</div>\n</div>`;\n\n\n\t/**\n\t * The CSS for the virtual joystick.\n\t *\n\t * @type {string}\n\t */\n\tconst VJOY_CSS = `\n:root {\n\t--b8-vjoy-button-color: #333;\n\t--b8-vjoy-button-size: 14vw;\n\t--b8-vjoy-button-dpad-size: calc(var(--b8-vjoy-button-size) * 2);\n\t--b8-console-radius: 2rem;\n\t--b8-border-radius: calc(var(--b8-vjoy-button-dpad-size) / 5);\n}\n\n.vjoy-container,\n.vjoy-container * {\n\tbox-sizing: border-box;\n\tuser-select: none;\n\t-webkit-user-select: none;\n\t-webkit-touch-callout: none;\n\ttouch-action: none;\n}\n\n.vjoy-container {\n\tposition: relative;\n\twidth: 100%;\n\tpadding: 8vw 4vw 8vw 6vw;\n\tbackground: deeppink;\n\tborder-radius: 0 0 var(--b8-console-radius) var(--b8-console-radius);\n}\n\n.vjoy-options {\n\tborder-radius: 5rem;\n\tposition: absolute;\n\tdisplay: flex;\n\tgap: 2vw;\n\talign-items: center;\n\tpadding: 2vw;\n\tborder-radius: 2rem;\n\tbackground: inherit;\n\ttop: -4vw;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n}\n\n.vjoy-controls {\n\tdisplay: flex;\n\tgap: 5vw;\n\tjustify-content: space-between;\n\talign-items: center;\n}\n\n.vjoy-dpad {\n\taspect-ratio: 1;\n\tmax-width: 10rem;\n\twidth: var(--b8-vjoy-button-dpad-size);\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: 1fr 1fr;\n\tflex-wrap: wrap;\n\ttransform: rotate(45deg);\n\tborder-radius: var(--b8-border-radius);\n\tbackground:black;\n\tgap: 1px;\n\tborder: 2px solid black;\n}\n\n.vjoy-dpad button {\n\twidth: 100%;\n\theight: 100%;\n\tposition: relative;\n}\n.vjoy-dpad button span {\n\ttransform: rotate(-45deg);\n}\n.vjoy-dpad button:after {\n\tposition: absolute;\n\tcontent: '';\n\tdisplay: block;\n\twidth: 100%;\n\theight: 100%;\n\tbackground: rgba(0,0,0,0);\n\ttransform: rotate(-45deg);\n}\n\n#vjoy-button-up {\n\tborder-radius: var(--b8-border-radius) 0 0 0;\n}\n#vjoy-button-down {\n\tborder-radius: 0 0 var(--b8-border-radius) 0;\n}\n#vjoy-button-left {\n\tborder-radius: 0 0 0 var(--b8-border-radius);\n}\n#vjoy-button-right {\n\tborder-radius: 0 var(--b8-border-radius) 0 0;\n}\n\n#vjoy-button-up:after {\n\ttransform: rotate(-45deg) translateY(-30%) scale(1.1);\n}\n#vjoy-button-down:after {\n\ttransform: rotate(-45deg) translateY(30%) scale(1.1);\n}\n#vjoy-button-left:after {\n\ttransform: rotate(-45deg) translateX(-30%) scale(1.1);\n}\n#vjoy-button-right:after {\n\ttransform: rotate(-45deg) translateX(30%) scale(1.1);\n}\n\n.vjoy-buttons {\n\tdisplay: flex;\n\tgap: 2vw;\n\ttransform: rotate(-45deg);\n\tborder: 0.8vw solid rgba(0,0,0,0.2);\n\tborder-radius: calc( var(--b8-border-radius) + 1vw );\n\tpadding: 1vw;\n}\n\n.vjoy-buttons button {\n\twidth: var(--b8-vjoy-button-size);\n\tmax-width: 5rem;\n\tmax-height: 5rem;\n\theight: var(--b8-vjoy-button-size);\n\tborder-radius: var(--b8-border-radius);\n\ttouch-action: none;\n\tborder: 2px solid black;\n\tposition: relative;\n}\n\n.vjoy-buttons button:after {\n\tposition: absolute;\n\tcontent: '';\n\tdisplay: block;\n\twidth: 100%;\n\theight: 100%;\n\tbackground: rgba(0,0,0,0);\n\ttransform: scale(1.2);\n}\n\n.vjoy-buttons button span {\n\ttransform: rotate(45deg);\n}\n\n.vjoy-button {\n\tbackground: var(--b8-vjoy-button-color) !important;\n\tborder: none;\n\tfont-family: arial, sans-serif;\n\tfont-size: 12px;\n\tfont-weight: 600;\n\tcolor: #aaa !important;\n\tuser-select: none;\n\ttouch-callout: none;\n\t-webkit-user-select: none;\n\t-webkit-touch-callout: none;\n\ttext-shadow: 0 -2px 0 black;\n\tpadding: 0;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tletter-spacing: 0.1em;\n\ttext-transform: uppercase;\n}\n\n.vjoy-button:hover,\n.vjoy-button:focus,\n.vjoy-button:active {\n\tbackground: black;\n\toutline: none;\n}\n\n#vjoy-button-screenshot,\n#vjoy-button-ter {\n\twidth: calc(var(--b8-vjoy-button-size) * 1.4);\n\tpadding: 1vw;\n\tborder-radius: 1rem;\n}\n`;\n\n\t/**\n\t * Sets up the virtual joystick.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Joystick.setup = function() {\n\n\t\tbeep8.Utilities.log( \"Setting up virtual joystick...\" );\n\n\t\t// Add controller styles.\n\t\tconst styleEl = document.createElement( \"style\" );\n\t\tstyleEl.setAttribute( \"type\", \"text/css\" );\n\t\tstyleEl.innerText = VJOY_CSS;\n\t\tdocument.body.appendChild( styleEl );\n\n\t\t// Create a container element\n\t\tconst container = document.createElement( 'div' );\n\t\tcontainer.className = 'vjoy-container';\n\t\tcontainer.innerHTML = VJOY_HTML;\n\n\t\tbeep8.Core.getBeepContainerEl().appendChild( container );\n\n\t\tsetTimeout( beep8.Joystick.continueSetup, 10 );\n\n\t}\n\n\n\t/**\n\t * Continues setting up the virtual joystick.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Joystick.continueSetup = function() {\n\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-up\", \"ArrowUp\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-down\", \"ArrowDown\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-left\", \"ArrowLeft\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-right\", \"ArrowRight\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-pri\", \"ButtonA\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-sec\", \"ButtonB\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-ter\", \"Enter\" );\n\t\tbeep8.Joystick.setUpButton( \"vjoy-button-screenshot\", \"0\" );\n\n\t\t// Prevent touches on the document body from doing what they usually do (opening\n\t\t// context menus, selecting stuff, etc).\n\t\tdocument.body.addEventListener( \"touchstart\", e => e.preventDefault() );\n\n\t}\n\n\n\t/**\n\t * Sets up a virtual joystick button.\n\t * If buttonKeyName is null, the button will be hidden.\n\t * Otherwise, the button will be set up to simulate the given key.\n\t *\n\t * @param {string} buttonId - The ID of the button element\n\t * @param {string} buttonKeyName - The key name to simulate\n\t * @returns {void}\n\t */\n\tbeep8.Joystick.setUpButton = function( buttonId, buttonKeyName ) {\n\n\t\tconst button = beep8.Utilities.assert(\n\t\t\tdocument.getElementById( buttonId ),\n\t\t\t\"Could not find button ID \" + buttonId\n\t\t);\n\n\t\tif ( buttonKeyName === null ) {\n\t\t\t// This means the user wants to hide the button.\n\t\t\tbutton.style.display = \"none\";\n\t\t\treturn;\n\t\t}\n\n\t\t[ \"pointerdown\", \"pointerstart\" ].forEach( eventName => {\n\t\t\tbutton.addEventListener(\n\t\t\t\teventName,\n\t\t\t\t( e ) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tbeep8.Joystick.handleButtonEvent( buttonKeyName, true, e );\n\t\t\t\t},\n\t\t\t\t{ passive: false }\n\t\t\t);\n\t\t} );\n\n\t\t// Cancel the button press if the pointer moves off the button.\n\t\t[ \"pointerout\", \"pointerup\", \"pointerleave\" ].forEach( eventName => {\n\t\t\tbutton.addEventListener(\n\t\t\t\teventName,\n\t\t\t\t( e ) => beep8.Joystick.handleButtonEvent( buttonKeyName, false, e )\n\t\t\t);\n\t\t} );\n\n\t\tbutton.addEventListener(\n\t\t\t\"pointermove\",\n\t\t\t( e ) => {\n\t\t\t\t// Prevent default behavior for pointermove events.\n\t\t\t\te.preventDefault();\n\t\t\t},\n\t\t\t{ passive: false }\n\t\t);\n\n\t\tbutton.addEventListener(\n\t\t\t\"contextmenu\",\n\t\t\t( e ) => e.preventDefault()\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Handles a button event.\n\t *\n\t * @param {string} buttonKeyName - The key name to simulate\n\t * @param {boolean} down - Whether the button is being pressed or released\n\t * @param {Event} evt - The event object\n\t * @returns {void}\n\t */\n\tbeep8.Joystick.handleButtonEvent = function( buttonKeyName, down, evt ) {\n\n\t\t// Add key property to event.\n\t\tevt.key = buttonKeyName;\n\n\t\t// Initialize repeat intervals container if not already created.\n\t\tif ( !repeatIntervals ) {\n\t\t\trepeatIntervals = {};\n\t\t}\n\n\t\tif ( down ) {\n\n\t\t\t// Call onKeyDown immediately.\n\t\t\tbeep8.Input.onKeyDown( evt );\n\n\t\t\t// If no timer exists for this button, start one.\n\t\t\tif ( !repeatIntervals[ buttonKeyName ] ) {\n\t\t\t\trepeatIntervals[ buttonKeyName ] = {};\n\n\t\t\t\t// Set a timeout for the initial delay.\n\t\t\t\trepeatIntervals[ buttonKeyName ].initialTimeout = setTimeout(\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\t// After the delay, start repeating.\n\t\t\t\t\t\trepeatIntervals[ buttonKeyName ].interval = setInterval(\n\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\tbeep8.Input.onKeyDown( evt );\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t150\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\t150\n\t\t\t\t);\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Clear any timers if they exist.\n\t\t\tif ( repeatIntervals[ buttonKeyName ] ) {\n\t\t\t\tif ( repeatIntervals[ buttonKeyName ].initialTimeout ) {\n\t\t\t\t\tclearTimeout( repeatIntervals[ buttonKeyName ].initialTimeout );\n\t\t\t\t}\n\t\t\t\tif ( repeatIntervals[ buttonKeyName ].interval ) {\n\t\t\t\t\tclearInterval( repeatIntervals[ buttonKeyName ].interval );\n\t\t\t\t}\n\t\t\t\tdelete repeatIntervals[ buttonKeyName ];\n\t\t\t}\n\n\t\t\tbeep8.Input.onKeyUp( evt );\n\n\t\t}\n\n\t\tevt.preventDefault();\n\n\t}\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Utilities = {};\n\n\n\t/**\n\t * Shows a fatal error and throws an exception.\n\t *\n\t * @param {string} error - The error to show.\n\t * @throws {Error} The error message.\n\t * @returns {void}\n\t */\n\tbeep8.Utilities.fatal = function( error ) {\n\n\t\tbeep8.Utilities.error( \"Fatal error: \" + error );\n\n\t\ttry {\n\t\t\tbeep8.Core.handleCrash( error );\n\t\t} catch ( e ) {\n\t\t\tbeep8.Utilities.error( \"Error in beep8.Core.handleCrash: \" + e + \" while handling error \" + error );\n\t\t}\n\n\t\tthrow new Error( error );\n\n\t}\n\n\n\t/**\n\t * Asserts that the given condition is true, else shows a fatal error.\n\t *\n\t * @param {boolean} cond - The condition that you fervently hope will be true.\n\t * @param {string} msg - The error message to show if the condition is false.\n\t * @returns {boolean} The 'cond' parameter.\n\t */\n\tbeep8.Utilities.assert = function( cond, msg ) {\n\n\t\tif ( !cond ) {\n\t\t\tbeep8.Utilities.fatal( msg || \"Assertion Failed\" );\n\t\t}\n\n\t\treturn cond;\n\n\t}\n\n\n\t/**\n\t * Same as beep8.Utilities.assert() but only asserts if beep8.CONFIG.DEBUG is true.\n\t *\n\t * @param {boolean} cond - The condition that you fervently hope will be true.\n\t * @param {string} msg - The error message to show if the condition is false.\n\t * @returns {boolean} The 'cond' parameter.\n\t */\n\tbeep8.Utilities.assertDebug = function( cond, msg ) {\n\n\t\tif ( !cond ) {\n\n\t\t\tif ( beep8.CONFIG.DEBUG ) {\n\t\t\t\twarn( \"DEBUG ASSERT failed: \" + msg );\n\t\t\t} else {\n\t\t\t\tbeep8.Utilities.fatal( msg );\n\t\t\t}\n\n\t\t}\n\n\t\treturn cond;\n\n\t}\n\n\n\t/**\n\t * Asserts that two values are equal.\n\t *\n\t * @param {any} expected - What you expect the value to be.\n\t * @param {any} actual - What the value actually is.\n\t * @param {string} what - A description of what the value is.\n\t * @returns {any} The 'actual' parameter.\n\t */\n\tbeep8.Utilities.assertEquals = function( expected, actual, what ) {\n\n\t\tif ( expected !== actual ) {\n\t\t\tbeep8.Utilities.fatal( `${what}: expected ${expected} but got ${actual}` );\n\t\t}\n\n\t\treturn actual;\n\n\t}\n\n\n\t/**\n\t * Checks the type of a variable and throws an exception if it's incorrect.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @param {string} varType - The expected type of the variable.\n\t * @returns {any} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkType = function( varName, varValue, varType ) {\n\n\t\tbeep8.Utilities.assert( varName, \"checkType: varName must be provided.\" );\n\t\tbeep8.Utilities.assert( varType, \"checkType: varType must be provided.\" );\n\t\tbeep8.Utilities.assert(\n\t\t\ttypeof ( varValue ) === varType,\n\t\t\t`${varName} should be of type ${varType} but was ${typeof ( varValue )}: ${varValue}`\n\t\t);\n\n\t\treturn varValue;\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is a number.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @param {number} [optMin=undefined] - The minimum acceptable value for the variable.\n\t * @param {number} [optMax=undefined] - The maximum acceptable value for the variable.\n\t * @returns {number} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkNumber = function( varName, varValue, optMin = undefined, optMax = undefined ) {\n\n\t\tbeep8.Utilities.checkType( varName, varValue, \"number\" );\n\n\t\tif ( isNaN( varValue ) ) {\n\t\t\tbeep8.Utilities.fatal( `${varName} should be a number but is NaN` );\n\t\t}\n\n\t\tif ( !isFinite( varValue ) ) {\n\t\t\tbeep8.Utilities.fatal( `${varName} should be a number but is infinite: ${varValue}` );\n\t\t}\n\n\t\tif ( optMin !== undefined ) {\n\t\t\tbeep8.Utilities.assert( varValue >= optMin, `${varName} should be >= ${optMin} but is ${varValue}` );\n\t\t}\n\n\t\tif ( optMax !== undefined ) {\n\t\t\tbeep8.Utilities.assert( varValue <= optMax, `${varName} should be <= ${optMax} but is ${varValue}` );\n\t\t}\n\n\t\treturn varValue;\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is an integer.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {number} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkInt = function( varName, varValue, optMin, optMax ) {\n\n\t\tbeep8.Utilities.checkNumber( varName, varValue, optMin, optMax );\n\n\t\tif ( varValue !== Math.round( varValue ) ) {\n\t\t\tbeep8.Utilities.fatal( `${varName} should be an integer but is ${varValue}` );\n\t\t}\n\n\t\treturn varValue;\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is a string.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {string} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkString = function( varName, varValue ) {\n\n\t\treturn beep8.Utilities.checkType( varName, varValue, \"string\" );\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is a boolean.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {boolean} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkBoolean = function( varName, varValue ) {\n\n\t\treturn beep8.Utilities.checkType( varName, varValue, \"boolean\" );\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is a function.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {Function} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkFunction = function( varName, varValue ) {\n\n\t\tif ( varValue === null ) {\n\t\t\tbeep8.Utilities.fatal( `${varName} should be a function, but was null` );\n\t\t}\n\n\t\treturn beep8.Utilities.checkType( varName, varValue, \"function\" );\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is an object.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {Object} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkObject = function( varName, varValue ) {\n\n\t\tif ( varValue === null ) {\n\t\t\tbeep8.Utilities.fatal( `${varName} should be an object, but was null` );\n\t\t}\n\n\t\treturn beep8.Utilities.checkType( varName, varValue, \"object\" );\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is an instance of a given class.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @param {Function} expectedClass - The expected class.\n\t * @returns {any} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkInstanceOf = function( varName, varValue, expectedClass ) {\n\n\t\tbeep8.Utilities.assert(\n\t\t\tvarValue instanceof expectedClass,\n\t\t\t`${varName} should be an instance of ${expectedClass.name} but was not, it's: ${varValue}`\n\t\t);\n\n\t\treturn varValue;\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is set (not undefined or null).\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {any} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkIsSet = function( varName, varValue ) {\n\n\t\tbeep8.Utilities.assert(\n\t\t\tvarValue !== undefined && varValue !== null,\n\t\t\t`${varName} should be set but was: ${varValue}`\n\t\t);\n\n\t\treturn varValue;\n\n\t}\n\n\n\t/**\n\t * Checks that a variable is an array.\n\t *\n\t * @param {string} varName - The name of the variable.\n\t * @param {any} varValue - The value of the variable.\n\t * @returns {Array} The 'varValue' parameter.\n\t */\n\tbeep8.Utilities.checkArray = function( varName, varValue ) {\n\n\t\tbeep8.Utilities.assert( Array.isArray( varValue ), `${varName} should be an array, but was: ${varValue}` );\n\n\t\treturn varValue;\n\n\t}\n\n\t/**\n\t * Prints a log to the console if beep8.CONFIG.DEBUG is true.\n\t *\n\t * @param {string} msg - The message to print.\n\t * @returns {void}\n\t */\n\tbeep8.Utilities.log = function( msg ) {\n\n\t\tif ( beep8.CONFIG.DEBUG ) {\n\t\t\tconsole.log( msg );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Prints a warning to the console.\n\t *\n\t * @param {string} msg - The message to print.\n\t * @returns {void}\n\t */\n\tbeep8.Utilities.warn = function( msg ) {\n\n\t\tconsole.warn( msg );\n\n\t}\n\n\n\t/**\n\t * Prints an error to the console.\n\t *\n\t * @param {string} msg - The message to print.\n\t * @returns {void}\n\t */\n\tbeep8.Utilities.error = function( msg ) {\n\n\t\tconsole.error( msg );\n\n\t}\n\n\n\t/**\n\t * Loads an image asynchronously.\n\t *\n\t * @param {string} src - The source URL of the image.\n\t * @returns {Promise<HTMLImageElement>} A promise that resolves to the loaded image.\n\t */\n\tbeep8.Utilities.loadImageAsync = async function( src ) {\n\n\t\treturn new Promise(\n\t\t\t( resolver ) => {\n\t\t\t\tconst img = new Image();\n\t\t\t\timg.src = src;\n\t\t\t\timg.onload = () => resolver( img );\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Makes a color transparent in an image.\n\t *\n\t * This function is asynchronous because it uses an HTMLImageElement.\n\t *\n\t * Uses a range because I found that occassionally the RGB values of a saved\n\t * png are not exactly as they were set in the image. Possibly due to\n\t * compression.\n\t *\n\t * @param {HTMLImageElement} img - The image to process.\n\t * @param {array} color - The color to make transparent. By default this is pure magenta [255,0,255].\n\t * @param {number} range - The range of RGB values to consider as the target color.\n\t * @returns The processed image.\n\t */\n\tbeep8.Utilities.makeColorTransparent = async function( img, color = [ 255, 0, 255 ], range = 5 ) {\n\n\t\t// Create a canvas the same size as the image and draw the image on it.\n\t\tconst canvas = document.createElement( \"canvas\" );\n\t\tconst ctx = canvas.getContext( \"2d\" );\n\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\n\t\tctx.drawImage( img, 0, 0 );\n\n\t\t// Get the image data.\n\t\tconst imageData = ctx.getImageData( 0, 0, canvas.width, canvas.height );\n\t\tconst data = imageData.data;\n\n\t\t// Loop through the image data and set the alpha channel to 0 for the specified color.\n\t\tfor ( let i = 0; i < data.length; i += 4 ) {\n\n\t\t\tconst r = data[ i ];\n\t\t\tconst g = data[ i + 1 ];\n\t\t\tconst b = data[ i + 2 ];\n\n\t\t\t// Check if the pixel's RGB values are within the range of the target color\n\t\t\tif (\n\t\t\t\tMath.abs( r - color[ 0 ] ) <= range &&\n\t\t\t\tMath.abs( g - color[ 1 ] ) <= range &&\n\t\t\t\tMath.abs( b - color[ 2 ] ) <= range\n\t\t\t) {\n\t\t\t\tdata[ i + 3 ] = 0; // Set alpha to 0 (fully transparent)\n\t\t\t}\n\n\t\t}\n\n\t\t// Put the modified image data back on the canvas.\n\t\tctx.putImageData( imageData, 0, 0 );\n\n\t\treturn canvas;\n\n\t}\n\n\n\t/**\n\t * Loads a file asynchronously.\n\t *\n\t * @param {string} url - The URL of the file.\n\t * @returns {Promise<string>} A promise that resolves to the file content.\n\t */\n\tbeep8.Utilities.loadFileAsync = function( url ) {\n\n\t\treturn new Promise(\n\t\t\t( resolve, reject ) => {\n\n\t\t\t\tconst xhr = new XMLHttpRequest();\n\n\t\t\t\txhr.addEventListener(\n\t\t\t\t\t\"load\",\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif ( xhr.status < 200 || xhr.status > 299 ) {\n\t\t\t\t\t\t\treject( \"HTTP request finished with status \" + xhr.status );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve( xhr.responseText );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\txhr.addEventListener( \"error\", e => reject( e ) );\n\t\t\t\txhr.open( \"GET\", url );\n\t\t\t\txhr.send();\n\n\t\t\t}\n\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Clamps a number, ensuring it's between a minimum and a maximum.\n\t *\n\t * @param {number} x - The number to clamp.\n\t * @param {number} lo - The minimum value.\n\t * @param {number} hi - The maximum value.\n\t * @returns {number} The clamped number.\n\t */\n\tbeep8.Utilities.clamp = function( x, lo, hi ) {\n\n\t\treturn Math.min( Math.max( x, lo ), hi );\n\n\t}\n\n\n\t/**\n\t * Converts a hex color string to an RGB object.\n\t *\n\t * @param {string} hex - The hex color string (e.g., \"#ff0000\").\n\t * @returns {object} An object with r, g, b properties.\n\t */\n\tbeep8.Utilities.hexToRgb = function( hex ) {\n\n\t\t// Remove the \"#\" if present\n\t\thex = hex.replace( \"#\", \"\" );\n\n\t\t// Parse the RGB values\n\t\tconst bigint = parseInt( hex, 16 );\n\n\t\treturn {\n\t\t\tr: ( bigint >> 16 ) & 255, // Extract red\n\t\t\tg: ( bigint >> 8 ) & 255,  // Extract green\n\t\t\tb: bigint & 255          // Extract blue\n\t\t};\n\n\t}\n\n\n\t/**\n\t * Calculates the intersection between two integer number intervals.\n\t *\n\t * Given 2 ranges it will see if these ranges overlap and if they do it will\n\t * optionally return the intersection range.\n\t *\n\t * For example if the first interval is [1, 5] and the second interval is [3, 7]\n\t * the intersection is [3, 5].\n\t *\n\t * @param {number} as - The start of the first interval.\n\t * @param {number} ae - The end of the first interval.\n\t * @param {number} bs - The start of the second interval.\n\t * @param {number} be - The end of the second interval.\n\t * @param {Object} [result=null] - If provided, used to return the intersection.\n\t * @returns {boolean} True if there is an intersection, false otherwise.\n\t */\n\tbeep8.Utilities.intersectIntervals = function( as, ae, bs, be, result = null ) {\n\n\t\tbeep8.Utilities.checkNumber( \"as\", as );\n\t\tbeep8.Utilities.checkNumber( \"ae\", ae );\n\t\tbeep8.Utilities.checkNumber( \"bs\", bs );\n\t\tbeep8.Utilities.checkNumber( \"be\", be );\n\n\t\tif ( result ) {\n\t\t\tbeep8.Utilities.checkObject( \"result\", result );\n\t\t}\n\n\t\tconst start = Math.max( as, bs );\n\t\tconst end = Math.min( ae, be );\n\n\t\tif ( end >= start ) {\n\t\t\tif ( result ) {\n\t\t\t\tresult.start = start;\n\t\t\t\tresult.end = end;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\n\t/**\n\t * Calculates the intersection of two rectangles.\n\t *\n\t * @param {Object} r1 - The first rectangle.\n\t * @param {Object} r2 - The second rectangle.\n\t * @param {number} [dx1=0] - The delta X to add to the first rectangle.\n\t * @param {number} [dy1=0] - The delta Y to add to the first rectangle.\n\t * @param {number} [dx2=0] - The delta X to add to the second rectangle.\n\t * @param {number} [dy2=0] - The delta Y to add to the second rectangle.\n\t * @param {Object} [result=null] - If provided, used to return the intersection.\n\t * @returns {boolean} True if there is a non-empty intersection, false otherwise.\n\t */\n\tbeep8.Utilities.intersectRects = function( r1, r2, dx1 = 0, dy1 = 0, dx2 = 0, dy2 = 0, result = null ) {\n\n\t\tbeep8.Utilities.checkObject( \"r1\", r1 );\n\t\tbeep8.Utilities.checkObject( \"r2\", r2 );\n\t\tbeep8.Utilities.checkNumber( \"r1.x\", r1.x );\n\t\tbeep8.Utilities.checkNumber( \"r1.y\", r1.y );\n\t\tbeep8.Utilities.checkNumber( \"r1.w\", r1.w );\n\t\tbeep8.Utilities.checkNumber( \"r1.h\", r1.h );\n\t\tbeep8.Utilities.checkNumber( \"r2.x\", r2.x );\n\t\tbeep8.Utilities.checkNumber( \"r2.y\", r2.y );\n\t\tbeep8.Utilities.checkNumber( \"r2.w\", r2.w );\n\t\tbeep8.Utilities.checkNumber( \"r2.h\", r2.h );\n\t\tbeep8.Utilities.checkNumber( \"dx1\", dx1 );\n\t\tbeep8.Utilities.checkNumber( \"dx2\", dx2 );\n\t\tbeep8.Utilities.checkNumber( \"dy1\", dy1 );\n\t\tbeep8.Utilities.checkNumber( \"dy2\", dy2 );\n\n\t\tif ( result ) {\n\t\t\tcheckObject( \"result\", result );\n\t\t}\n\n\t\tconst xint = intersectRects_xint;\n\t\tconst yint = intersectRects_yint;\n\n\t\tif (\n\t\t\t!beep8.Utilities.intersectIntervals(\n\t\t\t\tr1.x + dx1,\n\t\t\t\tr1.x + dx1 + r1.w - 1,\n\t\t\t\tr2.x + dx2,\n\t\t\t\tr2.x + dx2 + r2.w - 1, xint\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!beep8.Utilities.intersectIntervals(\n\t\t\t\tr1.y + dy1,\n\t\t\t\tr1.y + dy1 + r1.h - 1,\n\t\t\t\tr2.y + dy2,\n\t\t\t\tr2.y + dy2 + r2.h - 1, yint\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( result ) {\n\t\t\tresult.x = xint.start;\n\t\t\tresult.w = xint.end - xint.start + 1;\n\t\t\tresult.y = yint.start;\n\t\t\tresult.h = yint.end - yint.start + 1;\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tconst intersectRects_xint = {};\n\tconst intersectRects_yint = {};\n\n\n\t/**\n\t * Converts a string to a pretty URL-friendly format.\n\t *\n\t * @param {string} str - The string to convert.\n\t * @returns {string} The pretty string.\n\t */\n\tbeep8.Utilities.makeUrlPretty = function( uglyStr ) {\n\n\t\tbeep8.Utilities.checkString( \"uglyStr\", uglyStr );\n\n\t\tlet str = uglyStr;\n\n\t\t// Convert to lowercase\n\t\tstr = str.toLowerCase();\n\n\t\t// Replace spaces and slashes with hyphens\n\t\tstr = str.replace( /[\\s/]+/g, '-' );\n\n\t\t// Remove all non-url-safe characters except hyphens\n\t\tstr = str.replace( /[^a-z0-9\\-]+/g, '' );\n\n\t\t// Remove multiple consecutive hyphens\n\t\tstr = str.replace( /-+/g, '-' );\n\n\t\t// Trim hyphens from start and end\n\t\tstr = str.replace( /^-+|-+$/g, '' );\n\n\t\treturn str;\n\n\t}\n\n\n\t/**\n\t * Performs a deep merge of objects and returns new object. Does not modify\n\t * objects (immutable) and merges arrays via concatenation.\n\t *\n\t * @param {...object} objects - Objects to merge\n\t * @returns {object} New object with merged key/values\n\t */\n\tbeep8.Utilities.deepMerge = function( ...objects ) {\n\n\t\tconst isObject = obj => obj && typeof obj === 'object';\n\n\t\treturn objects.reduce(\n\t\t\t( prev, obj ) => {\n\t\t\t\tObject.keys( obj ).forEach(\n\t\t\t\t\t( key ) => {\n\n\t\t\t\t\t\tconst existingValue = prev[ key ];\n\t\t\t\t\t\tconst newValue = obj[ key ];\n\n\t\t\t\t\t\tif ( Array.isArray( existingValue ) && Array.isArray( newValue ) ) {\n\t\t\t\t\t\t\tprev[ key ] = existingValue.concat( ...newValue );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( isObject( existingValue ) && isObject( newValue ) ) {\n\t\t\t\t\t\t\tprev[ key ] = beep8.Utilities.deepMerge( existingValue, newValue );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tprev[ key ] = newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\treturn prev;\n\t\t\t},\n\t\t\t{}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Deep merge objects and returns new object. Does not modify objects.\n\t * Merges arrays by index.\n\t *\n\t * @param {...object} objects - Objects to merge\n\t * @returns {object} New object with merged key/values\n\t */\n\tbeep8.Utilities.deepMergeByIndex = function( ...objects ) {\n\n\t\tconst isObject = obj => obj && typeof obj === 'object';\n\n\t\treturn objects.reduce(\n\t\t\t( prev, obj ) => {\n\t\t\t\tObject.keys( obj ).forEach(\n\t\t\t\t\t( key ) => {\n\n\t\t\t\t\t\tconst existingValue = prev[ key ];\n\t\t\t\t\t\tconst newValue = obj[ key ];\n\n\t\t\t\t\t\tif ( Array.isArray( existingValue ) && Array.isArray( newValue ) ) {\n\t\t\t\t\t\t\tprev[ key ] = mergeArraysByIndex( existingValue, newValue );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( isObject( existingValue ) && isObject( newValue ) ) {\n\t\t\t\t\t\t\tprev[ key ] = beep8.Utilities.deepMergeByIndex( existingValue, newValue );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tprev[ key ] = newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn prev;\n\t\t\t},\n\t\t\t{}\n\t\t);\n\t};\n\n\n\t/**\n\t * Pads a number with leading zeros to the specified length.\n\t *\n\t * Does not support negative numbers.\n\t *\n\t * @param {number} number - The number to pad.\n\t * @param {number} length - The desired length of the output string.\n\t * @returns {string} - The padded number as a string.\n\t */\n\tbeep8.Utilities.padWithZeros = function( number, length ) {\n\n\t\tbeep8.Utilities.checkNumber( \"number\", number );\n\t\tbeep8.Utilities.checkInt( \"length\", length );\n\n\t\tif ( number < 0 ) {\n\t\t\tbeep8.Utilities.fatal( \"padWithZeros does not support negative numbers\" );\n\t\t}\n\n\t\treturn number.toString().padStart( length, '0' );\n\n\t}\n\n\n\t/**\n\t * Generate a new custom event.\n\t *\n\t * @param {string} eventName - The name of the event.\n\t * @param {Object} [detail={}] - The event detail.\n\t * @param {EventTarget} [target=document] - The target of the event.\n\t * @returns {void}\n\t */\n\tbeep8.Utilities.event = function( eventName, detail = {}, target = document ) {\n\n\t\tbeep8.Utilities.checkString( \"eventName\", eventName );\n\t\tbeep8.Utilities.checkObject( \"detail\", detail );\n\t\tbeep8.Utilities.checkObject( \"target\", target );\n\n\t\t// Prefix event name with beep8.\n\t\teventName = `beep8.${eventName}`;\n\n\t\t// Create a custom event.\n\t\tconst event = new CustomEvent( eventName, { detail } );\n\n\t\t// Dispatch the event.\n\t\ttarget.dispatchEvent( event );\n\n\t};\n\n\n\t/**\n\t * Utility function to repeat an array a specified number of times.\n\t *\n\t * @param {Array} array - The array to repeat.\n\t * @param {number} times - The number of times to repeat the array.\n\t * @returns {Array} The repeated array.\n\t */\n\tbeep8.Utilities.repeatArray = function( array, times ) {\n\n\t\tbeep8.Utilities.checkArray( \"array\", array );\n\t\tbeep8.Utilities.checkInt( \"times\", times, 0 );\n\n\t\treturn Array( times ).fill().flatMap( () => array );\n\n\t};\n\n\n\t/**\n\t * Downloads a file.\n\t *\n\t * @param {string} filename - The name of the file.\n\t * @param {string} src - The source URL of the file.\n\t * @returns {void}\n\t */\n\tbeep8.Utilities.downloadFile = function( filename = '', src = '' ) {\n\n\t\tbeep8.Utilities.checkString( \"filename\", filename );\n\t\tbeep8.Utilities.checkString( \"src\", src );\n\n\t\t// Create a link element to use to download the image.\n\t\tconst element = document.createElement( 'a' );\n\t\telement.setAttribute( 'href', src );\n\t\telement.setAttribute( 'download', filename );\n\n\t\t// Append the element to the body.\n\t\tdocument.body.appendChild( element );\n\n\t\t// Click the link to download.\n\t\telement.click();\n\n\t\t// Tidy up.\n\t\tdocument.body.removeChild( element );\n\n\t};\n\n\n\t/**\n\t * Encodes data using CBOR and Base64.\n\t *\n\t * @param {any} data - The data to encode.\n\t * @returns {string} The encoded data as a Base64 string.\n\t */\n\tbeep8.Utilities.encodeData = function( data ) {\n\n\t\tconst cborString = CBOR.encode( data );\n\t\tconst encodedString = btoa( String.fromCharCode.apply( null, new Uint8Array( cborString ) ) );\n\t\treturn encodedString;\n\n\t};\n\n\n\t/**\n\t * Decodes data from a Base64 string using CBOR.\n\t *\n\t * @param {string} data - The Base64 encoded data.\n\t * @returns {any} The decoded data.\n\t */\n\tbeep8.Utilities.decodeData = function( data ) {\n\n\t\t// Step 1: Decode the Base64 string back to a binary string\n\t\tconst binaryString = atob( data );\n\n\t\t// Step 2: Convert the binary string to a Uint8Array\n\t\tconst byteArray = new Uint8Array( binaryString.length );\n\t\tfor ( let i = 0; i < binaryString.length; i++ ) {\n\t\t\tbyteArray[ i ] = binaryString.charCodeAt( i );\n\t\t}\n\n\t\t// Step 3: Convert the Uint8Array to an ArrayBuffer\n\t\tconst arrayBuffer = byteArray.buffer;\n\n\t\t// Step 4: Use CBOR.decode to convert the byte array back to the original data structure\n\t\treturn CBOR.decode( arrayBuffer );\n\n\t};\n\n\n\t/**\n\t * Merges two arrays by index, filling in missing indices with values from\n\t * the default array.\n\t *\n\t * @param {Array} targetArr - The target array to merge into.\n\t * @param {Array} defaultArr - The default array to merge from.\n\t * @returns {Array} The merged array.\n\t */\n\tfunction mergeArraysByIndex( Arr1, Arr2 ) {\n\n\t\tfor ( let i = 0; i < Arr2.length; i++ ) {\n\t\t\tArr1[ i ] = Arr2[ i ];\n\t\t}\n\n\t\treturn Arr1;\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * A collection of functions for working with tilemaps.\n\t * The tilemaps are created with the beep8 Tilemap Editor.\n\t *\n\t * The tilemap format is a multi-dimensional array of arrays.\n\t * The tile array is in the format:\n\t * [0] = tile character code.\n\t * [1] = foreground color code.\n\t * [2] = background color code.\n\t * [3] = collision flag.\n\t * [4] = additional data.\n\t */\n\tbeep8.Tilemap = {};\n\n\tbeep8.Tilemap.MAP_CHAR = 0;\n\tbeep8.Tilemap.MAP_FG = 1;\n\tbeep8.Tilemap.MAP_BG = 2;\n\tbeep8.Tilemap.MAP_COLLISION = 3;\n\tbeep8.Tilemap.MAP_DATA = 4;\n\n\n\t// Define a mapping from bitmask value to your desired tile name or index.\n\tconst wallTiles = {\n\t\t'solid': {\n\t\t\t0: 1,  // wall_isolated.\n\t\t\t1: 1,  // wall_end_bottom.\n\t\t\t2: 1,  // wall_end_left.\n\t\t\t3: 36,  // wall_corner_bottomLeft.\n\t\t\t4: 1,  // wall_end_top.\n\t\t\t5: 1,  // wall_vertical.\n\t\t\t6: 18,  // wall_corner_topLeft.\n\t\t\t7: 1,  // wall_t_right.\n\t\t\t8: 1,  // wall_end_right.\n\t\t\t9: 37,  // wall_corner_bottomRight.\n\t\t\t10: 1, // wall_horizontal.\n\t\t\t11: 1, // wall_t_bottom.\n\t\t\t12: 19, // wall_corner_topRight.\n\t\t\t13: 1, // wall_t_left.\n\t\t\t14: 1, // wall_t_top.\n\t\t\t15: 1  // wall_cross.\n\t\t},\n\t\t'rounded': {\n\t\t\t0: 1,  // wall_isolated.\n\t\t\t1: 42,  // wall_end_bottom.\n\t\t\t2: 23,  // wall_end_left.\n\t\t\t3: 36,  // wall_corner_bottomLeft.\n\t\t\t4: 41,  // wall_end_top.\n\t\t\t5: 1,  // wall_vertical.\n\t\t\t6: 18,  // wall_corner_topLeft.\n\t\t\t7: 1,  // wall_t_right.\n\t\t\t8: 24,  // wall_end_right.\n\t\t\t9: 37,  // wall_corner_bottomRight.\n\t\t\t10: 1, // wall_horizontal.\n\t\t\t11: 1, // wall_t_bottom.\n\t\t\t12: 19, // wall_corner_topRight.\n\t\t\t13: 1, // wall_t_left.\n\t\t\t14: 1, // wall_t_top.\n\t\t\t15: 1  // wall_cross.\n\t\t},\n\t\t'half': {\n\t\t\t0: 128,  // wall_isolated.\n\t\t\t1: 75,  // wall_end_bottom.\n\t\t\t2: 58,  // wall_end_left.\n\t\t\t3: 93,  // wall_corner_bottomLeft.\n\t\t\t4: 75,  // wall_end_top.\n\t\t\t5: 75,  // wall_vertical.\n\t\t\t6: 57,  // wall_corner_topLeft.\n\t\t\t7: 129,  // wall_t_right.\n\t\t\t8: 58,  // wall_end_right.\n\t\t\t9: 95,  // wall_corner_bottomRight.\n\t\t\t10: 58, // wall_horizontal.\n\t\t\t11: 111, // wall_t_bottom.\n\t\t\t12: 59, // wall_corner_topRight.\n\t\t\t13: 130, // wall_t_left.\n\t\t\t14: 112, // wall_t_top.\n\t\t\t15: 113  // wall_cross.\n\t\t},\n\t\t'half_rounded': {\n\t\t\t0: 128,  // wall_isolated.\n\t\t\t1: 148,  // wall_end_bottom.\n\t\t\t2: 166,  // wall_end_left.\n\t\t\t3: 93,  // wall_corner_bottomLeft.\n\t\t\t4: 149,  // wall_end_top.\n\t\t\t5: 75,  // wall_vertical.\n\t\t\t6: 57,  // wall_corner_topLeft.\n\t\t\t7: 129,  // wall_t_right.\n\t\t\t8: 167,  // wall_end_right.\n\t\t\t9: 95,  // wall_corner_bottomRight.\n\t\t\t10: 58, // wall_horizontal.\n\t\t\t11: 111, // wall_t_bottom.\n\t\t\t12: 59, // wall_corner_topRight.\n\t\t\t13: 130, // wall_t_left.\n\t\t\t14: 112, // wall_t_top.\n\t\t\t15: 113  // wall_cross.\n\t\t},\n\t\t'pipe': {\n\t\t\t0: 128,  // wall_isolated.\n\t\t\t1: 148,  // wall_end_bottom.\n\t\t\t2: 166,  // wall_end_left.\n\t\t\t3: 93,  // wall_corner_bottomLeft.\n\t\t\t4: 149,  // wall_end_top.\n\t\t\t5: [ 75, 77 ],  // wall_vertical.\n\t\t\t6: 57,  // wall_corner_topLeft.\n\t\t\t7: 129,  // wall_t_right.\n\t\t\t8: 167,  // wall_end_right.\n\t\t\t9: 95,  // wall_corner_bottomRight.\n\t\t\t10: [ 58, 94 ], // wall_horizontal.\n\t\t\t11: 111, // wall_t_bottom.\n\t\t\t12: 59, // wall_corner_topRight.\n\t\t\t13: 130, // wall_t_left.\n\t\t\t14: 112, // wall_t_top.\n\t\t\t15: [ 113, 131, 76 ]  // wall_cross.\n\t\t},\n\t\t'thin': {\n\t\t\t0: 110,  // wall_isolated.\n\t\t\t1: 173,  // wall_end_bottom.\n\t\t\t2: 172,  // wall_end_left.\n\t\t\t3: 164,  // wall_corner_bottomLeft.\n\t\t\t4: 154,  // wall_end_top.\n\t\t\t5: 72,  // wall_vertical.\n\t\t\t6: 146,  // wall_corner_topLeft.\n\t\t\t7: 126,  // wall_t_right.\n\t\t\t8: 155,  // wall_end_right.\n\t\t\t9: 165,  // wall_corner_bottomRight.\n\t\t\t10: 55, // wall_horizontal.\n\t\t\t11: 108, // wall_t_bottom.\n\t\t\t12: 147, // wall_corner_topRight.\n\t\t\t13: 127, // wall_t_left.\n\t\t\t14: 109, // wall_t_top.\n\t\t\t15: 73  // wall_cross.\n\t\t},\n\t};\n\n\n\t/**\n\t * Convert a tilemap array to a string.\n\t *\n\t * This string can be loaded with beep8.Tilemap.load.\n\t *\n\t * @param {Array} tilemap - The tilemap array to save.\n\t * @returns {string} The encoded string\n\t */\n\tbeep8.Tilemap.save = function( tilemap ) {\n\n\t\tbeep8.Utilities.checkArray( \"tilemap\", tilemap );\n\n\t\treturn beep8.Utilities.encodeData( tilemap );\n\n\t}\n\n\n\t/**\n\t * Load a tilemap array from a string.\n\t *\n\t * @param {string} data The encoded string\n\t * @returns {Array} The tilemap array\n\t */\n\tbeep8.Tilemap.load = function( data ) {\n\n\t\tbeep8.Utilities.checkString( \"data\", data );\n\n\t\treturn beep8.Utilities.decodeData( data );\n\n\t}\n\n\n\t/**\n\t * Draw a tilemap array to the screen.\n\t *\n\t * @param {Array} tilemap The tilemap array to draw.\n\t * @param {number} [tileX=0] The x-coordinate of the tile to start drawing from.\n\t * @param {number} [tileY=0] The y-coordinate of the tile to start drawing from.\n\t * @param {number} [width=null] The width of the tilemap to draw.\n\t * @param {number} [height=null] The height of the tilemap to draw.\n\t * @returns {void}\n\t */\n\tbeep8.Tilemap.draw = function( tilemap, tileXOffset = 0, tileYOffset = 0, width = null, height = null ) {\n\n\t\tbeep8.Utilities.checkArray( \"tilemap\", tilemap );\n\n\t\tif ( !width ) {\n\t\t\twidth = tilemap[ 0 ].length;\n\t\t}\n\n\t\tif ( !height ) {\n\t\t\theight = tilemap.length;\n\t\t}\n\n\t\tbeep8.Utilities.checkInt( \"width\", width );\n\t\tbeep8.Utilities.checkInt( \"height\", height );\n\n\t\tconst startRow = beep8.Core.drawState.cursorRow;\n\t\tconst startCol = beep8.Core.drawState.cursorCol;\n\n\t\tfor ( let y = tileYOffset; y < tileYOffset + height; y++ ) {\n\n\t\t\t// Position the cursor at the start of the row.\n\t\t\tconst lx = 0 + startCol;\n\t\t\tconst ly = y - tileYOffset + startRow;\n\t\t\tbeep8.locate( lx, ly );\n\n\t\t\tfor ( let x = tileXOffset; x < tileXOffset + width; x++ ) {\n\n\t\t\t\tif ( !tilemap[ y ] || tilemap[ y ][ x ] == null ) continue;\n\n\t\t\t\tconst tile = tilemap[ y ][ x ];\n\t\t\t\tif ( tile && tile.length >= 3 ) {\n\n\t\t\t\t\tbeep8.color(\n\t\t\t\t\t\ttile[ beep8.Tilemap.MAP_FG ],\n\t\t\t\t\t\ttile[ beep8.Tilemap.MAP_BG ]\n\t\t\t\t\t);\n\n\t\t\t\t\tbeep8.printChar( tile[ beep8.Tilemap.MAP_CHAR ] );\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Create an empty tilemap array of the specified size.\n\t *\n\t * @param {number} width The width of the tilemap.\n\t * @param {number} height The height of the tilemap.\n\t * @returns {Array} The empty tilemap array.\n\t */\n\tbeep8.Tilemap.createEmptyTilemap = function( width, height ) {\n\n\t\tlet layout = [];\n\n\t\tfor ( let y = 0; y < height; y++ ) {\n\t\t\tlayout[ y ] = [];\n\t\t\tfor ( let x = 0; x < width; x++ ) {\n\n\t\t\t\tlayout[ y ][ x ] = beep8.Tilemap.getDefaultTile();\n\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\n\t};\n\n\n\t/**\n\t * Shift and wrap a tilemap array by the specified amount.\n\t *\n\t * @param {Array} tilemap The tilemap array to shift.\n\t * @param {number} dx The amount to shift the tilemap in the x direction.\n\t * @param {number} dy The amount to shift the tilemap in the y direction.\n\t * @returns {void}\n\t */\n\tbeep8.Tilemap.shift = function( tilemap, dx, dy ) {\n\n\t\tbeep8.Utilities.checkArray( \"tilemap\", tilemap );\n\t\tbeep8.Utilities.checkNumber( \"dx\", dx );\n\t\tbeep8.Utilities.checkNumber( \"dy\", dy );\n\n\t\tconst width = tilemap[ 0 ].length;\n\t\tconst height = tilemap.length;\n\n\t\tconst newTilemap = beep8.Tilemap.createEmptyTilemap( width, height );\n\n\t\tfor ( let y = 0; y < height; y++ ) {\n\t\t\tfor ( let x = 0; x < width; x++ ) {\n\n\t\t\t\tconst newX = ( x + dx + width ) % width;\n\t\t\t\tconst newY = ( y + dy + height ) % height;\n\t\t\t\tnewTilemap[ newY ][ newX ] = [ ...tilemap[ y ][ x ] ];\n\n\t\t\t}\n\t\t}\n\n\t\treturn newTilemap;\n\n\t};\n\n\n\t/**\n\t * Resize a tilemap array to the specified width and height.\n\t *\n\t * @param {Array} tilemap The tilemap array to resize.\n\t * @param {number} width The new width of the tilemap.\n\t * @param {number} height The new height of the tilemap.\n\t * @returns {Array} The resized tilemap array.\n\t */\n\tbeep8.Tilemap.resize = function( tilemap, width, height ) {\n\n\t\tbeep8.Utilities.checkArray( \"tilemap\", tilemap );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\n\t\tconst newTilemap = beep8.Tilemap.createEmptyTilemap( width, height );\n\n\t\tfor ( let y = 0; y < height; y++ ) {\n\t\t\tfor ( let x = 0; x < width; x++ ) {\n\t\t\t\tif ( tilemap[ y ] && tilemap[ y ][ x ] ) {\n\n\t\t\t\t\tnewTilemap[ y ][ x ] = [ ...tilemap[ y ][ x ] ];\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newTilemap;\n\n\t};\n\n\n\t/**\n\t * Get the default tile for a tilemap.\n\t *\n\t * @returns {Array} The default tile.\n\t */\n\tbeep8.Tilemap.getDefaultTile = function() {\n\n\t\treturn [\n\t\t\t0, // Tile\n\t\t\t15, // Fg\n\t\t\t0, // Bg\n\t\t\t0, // Collision\n\t\t\t{} // Data\n\t\t];\n\n\t};\n\n\n\t/**\n\t * Get a text map and convert it to an array of arrays.\n\t *\n\t * An example text map might look like:\n\t * #######\n\t * #  1  #\n\t * # ### #\n\t * # 2 2 #\n\t * #######\n\t *\n\t * The tilemap array will include the tile character code, foreground color,\n\t * background color, collision flag, and additional data.\n\t *\n\t * @param {string} mapText The text map to convert.\n\t * @returns {Array} The converted tilemap array.\n\t */\n\tbeep8.Tilemap.convertFromText = function( mapText ) {\n\n\t\tbeep8.Utilities.checkString( \"text\", mapText );\n\n\t\t// Don't trim the text as we want to preserve the whitespace.\n\t\t// These may be empty tiles.\n\t\tconst lines = mapText.split( '\\n' );\n\n\t\t// Remove any lines that are just whitespace.\n\t\tconst filteredLines = lines.filter( line => line.trim() !== '' );\n\t\tif ( filteredLines.length === 0 ) beep8.Utilities.fatal( \"No valid lines found in the map text.\" );\n\n\t\tconst map = filteredLines.map( row => row.split( '' ) );\n\n\t\treturn map;\n\n\t}\n\n\n\t/**\n\t * Check the validity of the encoded tilemap data.\n\t *\n\t * The checks are simple, but reduces liklihood of invalid data being used.\n\t *\n\t * @param {string} mapText The encoded tilemap data.\n\t * @returns {boolean} True if the tilemap is valid, false otherwise.\n\t */\n\tbeep8.Tilemap.validateTilemap = function( mapText ) {\n\n\t\tbeep8.Utilities.checkString( \"text\", mapText );\n\n\t\tconst map = beep8.Tilemap.load( mapText );\n\n\t\t// Check map is an array of arrays.\n\t\tif ( !Array.isArray( map ) || !Array.isArray( map[ 0 ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check 0, 0 is a valid tile (is an array and length is greater than 3).\n\t\tif ( !Array.isArray( map[ 0 ][ 0 ] ) || map[ 0 ][ 0 ].length <= 3 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\n\t/**\n\t * Create a tilemap from an array of arrays.\n\t * The tilePattern is an object that maps tile characters to tile properties.\n\t *\n\t * @param {Array} grid The grid array to create the tilemap from.\n\t * @param {Object} tilePattern The tile pattern object.\n\t * @returns {Array} The created tilemap array.\n\t */\n\tbeep8.Tilemap.createFromArray = function( grid, tilePattern, defaultTilePattern = null ) {\n\n\t\tbeep8.Utilities.checkArray( \"grid\", grid );\n\t\tbeep8.Utilities.checkObject( \"tilePattern\", tilePattern );\n\n\t\tif ( defaultTilePattern !== null ) {\n\t\t\tbeep8.Utilities.checkObject( \"defaultTilePattern\", defaultTilePattern );\n\t\t}\n\n\t\tif ( null === defaultTilePattern ) {\n\t\t\tdefaultTilePattern = beep8.Tilemap.getDefaultTile();\n\t\t}\n\n\t\tconst tilemap = [];\n\n\t\tfor ( let y = 0; y < grid.length; y++ ) {\n\t\t\ttilemap[ y ] = [];\n\t\t\tfor ( let x = 0; x < grid[ y ].length; x++ ) {\n\n\t\t\t\t// Set default properties.\n\t\t\t\ttilemap[ y ][ x ] = [ ...defaultTilePattern ];\n\n\t\t\t\t// If tile pattern not defined assume tile is empty and continue.\n\t\t\t\tif ( !tilePattern[ grid[ y ][ x ] ] ) {\n\t\t\t\t\t// beep8.Utilities.log( \"Tile pattern not found for: \" + grid[ y ][ x ] );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst tile = tilePattern[ grid[ y ][ x ] ];\n\n\t\t\t\t// Tile character code.\n\t\t\t\tlet tileId = tile.t;\n\n\t\t\t\t// If tileId is a string and begins with \"wall_\" then compute bitmask.\n\t\t\t\tif ( typeof tileId === \"string\" && tileId.startsWith( \"wall_\" ) ) {\n\t\t\t\t\ttileId = beep8.Tilemap.wallTile( x, y, grid, tileId );\n\t\t\t\t}\n\n\t\t\t\t// If is an array of ids then do a weighted pick from those.\n\t\t\t\tif ( Array.isArray( tileId ) ) {\n\t\t\t\t\ttileId = beep8.Random.pickWeighted( tileId );\n\t\t\t\t}\n\n\t\t\t\t// Foreground colour.\n\t\t\t\tlet fg = tile.fg || 15;\n\t\t\t\tif ( Array.isArray( fg ) ) {\n\t\t\t\t\tfg = beep8.Random.pickWeighted( fg );\n\t\t\t\t}\n\n\t\t\t\t// Background colour.\n\t\t\t\tlet bg = tile.bg || 0;\n\t\t\t\tif ( Array.isArray( bg ) ) {\n\t\t\t\t\tbg = beep8.Random.pickWeighted( bg );\n\t\t\t\t}\n\n\t\t\t\ttilemap[ y ][ x ] = [\n\t\t\t\t\ttileId,\n\t\t\t\t\tfg,\n\t\t\t\t\tbg,\n\t\t\t\t\ttile.coll || 0,\n\t\t\t\t\ttile.data || {},\n\t\t\t\t];\n\n\t\t\t}\n\t\t}\n\n\t\treturn tilemap;\n\n\t};\n\n\n\t/**\n\t * Select a wall tile from a predefined list based on the surrounding tiles.\n\t * The grid is the 2D array of tile ids.\n\t * The x and y are the coordinates of the tile to check.\n\t *\n\t * @param {number} x The x coordinate of the tile.\n\t * @param {number} y The y coordinate of the tile.\n\t * @param {Array} grid The 2D array of tile ids.\n\t * @param {string} name The name of the wall tile to select. Picked from the default lists of wall patterns.\n\t * @returns {number} The selected wall tile id.\n\t */\n\tbeep8.Tilemap.wallTile = function( col, row, grid, name = null ) {\n\n\t\tbeep8.Utilities.checkNumber( \"col\", col );\n\t\tbeep8.Utilities.checkNumber( \"row\", row );\n\t\tbeep8.Utilities.checkArray( \"grid\", grid );\n\t\tbeep8.Utilities.checkString( \"name\", name );\n\n\t\tif ( null === name ) {\n\t\t\tbeep8.Utilities.fatal( \"Wall tile name not given: \" + name );\n\t\t}\n\n\t\t// Remove wall_ prefix from name.\n\t\tconst tileType = name.substring( 5 );\n\n\t\tif ( !wallTiles[ tileType ] ) {\n\t\t\tbeep8.Utilities.fatal( \"Wall tile type not found: \" + tileType );\n\t\t}\n\n\t\tconst mask = computeBitmask( grid, col, row );\n\t\treturn wallTiles[ tileType ][ mask ];\n\n\t};\n\n\n\t// A helper function to compute a 4-bit bitmask for a wall tile.\n\t// Bit values: 1 = North, 2 = East, 4 = South, 8 = West.\n\tfunction computeBitmask( grid, col, row ) {\n\n\t\tlet bitmask = 0;\n\t\tconst tileId = grid[ row ][ col ];\n\n\t\t// Check North\n\t\tif ( row > 0 && grid[ row - 1 ][ col ] === tileId ) bitmask += 1;\n\t\t// Check East\n\t\tif ( col < grid[ row ].length - 1 && grid[ row ][ col + 1 ] === tileId ) bitmask += 2;\n\t\t// Check South\n\t\tif ( row < grid.length - 1 && grid[ row + 1 ][ col ] === tileId ) bitmask += 4;\n\t\t// Check West\n\t\tif ( col > 0 && grid[ row ][ col - 1 ] === tileId ) bitmask += 8;\n\n\t\treturn bitmask;\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.TextRenderer = {};\n\n\t/**\n\t * An array of character codes for each character in the chars string.\n\t * This is used to look up the index of a character in the chars string.\n\t *\n\t * @type {number[]}\n\t */\n\tconst charMap = [];\n\n\t// beep8.TextRendererFont for each font, keyed by font name. The default font is called \"default\".\n\tbeep8.TextRenderer.fonts_ = {};\n\n\t// Current font. This is never null after initialization. This is a reference\n\t// to a beep8.TextRendererFont object. For a font to be set as current, it must have a\n\t// character width and height that are INTEGER MULTIPLES of beep8.CONFIG.CHR_WIDTH and\n\t// beep8.CONFIG.CHR_HEIGHT, respectively, to ensure the row/column system continues to work.\n\tbeep8.TextRenderer.curFont_ = null;\n\n\t// Current tiles. This is a reference to a beep8.TextRendererFont object.\n\t// This is used for the tiles font.\n\tbeep8.TextRenderer.curTiles_ = null;\n\n\n\t/**\n\t * Prepares the charMap array.\n\t *\n\t * This is a list of character codes for each character in the chars string.\n\t * This is used to look up the index of a character in the chars string.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.prepareCharMap = function() {\n\n\t\tlet charString = [ ...beep8.CONFIG.CHRS ];\n\n\t\tfor ( let i = 0; i < charString.length; i++ ) {\n\t\t\tcharMap.push( charString[ i ].charCodeAt( 0 ) );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Initializes the beep8.TextRenderer with the default font.\n\t *\n\t * @returns {Promise<void>}\n\t */\n\tbeep8.TextRenderer.initAsync = async function() {\n\n\t\tbeep8.Utilities.log( \"beep8.TextRenderer init.\" );\n\n\t\t// Prepare the text font.\n\t\tbeep8.TextRenderer.curFont_ = await beep8.TextRenderer.loadFontAsync( \"default-thin\", beep8.CONFIG.FONT_DEFAULT, 0.5, 1 );\n\n\t\t// Prepare the tiles font.\n\t\tbeep8.TextRenderer.curTiles_ = await beep8.TextRenderer.loadFontAsync( \"tiles\", beep8.CONFIG.FONT_TILES );\n\n\t\t// Prepare the actors/ player characters.\n\t\tbeep8.TextRenderer.curActors_ = await beep8.TextRenderer.loadFontAsync( \"actors\", beep8.CONFIG.FONT_ACTORS );\n\n\t\t// Prepare the charMap array.\n\t\tbeep8.TextRenderer.prepareCharMap();\n\n\t}\n\n\n\t/**\n\t * Loads a new font asynchronously.\n\t *\n\t * @param {string} fontName - The name of the font.\n\t * @param {string} fontImageFile - The URL of the image file for the font.\n\t * @param {number} [tileSizeWidthMultiplier=1] - The tile size width multiplier for the font.\n\t * @param {number} [tileSizeHeightMultiplier=1] - The tile size height multiplier for the font.\n\t * @returns {Promise<void>}\n\t */\n\tbeep8.TextRenderer.loadFontAsync = async function( fontName, fontImageFile, tileSizeWidthMultiplier = 1, tileSizeHeightMultiplier = 1 ) {\n\n\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\tbeep8.Utilities.checkString( \"fontImageFile\", fontImageFile );\n\n\t\tconst font = new beep8.TextRendererFont( fontName, fontImageFile, tileSizeWidthMultiplier, tileSizeHeightMultiplier );\n\t\tawait font.initAsync();\n\n\t\tbeep8.TextRenderer.fonts_[ fontName ] = font;\n\n\t\treturn font;\n\n\t}\n\n\n\t/**\n\t * Sets the current font.\n\t *\n\t * @param {string} fontName - The name of the font to set.\n\t * @returns {void}\n\t * @throws {Error} If the font is not found or its dimensions are not compatible.\n\t */\n\tbeep8.TextRenderer.setFont = function( fontName ) {\n\n\t\tconst font = beep8.TextRenderer.getFontByName( fontName );\n\n\t\tif ( font ) {\n\t\t\tbeep8.TextRenderer.curFont_ = font;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Get the current font.\n\t *\n\t * @returns {beep8.TextRendererFont} The current font.\n\t */\n\tbeep8.TextRenderer.getFont = function() {\n\n\t\treturn beep8.TextRenderer.curFont_;\n\n\t}\n\n\n\t/**\n\t * Sets the current tiles font.\n\t *\n\t * @param {string} fontName - The name of the font to set.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.setTileFont = function( fontName ) {\n\n\t\tconst font = beep8.TextRenderer.getFontByName( fontName );\n\n\t\tif ( font ) {\n\t\t\tbeep8.TextRenderer.curTiles_ = font;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Gets a font by name.\n\t *\n\t * @param {string} fontName - The name of the font to get.\n\t * @returns {beep8.TextRendererFont} The font.\n\t */\n\tbeep8.TextRenderer.getFontByName = function( fontName ) {\n\n\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\tconst font = beep8.TextRenderer.fonts_[ fontName ];\n\n\t\tif ( !font ) {\n\t\t\tbeep8.Utilities.fatal( `setFont(): font not found: ${fontName}` );\n\t\t\treturn;\n\t\t}\n\n\t\treturn font;\n\n\t}\n\n\n\t/**\n\t * Prints text at the current cursor position.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use for printing.\n\t * @param {number} [maxWidth=-1] - The maximum width to wrap text at.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.print = function( text, font = null, maxWidth = -1 ) {\n\n\t\tbeep8.TextRenderer.printFont_ = font || beep8.TextRenderer.curFont_;\n\n\t\t// Property validation.\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"maxWidth\", maxWidth );\n\t\tif ( font !== null ) beep8.Utilities.checkObject( \"font\", font );\n\n\t\t// Wrap text to specified width.\n\t\ttext = beep8.TextRenderer.wrapText( text, maxWidth, font );\n\n\t\t// Store the start location.\n\t\tlet col = beep8.Core.drawState.cursorCol;\n\t\tlet row = beep8.Core.drawState.cursorRow;\n\n\t\t// Store a backup of foreground/background colors and fonts.\n\t\tbeep8.TextRenderer.origFgColor_ = beep8.Core.drawState.fgColor;\n\t\tbeep8.TextRenderer.origBgColor_ = beep8.Core.drawState.bgColor;\n\t\tbeep8.TextRenderer.origFont_ = beep8.TextRenderer.printFont_;\n\n\t\tconst colInc = beep8.TextRenderer.printFont_.getCharColCount();\n\t\tconst rowInc = beep8.TextRenderer.printFont_.getCharRowCount();\n\n\t\tconst initialCol = col;\n\n\t\tfor ( let i = 0; i < text.length; i++ ) {\n\n\t\t\ti = processEscapeSeq_( text, i );\n\t\t\tconst ch = text.charCodeAt( i );\n\n\t\t\t// New line character so set a new line and reset the column.\n\t\t\tif ( ch === 10 ) {\n\n\t\t\t\tcol = initialCol;\n\t\t\t\trow += rowInc;\n\n\t\t\t} else {\n\n\t\t\t\t// Get index for the character from charMap.\n\t\t\t\tconst chIndex = charMap.indexOf( ch );\n\n\t\t\t\tif ( chIndex >= 0 ) {\n\n\t\t\t\t\tput_(\n\t\t\t\t\t\tchIndex,\n\t\t\t\t\t\tcol, row,\n\t\t\t\t\t\tbeep8.Core.drawState.fgColor, beep8.Core.drawState.bgColor,\n\t\t\t\t\t\tbeep8.TextRenderer.printFont_\n\t\t\t\t\t);\n\t\t\t\t\tcol += colInc;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Reset properties.\n\t\tbeep8.Core.drawState.cursorCol = col;\n\t\tbeep8.Core.drawState.cursorRow = row;\n\t\tbeep8.Core.drawState.fgColor = beep8.TextRenderer.origFgColor_;\n\t\tbeep8.Core.drawState.bgColor = beep8.TextRenderer.origBgColor_;\n\n\t\tbeep8.Renderer.markDirty();\n\n\t}\n\n\n\t/**\n\t * Prints text character by character, as in a typewriter.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} [maxWidth=-1] - The width to wrap text at.\n\t * @param {number} [delay=0.05] - The delay between characters in seconds.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use.\n\t * @returns {Promise<void>} Resolves after the text is printed.\n\t */\n\tbeep8.TextRenderer.printTypewriter = async function( text, maxWidth = -1, delay = 0.05, font = null ) {\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"maxWidth\", maxWidth );\n\t\tbeep8.Utilities.checkNumber( \"delay\", delay );\n\n\t\tconst startCol = beep8.col();\n\t\tconst startRow = beep8.row();\n\n\t\ttext = beep8.TextRenderer.wrapText( text, maxWidth );\n\n\t\tfor ( let i = 0; i <= text.length; i++ ) {\n\n\t\t\t// If this is the start of an escape sequence, skip to the end of it.\n\t\t\tif (\n\t\t\t\tbeep8.CONFIG.PRINT_ESCAPE_START &&\n\t\t\t\ttext.substring( i, i + beep8.CONFIG.PRINT_ESCAPE_START.length ) === beep8.CONFIG.PRINT_ESCAPE_START\n\t\t\t) {\n\n\t\t\t\tconst endPos = text.indexOf( beep8.CONFIG.PRINT_ESCAPE_END, i + beep8.CONFIG.PRINT_ESCAPE_START.length );\n\n\t\t\t\tif ( endPos >= 0 ) {\n\t\t\t\t\ti = endPos + beep8.CONFIG.PRINT_ESCAPE_END.length;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst c = text.charCodeAt( i );\n\t\t\tbeep8.Core.setCursorLocation( startCol, startRow );\n\t\t\tbeep8.TextRenderer.print( text.substring( 0, i ), font );\n\n\t\t\tif ( c !== 32 ) {\n\t\t\t\tawait beep8.Async.wait( delay );\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Prints text centered within a given width.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} width - The width to center the text within.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.printCentered = function( text, width, font = null ) {\n\n\t\tbeep8.TextRenderer.printFont_ = font || beep8.TextRenderer.curFont_;\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\n\t\tif ( !text ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst col = beep8.Core.drawState.cursorCol;\n\t\tconst rowInc = beep8.TextRenderer.printFont_.getCharRowCount();\n\n\t\t// Split the text into lines.\n\t\ttext = text.split( \"\\n\" );\n\n\t\t// Remove last item from text if it is empty.\n\t\tif ( text[ text.length - 1 ] === \"\" ) text.pop();\n\n\t\t// Loop through each line of text.\n\t\tfor ( let i = 0; i < text.length; i++ ) {\n\n\t\t\tconst textWidth = beep8.TextRenderer.measure( text[ i ] ).cols;\n\t\t\tconst tempCol = col + ( width - textWidth ) / 2;\n\n\t\t\tbeep8.Core.drawState.cursorCol = tempCol;\n\t\t\tbeep8.TextRenderer.print( text[ i ], font, width );\n\n\t\t\tbeep8.Core.drawState.cursorRow += rowInc;\n\n\t\t}\n\n\t\t// Reset cursor position.\n\t\tbeep8.Core.drawState.cursorCol = col;\n\n\t}\n\n\n\t/**\n\t * Prints text right-aligned within a given width.\n\t *\n\t * @param {string} text - The text to print.\n\t * @param {number} width - The width to right-align the text within.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.printRight = function( text, width, font = null ) {\n\n\t\tbeep8.TextRenderer.printFont_ = font || beep8.TextRenderer.curFont_;\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\n\t\tif ( !text ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst col = beep8.Core.drawState.cursorCol;\n\t\tconst rowInc = beep8.TextRenderer.printFont_.getCharRowCount();\n\n\t\ttext = beep8.TextRenderer.wrapText( text, width );\n\n\t\t// Split the text into lines.\n\t\ttext = text.split( \"\\n\" );\n\n\t\t// Remove last item from text if it is empty.\n\t\tif ( text[ text.length - 1 ] === \"\" ) text.pop();\n\n\t\t// Loop through each line of text.\n\t\tfor ( let i = 0; i < text.length; i++ ) {\n\n\t\t\tlet textWidth = beep8.TextRenderer.measure( text[ i ] ).cols;\n\t\t\tconst tempCol = col + width - textWidth;\n\n\t\t\tbeep8.Core.drawState.cursorCol = tempCol;\n\t\t\tbeep8.TextRenderer.print( text[ i ], font, width );\n\n\t\t\tbeep8.Core.drawState.cursorRow += rowInc;\n\n\t\t}\n\n\t\t// Reset cursor position.\n\t\tbeep8.Core.drawState.cursorCol = col;\n\n\t}\n\n\n\t/**\n\t * Prints a character a specified number of times.\n\t *\n\t * @param {number} ch - The character to print.\n\t * @param {number} n - The number of times to print the character.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.printChar = function( ch, n, font = null ) {\n\n\t\tif ( n === undefined || isNaN( n ) ) {\n\t\t\tn = 1;\n\t\t}\n\n\t\tbeep8.Utilities.checkNumber( \"ch\", ch );\n\t\tbeep8.Utilities.checkNumber( \"n\", n );\n\n\t\t// Check cursorCol and cursorRow are within bounds.\n\t\tif (\n\t\t\tbeep8.Core.drawState.cursorCol < 0 ||\n\t\t\tbeep8.Core.drawState.cursorRow < 0 ||\n\t\t\tbeep8.Core.drawState.cursorCol >= beep8.CONFIG.SCREEN_COLS ||\n\t\t\tbeep8.Core.drawState.cursorRow >= beep8.CONFIG.SCREEN_ROWS\n\t\t) {\n\t\t\t// No need for an error. Just end silently.\n\t\t\treturn;\n\t\t}\n\n\t\twhile ( n-- > 0 ) {\n\n\t\t\tput_(\n\t\t\t\tch,\n\t\t\t\tbeep8.Core.drawState.cursorCol,\n\t\t\t\tbeep8.Core.drawState.cursorRow,\n\t\t\t\tbeep8.Core.drawState.fgColor,\n\t\t\t\tbeep8.Core.drawState.bgColor,\n\t\t\t\tfont\n\t\t\t);\n\n\t\t\tbeep8.Core.drawState.cursorCol++;\n\n\t\t}\n\n\t\tbeep8.Renderer.markDirty();\n\n\t}\n\n\n\t/**\n\t * Prints a character as a \"sprite\" at a raw x, y position.\n\t *\n\t * @param {number} ch - The character to print.\n\t * @param {number} x - The x-coordinate.\n\t * @param {number} y - The y-coordinate.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.spr = function( ch, x, y, font = null, direction = 0 ) {\n\n\t\tbeep8.Utilities.checkNumber( \"ch\", ch );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkInt( \"direction\", direction );\n\t\tif ( font !== null ) beep8.Utilities.checkObject( \"font\", font );\n\n\t\tputxy_(\n\t\t\tch,\n\t\t\tx,\n\t\t\ty,\n\t\t\tbeep8.Core.drawState.fgColor,\n\t\t\tbeep8.Core.drawState.bgColor,\n\t\t\tfont,\n\t\t\tdirection\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Draws text at the given pixel coordinates, with no cursor movement.\n\t *\n\t * @param {number} x - The x-coordinate.\n\t * @param {number} y - The y-coordinate.\n\t * @param {string} text - The text to draw.\n\t * @param {string} [fontName] - The name of the font to use.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.drawText = function( x, y, text, fontName ) {\n\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\n\t\tif ( fontName ) {\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t}\n\n\t\tconst x0 = x;\n\t\tconst font = fontName ? ( beep8.TextRenderer.fonts_[ fontName ] || beep8.TextRenderer.curFont_ ) : beep8.TextRenderer.curFont_;\n\n\t\tif ( !font ) {\n\t\t\tbeep8.Utilities.warn( `Requested font '${fontName}' not found: not drawing text.` );\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( let i = 0; i < text.length; i++ ) {\n\t\t\tconst ch = text.charCodeAt( i );\n\n\t\t\tif ( ch === 10 ) {\n\n\t\t\t\tx = x0;\n\t\t\t\ty += font.getCharHeight();\n\n\t\t\t} else {\n\n\t\t\t\tputxy_(\n\t\t\t\t\tch,\n\t\t\t\t\tx, y,\n\t\t\t\t\tbeep8.Core.drawState.fgColor,\n\t\t\t\t\tbeep8.Core.drawState.bgColor,\n\t\t\t\t\tfont\n\t\t\t\t);\n\n\t\t\t\tx += font.getCharWidth();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Measures the dimensions of the text.\n\t *\n\t * @param {string} text - The text to measure.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use for measurement.\n\t * @returns {{cols: number, rows: number}} The dimensions of the text.\n\t */\n\tbeep8.TextRenderer.measure = function( text, font = null ) {\n\n\t\tbeep8.Utilities.checkString( \"text\", text );\n\n\t\tfont = font || beep8.TextRenderer.curFont_;\n\n\t\tif ( \"\" === text ) {\n\t\t\treturn { cols: 0, rows: 0 }; // Special case\n\t\t}\n\n\t\tlet rows = 1;\n\t\tlet thisLineWidth = 0;\n\t\tlet cols = 0;\n\n\t\tfor ( let i = 0; i < text.length; i++ ) {\n\t\t\ti = processEscapeSeq_( text, i, true );\n\t\t\tconst ch = text.charCodeAt( i );\n\n\t\t\tif ( ch === 10 ) {\n\t\t\t\trows++;\n\t\t\t\tthisLineWidth = 0;\n\t\t\t} else {\n\t\t\t\t++thisLineWidth;\n\t\t\t\tcols = Math.max( cols, thisLineWidth );\n\t\t\t}\n\t\t}\n\n\t\t// Adjust the size of the cols and rows based on the size of the font.\n\t\tcols = cols * font.getCharColCount();\n\t\trows = rows * font.getCharRowCount();\n\n\t\treturn { cols, rows };\n\n\t}\n\n\n\t/**\n\t * Prints a rectangle of a specified character.\n\t *\n\t * @param {number} width - The width of the rectangle.\n\t * @param {number} height - The height of the rectangle.\n\t * @param {number} ch - The character to fill the rectangle with.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.printRect = function( width, height, ch ) {\n\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\t\tbeep8.Utilities.checkNumber( \"ch\", ch );\n\n\t\tconst startCol = beep8.Core.drawState.cursorCol;\n\t\tconst startRow = beep8.Core.drawState.cursorRow;\n\n\t\tfor ( let i = 0; i < height; i++ ) {\n\t\t\tbeep8.Core.drawState.cursorCol = startCol;\n\t\t\tbeep8.Core.drawState.cursorRow = startRow + i;\n\t\t\tbeep8.TextRenderer.printChar( ch, width );\n\t\t}\n\n\t\tbeep8.Core.drawState.cursorCol = startCol;\n\t\tbeep8.Core.drawState.cursorRow = startRow;\n\n\t}\n\n\n\t/**\n\t * Prints a box with borders.\n\t *\n\t * @param {number} width - The width of the box.\n\t * @param {number} height - The height of the box.\n\t * @param {boolean} [fill=true] - Whether to fill the box.\n\t * @param {number} [borderCh=beep8.CONFIG.BORDER_CHAR] - The character to use for the border.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.printBox = function( width, height, fill = true, borderChar = beep8.CONFIG.BORDER_CHAR ) {\n\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\t\tbeep8.Utilities.checkBoolean( \"fill\", fill );\n\t\tbeep8.Utilities.checkNumber( \"borderChar\", borderChar );\n\n\t\tconst colCount = beep8.TextRenderer.curTiles_.getColCount();\n\t\tconst borders = {\n\t\t\tNW: borderChar,\n\t\t\tNE: borderChar + 2,\n\t\t\tSW: borderChar + colCount + colCount,\n\t\t\tSE: borderChar + colCount + colCount + 2,\n\t\t\tV: borderChar + colCount,\n\t\t\tH: borderChar + 1,\n\t\t};\n\n\t\tbeep8.TextRenderer.drawBox( width, height, fill, borders );\n\n\t}\n\n\n\t/**\n\t * Draws a box with borders.\n\t *\n\t * @param {number} width - The width of the box.\n\t * @param {number} height - The height of the box.\n\t * @param {boolean} [fill=true] - Whether to fill the box.\n\t * @param {Object} [borders] - The borders to use.\n\t * @param {number} [borders.NW] - The top-left corner character.\n\t * @param {number} [borders.NE] - The top-right corner character.\n\t * @param {number} [borders.SW] - The bottom-left corner character.\n\t * @param {number} [borders.SE] - The bottom-right corner character.\n\t * @param {number} [borders.V] - The vertical border character.\n\t * @param {number} [borders.H] - The horizontal border character.\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.drawBox = function( width, height, fill = true, borders = {} ) {\n\n\t\tconst startCol = beep8.Core.drawState.cursorCol;\n\t\tconst startRow = beep8.Core.drawState.cursorRow;\n\n\t\tfor ( let i = 0; i < height; i++ ) {\n\n\t\t\tbeep8.Core.drawState.cursorCol = startCol;\n\t\t\tbeep8.Core.drawState.cursorRow = startRow + i;\n\n\t\t\tif ( i === 0 ) {\n\t\t\t\t// Top border\n\t\t\t\tbeep8.TextRenderer.printChar( borders.NW );\n\t\t\t\tbeep8.TextRenderer.printChar( borders.H, width - 2 );\n\t\t\t\tbeep8.TextRenderer.printChar( borders.NE );\n\t\t\t} else if ( i === height - 1 ) {\n\t\t\t\t// Bottom border.\n\t\t\t\tbeep8.TextRenderer.printChar( borders.SW );\n\t\t\t\tbeep8.TextRenderer.printChar( borders.H, width - 2 );\n\t\t\t\tbeep8.TextRenderer.printChar( borders.SE );\n\t\t\t} else {\n\t\t\t\t// Middle.\n\t\t\t\tbeep8.TextRenderer.printChar( borders.V );\n\t\t\t\tbeep8.Core.drawState.cursorCol = startCol + width - 1;\n\t\t\t\tbeep8.TextRenderer.printChar( borders.V );\n\t\t\t}\n\t\t}\n\n\t\tif ( fill && width > 2 && height > 2 ) {\n\t\t\tbeep8.Core.drawState.cursorCol = startCol + 1;\n\t\t\tbeep8.Core.drawState.cursorRow = startRow + 1;\n\t\t\tbeep8.TextRenderer.printRect( width - 2, height - 2, 0 );\n\t\t}\n\n\t\tbeep8.Core.drawState.cursorCol = startCol;\n\t\tbeep8.Core.drawState.cursorRow = startRow;\n\n\t}\n\n\n\t/**\n\t * Wraps text to a given width.\n\t *\n\t * @param {string} text - The text to wrap.\n\t * @param {number} maxWidth - The width to wrap the text to.\n\t * @param {beep8.TextRendererFont} fontName - The font to use.\n\t * @returns {string} The wrapped text.\n\t */\n\tbeep8.TextRenderer.wrapText = function( text, maxWidth, font = null ) {\n\n\t\tfont = font || beep8.TextRenderer.curFont_;\n\n\t\t// If 0 or less then don't wrap.\n\t\tif ( maxWidth <= 0 ) return text;\n\n\t\t// Split the text into lines.\n\t\tconst lines = text.split( \"\\n\" );\n\n\t\t// New list of lines.\n\t\tconst wrappedLines = [];\n\n\t\tfor ( const line of lines ) {\n\n\t\t\tconst words = line.split( \" \" );\n\t\t\tlet wrappedLine = \"\";\n\n\t\t\tfor ( const word of words ) {\n\n\t\t\t\tconst lineWidth = beep8.TextRenderer.measure( ( wrappedLine + word ).trim() ).cols;\n\n\t\t\t\t// Is the line with the new word longer than the line width?\n\t\t\t\tif ( lineWidth > maxWidth ) {\n\t\t\t\t\twrappedLines.push( wrappedLine.trim() );\n\t\t\t\t\twrappedLine = \"\";\n\t\t\t\t}\n\n\t\t\t\t// Add a space between words.\n\t\t\t\twrappedLine += word + \" \";\n\n\t\t\t}\n\n\t\t\twrappedLines.push( wrappedLine.trim() );\n\n\t\t}\n\n\t\treturn wrappedLines.join( \"\\n\" );\n\n\t}\n\n\n\t/**\n\t * Puts a character at the specified row and column.\n\t *\n\t * @param {number} ch - The character to put.\n\t * @param {number} col - The column.\n\t * @param {number} row - The row.\n\t * @param {number} fgColor - The foreground color.\n\t * @param {number} bgColor - The background color.\n\t * @returns {void}\n\t */\n\tconst put_ = function( ch, col, row, fgColor, bgColor, font = null, direction = 0 ) {\n\n\t\t// Calculate x and y row and column to place character.\n\t\tconst x = Math.round( col * beep8.CONFIG.CHR_WIDTH );\n\t\tconst y = Math.round( row * beep8.CONFIG.CHR_HEIGHT );\n\n\t\tputxy_( ch, x, y, fgColor, bgColor, font, direction );\n\n\t}\n\n\n\t/**\n\t * Puts a character at the specified x and y coordinates.\n\t *\n\t * @param {number} ch - The character to put.\n\t * @param {number} x - The x-coordinate.\n\t * @param {number} y - The y-coordinate.\n\t * @param {number} fgColor - The foreground color.\n\t * @param {number} bgColor - The background color.\n\t * @param {beep8.TextRendererFont} [font=null] - The font to use.\n\t * @returns {void}\n\t */\n\tconst putxy_ = function( ch, x, y, fgColor, bgColor, font = null, direction = 0 ) {\n\n\t\tfont = font || beep8.TextRenderer.curTiles_;\n\n\t\tconst colCount = font.getColCount();\n\t\tconst chrW = font.getCharWidth();\n\t\tconst chrH = font.getCharHeight();\n\t\tconst fontRow = Math.floor( ch / colCount );\n\t\tconst fontCol = ch % colCount;\n\n\t\t// Round so assets are always drawn on whole pixels.\n\t\tx = Math.round( x );\n\t\ty = Math.round( y );\n\n\t\t// Draw the background.\n\t\t// If bgColor is -1 then don't draw the background.\n\t\t// Or make the background transparent.\n\t\tif ( bgColor >= 0 ) {\n\t\t\tbeep8.Core.offCtx.fillStyle = beep8.Core.getColorHex( bgColor );\n\t\t\tbeep8.Core.offCtx.fillRect( x, y, chrW, chrH );\n\t\t}\n\n\t\t// Foreground and background are the same so don't draw anything else.\n\t\tif ( beep8.CONFIG.SCREEN_COLORS === 1 && bgColor === fgColor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Flippety flip the tiles.\n\t\tif ( direction > 0 ) {\n\n\t\t\t// Save the current state of the canvas context if flipping is needed.\n\t\t\tbeep8.Core.offCtx.save();\n\n\t\t\t// Determine whether to flip horizontally or vertically\n\t\t\tconst flipH = ( direction & 1 ) !== 0; // Check if bit 1 is set (horizontal flip)\n\t\t\tconst flipV = ( direction & 2 ) !== 0; // Check if bit 2 is set (vertical flip)\n\n\t\t\t// Adjust the origin based on flip direction\n\t\t\tconst translateX = flipH ? chrW : 0;\n\t\t\tconst translateY = flipV ? chrH : 0;\n\t\t\tbeep8.Core.offCtx.translate( x + translateX, y + translateY );\n\n\t\t\t// Apply scaling to flip the image\n\t\t\tconst scaleX = flipH ? -1 : 1;\n\t\t\tconst scaleY = flipV ? -1 : 1;\n\t\t\tbeep8.Core.offCtx.scale( scaleX, scaleY );\n\n\t\t\t// Reset x and y to 0 because the translate operation adjusts the positioning\n\t\t\tx = 0;\n\t\t\ty = 0;\n\n\t\t}\n\n\t\tconst color = beep8.Utilities.clamp( fgColor, 0, beep8.CONFIG.COLORS.length - 1 );\n\t\tconst img = font.getImageForColor( color );\n\n\t\tbeep8.Core.offCtx.drawImage(\n\t\t\timg,\n\t\t\tfontCol * chrW,\n\t\t\tfontRow * chrH,\n\t\t\tchrW, chrH,\n\t\t\tx, y,\n\t\t\tchrW, chrH\n\t\t);\n\n\t\t// Restore the canvas context if flipping was needed.\n\t\tif ( direction > 0 ) {\n\t\t\tbeep8.Core.offCtx.restore();\n\t\t}\n\n\t\tbeep8.Renderer.markDirty();\n\n\t}\n\n\n\t/**\n\t * Tries to run an escape sequence that starts at text[pos].\n\t * Returns the position after the escape sequence ends.\n\t * If pretend is true, then this will only parse but not run it.\n\t *\n\t * @param {string} text - The text containing the escape sequence.\n\t * @param {number} startPos - The start position of the escape sequence.\n\t * @param {boolean} [pretend=false] - Whether to only parse but not run the sequence.\n\t * @returns {number} The position after the escape sequence ends.\n\t */\n\tconst processEscapeSeq_ = function( text, startPos, pretend = false ) {\n\n\t\t// Shorthand.\n\t\tconst startSeq = beep8.CONFIG.PRINT_ESCAPE_START;\n\t\tconst endSeq = beep8.CONFIG.PRINT_ESCAPE_END;\n\n\t\t// If no escape sequences are configured in beep8.CONFIG, stop.\n\t\tif ( !startSeq || !endSeq ) {\n\t\t\treturn startPos;\n\t\t}\n\n\t\t// Check that the start sequence is there.\n\t\tif ( text.substring( startPos, startPos + startSeq.length ) != startSeq ) {\n\t\t\treturn startPos;\n\t\t}\n\n\t\t// Where does it end?\n\t\tconst endPos = text.indexOf( endSeq, startPos + startSeq.length );\n\n\t\tif ( !pretend ) {\n\t\t\t// Get the contents of the sequence.\n\t\t\tconst command = text.substring( startPos + startSeq.length, endPos );\n\t\t\trunEscapeCommand_( command );\n\t\t}\n\n\t\treturn endPos + endSeq.length;\n\n\t}\n\n\n\t/**\n\t * Runs an escape command.\n\t *\n\t * @param {string} command - The command to run.\n\t * @returns {void}\n\t */\n\tconst runEscapeCommand_ = function( command ) {\n\n\t\t// If it contains commas, it's a compound command.\n\t\tif ( command.indexOf( ',' ) > 0 ) {\n\t\t\tconst parts = command.split( ',' );\n\t\t\tfor ( const part of parts ) runEscapeCommand_( part );\n\t\t\treturn;\n\t\t}\n\n\t\tcommand = command.trim();\n\n\t\tif ( command === \"\" ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The first character is the command's verb. The rest is the argument.\n\t\tconst verb = command[ 0 ].toLowerCase();\n\t\tconst arg = command.substring( 1 );\n\n\t\t// If the argument is not a number then the result will be NaN and\n\t\t// the default will be used.\n\t\tconst argNum = 1 * arg;\n\n\t\tswitch ( verb ) {\n\t\t\t// Set foreground color.\n\t\t\tcase \"f\":\n\t\t\tcase \"c\":\n\t\t\t\tbeep8.Core.drawState.fgColor = arg !== \"\" ? argNum : beep8.TextRenderer.origFgColor_;\n\t\t\t\tbreak;\n\n\t\t\t// Set background color.\n\t\t\tcase \"b\":\n\t\t\t\tbeep8.Core.drawState.bgColor = arg !== \"\" ? argNum : beep8.TextRenderer.origBgColor_;\n\t\t\t\tbreak;\n\n\t\t\t// Change font.\n\t\t\tcase \"t\":\n\t\t\t\tbeep8.TextRenderer.printFont_ = beep8.TextRenderer.getFontByName( arg );\n\t\t\t\tbreak;\n\n\t\t\t// Reset state.\n\t\t\tcase \"z\":\n\t\t\t\tbeep8.Core.drawState.fgColor = beep8.TextRenderer.origFgColor_;\n\t\t\t\tbeep8.Core.drawState.bgColor = beep8.TextRenderer.origBgColor_;\n\t\t\t\t// Use original font if available, otherwise default.\n\t\t\t\tbeep8.TextRenderer.printFont_ = beep8.TextRenderer.origFont_ || beep8.TextRenderer.fonts_[ \"default\" ];\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbeep8.Utilities.warn( \"Unknown beep8 print escape command: \" + command );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Regenerates the colors for all fonts.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.TextRenderer.regenColors = function() {\n\n\t\t// Tell all the fonts to regenerate their glyph images.\n\t\tObject.values( beep8.TextRenderer.fonts_ ).forEach( f => f.regenColors() );\n\n\t}\n\n} )( beep8 );\n( function( beep8 ) {\n\n\tbeep8.Textmode = {};\n\n\t/**\n\t * Load a textmode tilemap from data.\n\t * This is a wrapper for beep8.Tilemap.load to keep the API consistent.\n\t *\n\t * @param {Object} data The textmode tilemap data.\n\t * @returns {Promise} Resolves when the tilemap is loaded.\n\t */\n\tbeep8.Textmode.load = async function( data ) {\n\n\t\treturn beep8.Tilemap.load( data );\n\n\t};\n\n\n\t/**\n\t * Draw a textmode tilemap to the screen.\n\t * This is a wrapper for beep8.Tilemap.draw to keep the API consistent.\n\t *\n\t * @param {Array} tilemap The tilemap array to draw.\n\t * @param {number} [tileX=0] The x-coordinate of the tile to start drawing from.\n\t * @param {number} [tileY=0] The y-coordinate of the tile to start drawing from.\n\t * @param {number} [width=null] The width of the tilemap to draw.\n\t * @param {number} [height=null] The height of the tilemap to draw.\n\t * @returns {void}\n\t */\n\tbeep8.Textmode.draw = async function( tilemap, tileXOffset = 0, tileYOffset = 0, width = null, height = null ) {\n\n\t\treturn beep8.Tilemap.draw( tilemap, tileXOffset, tileYOffset, width, height );\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * Represents an individual font that can be used with beep8.TextRenderer.\n\t */\n\tbeep8.TextRendererFont = class {\n\n\n\t\t/**\n\t\t * Constructs a font. NOTE: after construction, you must call await initAsync() to\n\t\t * initialize the font.\n\t\t *\n\t\t * @param {string} fontName - The name of the font.\n\t\t * @param {string} fontImageFile - The URL of the image file for the font.\n\t\t * @param {number} [tileWidthMultiplier=1] - The tile width multiplier for the font.\n\t\t * @param {number} [tileHeightMultiplier=1] - The tile height multiplier for the font.\n\t\t */\n\t\tconstructor( fontName, fontImageFile, tileWidthMultiplier = 1, tileHeightMultiplier = 1 ) {\n\n\t\t\tbeep8.Utilities.checkString( \"fontName\", fontName );\n\t\t\tbeep8.Utilities.checkString( \"fontImageFile\", fontImageFile );\n\n\t\t\tthis.fontName_ = fontName;\n\t\t\tthis.fontImageFile_ = fontImageFile;\n\t\t\tthis.origImg_ = null;\n\t\t\tthis.chrImages_ = [];\n\t\t\tthis.imageWidth_ = 0;\n\t\t\tthis.imageHeight_ = 0;\n\t\t\tthis.colCount_ = 0;\n\t\t\tthis.rowCount_ = 0;\n\t\t\tthis.charWidth_ = 0;\n\t\t\tthis.charHeight_ = 0;\n\t\t\tthis.charColCount_ = 0;\n\t\t\tthis.charRowCount_ = 0;\n\t\t\tthis.tileWidthMultiplier_ = tileWidthMultiplier;\n\t\t\tthis.tileHeightMultiplier_ = tileHeightMultiplier;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Sets up this font from the given character image file. It's assumed to contain the\n\t\t * glyphs arranged in a 16x16 grid, so we will deduce the character size by dividing the\n\t\t * width and height by 16.\n\t\t *\n\t\t * @returns {Promise<void>}\n\t\t */\n\t\tasync initAsync() {\n\n\t\t\tthis.origImg_ = await beep8.Utilities.loadImageAsync( this.fontImageFile_ );\n\n\t\t\tconst imageCharWidth = beep8.CONFIG.CHR_WIDTH * this.tileWidthMultiplier_;\n\t\t\tconst imageCharHeight = beep8.CONFIG.CHR_HEIGHT * this.tileHeightMultiplier_;\n\n\t\t\tbeep8.Utilities.assert(\n\t\t\t\tthis.origImg_.width % imageCharWidth === 0 && this.origImg_.height % imageCharHeight === 0,\n\t\t\t\t`Font ${this.fontName_}: image ${this.fontImageFile_} has dimensions ` +\n\t\t\t\t`${this.origImg_.width}x${this.origImg_.height}.`\n\t\t\t);\n\n\t\t\tthis.origImg_ = await beep8.Utilities.makeColorTransparent( this.origImg_ );\n\n\t\t\tthis.charWidth_ = imageCharWidth;\n\t\t\tthis.charHeight_ = imageCharHeight;\n\t\t\tthis.imageWidth_ = this.origImg_.width;\n\t\t\tthis.imageHeight_ = this.origImg_.height;\n\t\t\tthis.colCount_ = this.imageWidth_ / this.charWidth_;\n\t\t\tthis.rowCount_ = this.imageHeight_ / this.charHeight_;\n\t\t\t// How many tiles wide and tall each character is.\n\t\t\tthis.charColCount_ = this.tileWidthMultiplier_;\n\t\t\tthis.charRowCount_ = this.tileHeightMultiplier_;\n\n\t\t\tawait this.regenColors();\n\n\t\t}\n\n\n\t\t/**\n\t\t * Returns the character width of the font.\n\t\t *\n\t\t * @returns {number} The width of each character in pixels.\n\t\t */\n\t\tgetCharWidth() {\n\n\t\t\treturn this.charWidth_;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Returns the character height of the font.\n\t\t *\n\t\t * @returns {number} The height of each character in pixels.\n\t\t */\n\t\tgetCharHeight() {\n\n\t\t\treturn this.charHeight_;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Returns the character width of the font.\n\t\t *\n\t\t * @returns {number} The width of each character in pixels.\n\t\t */\n\t\tgetCharColCount() {\n\n\t\t\treturn this.charColCount_;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Returns the character height of the font.\n\t\t *\n\t\t * @returns {number} The height of each character in pixels.\n\t\t */\n\t\tgetCharRowCount() {\n\n\t\t\treturn this.charRowCount_;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Returns the number of rows in the font image.\n\t\t *\n\t\t * @returns {number} The number of rows in the font image.\n\t\t */\n\t\tgetRowCount() {\n\n\t\t\treturn this.rowCount_;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Returns the number of columns in the font image.\n\t\t *\n\t\t * @returns {number} The number of columns in the font image.\n\t\t */\n\t\tgetColCount() {\n\n\t\t\treturn this.colCount_;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t * Returns the image for a given color number.\n\t\t *\n\t\t * @param {number} colorNumber - The color number.\n\t\t * @returns {HTMLImageElement} The image for the specified color.\n\t\t */\n\t\tgetImageForColor( colorNumber ) {\n\n\t\t\treturn this.chrImages_[ colorNumber ];\n\n\t\t}\n\n\n\t\t/**\n\t\t * Regenerates the color text images.\n\t\t *\n\t\t * @returns {Promise<void>}\n\t\t */\n\t\tasync regenColors() {\n\n\t\t\tthis.chrImages_ = [];\n\n\t\t\t// Loop through each color.\n\t\t\tfor ( let c = 0; c < beep8.CONFIG.COLORS.length; c++ ) {\n\n\t\t\t\t// Create a temp context to draw the font image to.\n\t\t\t\tconst tempCanvas = document.createElement( 'canvas' );\n\t\t\t\ttempCanvas.width = this.origImg_.width;\n\t\t\t\ttempCanvas.height = this.origImg_.height;\n\n\t\t\t\tconst ctx = tempCanvas.getContext( '2d' );\n\n\t\t\t\t// Clear the temp canvas.\n\t\t\t\tctx.clearRect( 0, 0, this.origImg_.width, this.origImg_.height );\n\n\t\t\t\t// Draw the font image to the temp canvas (white over transparent background).\n\t\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\t\tctx.drawImage( this.origImg_, 0, 0, this.origImg_.width, this.origImg_.height );\n\n\t\t\t\t// Now draw a filled rect with the desired color using the 'source-in' pixel\n\t\t\t\t// operation, which will tint the white pixels to that color.\n\t\t\t\tctx.globalCompositeOperation = 'source-in';\n\t\t\t\tctx.fillStyle = beep8.CONFIG.COLORS[ c ];\n\t\t\t\tctx.fillRect( 0, 0, this.origImg_.width, this.origImg_.height );\n\n\t\t\t\t// Now draw with multiply blend mode to add shading.\n\t\t\t\t// But only if we the config is set.\n\t\t\t\tif ( beep8.CONFIG.SCREEN_COLORS === 2 ) {\n\t\t\t\t\tctx.globalCompositeOperation = 'multiply';\n\t\t\t\t\tctx.drawImage( this.origImg_, 0, 0, this.origImg_.width, this.origImg_.height );\n\t\t\t\t}\n\n\t\t\t\tthis.chrImages_.push( tempCanvas );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.State = beep8.State || {};\n\n\n\t// This is the key used to store the state in localStorage.\n\tlet STORAGE_KEY = '';\n\n\tdocument.addEventListener(\n\t\t'beep8.initComplete',\n\t\tfunction() {\n\n\t\t\t// Set the storage key based on the beep8 configuration name.\n\t\t\tSTORAGE_KEY = `beep8.${beep8.Utilities.makeUrlPretty( beep8.CONFIG.NAME )}.state`;\n\n\t\t},\n\t\t{ once: true }\n\t);\n\n\n\t/**\n\t * Recursively wraps an object in a Proxy to make it reactive.\n\t *\n\t * @param {Object} target - The object to wrap.\n\t * @returns {Proxy} - The reactive proxy.\n\t */\n\tfunction createProxy( target ) {\n\n\t\treturn new Proxy(\n\t\t\ttarget,\n\t\t\t{\n\n\t\t\t\t/**\n\t\t\t\t * Get trap for the Proxy.\n\t\t\t\t * Intercepts property access on the state object.\n\t\t\t\t *\n\t\t\t\t * @param {Object} obj - The original object being proxied.\n\t\t\t\t * @param {string} prop - The property being accessed.\n\t\t\t\t * @returns {*} - The value of the accessed property.\n\t\t\t\t */\n\t\t\t\tget( obj, prop ) {\n\n\t\t\t\t\tconst value = obj[ prop ];\n\t\t\t\t\tif ( typeof value === 'object' && value !== null ) {\n\t\t\t\t\t\treturn createProxy( value );\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\n\t\t\t\t},\n\n\n\t\t\t\t/**\n\t\t\t\t * Set trap for the Proxy.\n\t\t\t\t * Intercepts property updates on the state object.\n\t\t\t\t *\n\t\t\t\t * @param {Object} obj - The original object being proxied.\n\t\t\t\t * @param {string} prop - The property being updated.\n\t\t\t\t * @param {*} value - The new value to assign to the property.\n\t\t\t\t * @returns {boolean} - Returns true to indicate the operation was successful.\n\t\t\t\t */\n\t\t\t\tset( obj, prop, value ) {\n\n\t\t\t\t\tobj[ prop ] = value;\n\t\t\t\t\tbeep8.Utilities.event( 'stateChange', { prop, value } );\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Saves the current state to localStorage using CBOR and base64.\n\t *\n\t * @param {string} [key='beep8.state'] - Optional localStorage key.\n\t */\n\tbeep8.State.save = function( key = STORAGE_KEY ) {\n\n\t\tconst encoded = beep8.Utilities.encodeData(\n\t\t\t{\n\t\t\t\ttime: Date.now(),\n\t\t\t\tdata: beep8.data\n\t\t\t}\n\t\t);\n\n\t\tlocalStorage.setItem( key, encoded );\n\n\t\tbeep8.State.lastSave = Date.now();\n\n\t}\n\n\n\t/**\n\t * Loads state from localStorage, replacing State.data.\n\t *\n\t * @param {string} [key='beep8.state'] - Optional localStorage key.\n\t */\n\tbeep8.State.load = function( key = STORAGE_KEY ) {\n\n\t\tconst b64 = localStorage.getItem( key );\n\n\t\tif ( !b64 ) {\n\t\t\tbeep8.Utilities.log( 'No state found for the given key.' );\n\t\t\treturn;\n\t\t}\n\n\t\tconst rawState = beep8.Utilities.decodeData( b64 );\n\t\tif ( rawState.data ) {\n\t\t\tbeep8.data = createProxy( rawState.data );\n\t\t}\n\n\t\tif ( rawState.time ) {\n\t\t\tbeep8.State.lastSave = rawState.time;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Sets default values for missing keys in the state.\n\t * Does not overwrite existing values.\n\t *\n\t * @param {Object} defaults - An object containing default key/value pairs.\n\t */\n\tbeep8.State.init = function( defaults ) {\n\n\t\tif ( !beep8.data ) {\n\t\t\tbeep8.data = createProxy( {} );\n\t\t}\n\n\t\t// If there is a save file then load that too.\n\t\tif ( localStorage.getItem( STORAGE_KEY ) ) {\n\t\t\tbeep8.State.load();\n\t\t}\n\n\t\t// beep8.data = beep8.Utilities.deepMergeByIndex( beep8.data, defaults );\n\t\tbeep8.data = beep8.Utilities.deepMergeByIndex( defaults, beep8.data );\n\n\t\tbeep8.Utilities.log( 'State initialized:', beep8.data );\n\n\t}\n\n\n\t/**\n\t * Resets the state to its initial values.\n\t * This is useful for starting a new game or resetting the application.\n\t *\n\t * @param {string} [key='beep8.state'] - Optional localStorage key.\n\t * @returns {void}\n\t */\n\tbeep8.State.clear = function( key = STORAGE_KEY ) {\n\n\t\tbeep8.Utilities.log( 'Clearing state...' );\n\n\t\tlocalStorage.removeItem( key );\n\t\tbeep8.data = createProxy( {} );\n\n\t}\n\n\n\t/**\n\t * The beep8.State data object.\n\t */\n\tbeep8.data = createProxy( {} );\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Sfx = {};\n\n\n\t/**\n\t * Sound effect library.\n\t *\n\t * @see https://killedbyapixel.github.io/ZzFX/\n\t * @see https://codepen.io/KilledByAPixel/pen/BaowKzv?editors=1000\n\t * @type {Object}\n\t */\n\tbeep8.Sfx.library = {\n\n\t\t'fx/action/drag': [ , 0, 293.6648, .1, , , 4, 6, 32, , , , , 1, 1.4, .1, , .7, .1 ],\n\n\t\t'fx/break/001': [ 2.1, , 339, .02, .07, .09, 4, .2, -7, , , , .05, 1, , .1, .16, .45, .02, .03 ],\n\t\t'fx/break/002': [ 1.5, , 157, .16, , 0, , .35, -24, 28, , , , .1, , .6, , .19, .01 ],\n\t\t'fx/break/003': [ 2, , 180, 0.05, 0.03, 0.04, , 2.42, 0.6, , , , , , , , 0.15, 0.39, 0.04 ],\n\n\t\t'fx/fight/dodge': [ 1.2, .3, 150, .05, , .05, , , -1, , , , , 4, , , , , .02 ],\n\t\t'fx/fight/hit': [ 5, , 185, , , , 3, 1.6, -7, , , , , , , .2, .19, .1, , .38, 985 ],\n\n\t\t'fx/robot/001': [ 1.13, , 172, .04, .18, .09, , .06, - 38, -2.6, -99, , , , 35, , .08 ],\n\t\t'fx/robot/002': [ 1.42, , 61, .01, .02, 0, 1, .21, , , 816, .01, .05, , -40, , .05, .71, .11 ],\n\t\t'fx/robot/003': [ .9, , 164, .04, .03, .14, , .8, 46, 66, , , , , , , , .71, .08, , 217 ],\n\t\t'fx/robot/004': [ , .02, 1638, , .05, .17, 1, , , , 490, .09, , , , .1, .05, .5, .03 ],\n\n\t\t'fx/sci-fi/radioactive': [ 1, 0, 130, .02, .9, .39, 2, .8, , , , , .13, .2, , .1, , .93, .06, .28 ],\n\t\t'fx/sci-fi/robot': [ 1, 0, 847, .02, .3, .9, 1, 1.67, , , -294, .04, .13, , , , .1 ],\n\t\t'fx/sci-fi/teleport': [ 1, , 85, .08, .1, .01, 1, 4, , -11, 1, .07, , .1, 101, , .05, .68, .4, .12, 1 ],\n\t\t'fx/sci-fi/warp': [ 3, 0, 713, .16, .09, .24, , .6, -29, -16, , , .09, .5, , , .23, .75, .15, .48 ],\n\t\t'fx/sci-fi/beam': [ 1, 0, 662, .82, .11, .33, 1, 0, , -0.2, , , , 1.2, , .26, .01 ],\n\t\t'fx/sci-fi/hover': [ 2, 0, 262.63, 0.1, 0.12, 0.3, 0, 2.4, -0.1, 0, 0, 0, 0.24, 0, 0, 0.1, 0.05, 0.98, 0.07, 0.17, 0 ],\n\n\t\t'fx/thud/001': [ 1.5, , 90, , .01, .03, 4, , , , , , , 9, 50, .2, , .2, .01 ],\n\t\t'fx/thud/002': [ 1, , 129, .01, , .15, , , , , , , , 5 ],\n\n\t\t'fx/machine/buzz': [ 1, 0, 130.8128, .1, .1, .34, 3, 1.88, , , , , , , , .1, , .5, .04 ],\n\t\t'fx/machine/hum': [ 1, 0, 63, , 1, , 1, 1.5, , , , , , , , 3.69, .08 ],\n\t\t'fx/machine/humm': [ 1, , 110, .03, .25, .15, 2, 1.32, , , , , .07, , -0.1, , .11, .77 ],\n\t\t'fx/machine/warp': [ 2, , 128, , .12, .26, , 4.7, , -1, -62, .06, .07, , 52, , , .66, .08 ],\n\n\t\t'fx/noise/001': [ 1.27, , 390, 0.01, 0.04, 0.02, 4, 0.71, 4.8, , , , , , , , 0.01, 0.6, 0.06 ],\n\t\t'fx/noise/002': [ 0.4, , 60, , 0.01, 0, 4, 0.55, 62, 89, -88, 0.06, , , 173, 0.6, , , 0.05 ],\n\t\t'fx/noise/003': [ 0.2, , 523.2511, .1, 3, 3, 4, 0, , , 2250, , .04, , 10, .01, , .82, 1, , 30 ],\n\n\t\t'fx/random/tone': [ 2, .8, 999, , , , 1, 2, , , , , 1, , , .1, .2 ],\n\n\t\t'fx/swoosh/001': [ 1, , 1500, 0.02, , 0.02, 4, 0.68, 5, , , , 0.01, 0.7, 136, , , , , 0.11 ],\n\t\t'fx/swoosh/002': [ 1.2, , 585, , .02, .16, 4, .25, , , , , , , , , , .55, .03 ],\n\t\t'fx/swoosh/003': [ .2, , 836, .11, , 0, 4, .91, 13, , , , .09, .1, -39, , , .06, .07 ],\n\t\t'fx/swoosh/004': [ 1.2, , 9220, .01, , , , 5, , , , , , 9 ],\n\t\t'fx/swoosh/005': [ 1.5, 0, 150, .05, , .05, , 1.3, , , , , , 3 ],\n\t\t'fx/swoosh/006': [ 2, , 12, , , 0.008, , 1.2, 23, -7, , , 0.05, 0.4, , , 0.15, 0.82, 0.03, 0.28, ],\n\n\t\t'fx/vehicle/engine': [ 1.2, 0, 25, .05, .3, .5, 3, 9, -0.01, , , , , , 13, .1, .2 ],\n\t\t'fx/vehicle/carhorn': [ 1.8, 0, 250, .02, .02, .2, 2, 2, , , , , .02, , , .02, .01, , , .1 ],\n\t\t'fx/vehicle/horn': [ 2, , 688, .02, .01, .007, 1, 2.6, , , , , .01, , 85, , .01, .85, .03, .11, -818 ],\n\t\t'fx/vehicle/truckhorn': [ 1.5, , 1376, .02, .01, .007, 1, 2.6, , , , , .01, , 85, , .01, .85, .8, .11, -818 ],\n\t\t'fx/vehicle/siren': [ 1.3, 0, 960, , 1, .01, , .8, -0.01, , -190, .5, , .05, , , 1 ],\n\t\t'fx/vehicle/submarine': [ 1.2, 0, 1975, .08, .56, .02, , , -0.4, , -322, .56, .41, , , , .25 ],\n\t\t'fx/vehicle/rocket': [ 1.5, 0, 941, .8, , .8, 4, .74, -222, , , , , .8, , 1 ],\n\n\t\t'game/coin/001': [ 1.2, 0, 1675, , .06, .24, 1, 1.82, , , 837, .06 ],\n\t\t'game/coin/002': [ 1.2, 0, 523.2511, .01, .06, .3, 1, 1.82, , , 837, .06 ],\n\t\t'game/coin/003': [ 0.6, 0, 1874, , 0.01, 0.25, 2, 0.76, , , 622, 0.1 ],\n\t\t'game/coin/004': [ 1, 0, 277, .03, .04, .06, 1, 1.8, 1, , 140, .06, .04, , , .1, , .99, .03 ],\n\n\t\t'game/collect/001': [ 1.1, 0, 450, , .01, .13, , 2.7, , -9.5, 500, .08, , , , , , .89 ],\n\t\t'game/collect/002': [ 1.05, , 10, .08, .07, .24, 2, 1.03, , , -374, .04, .09, , , , , .72, .15, .18 ],\n\n\t\t'game/die/001': [ 1.5, 0, 537, .02, .02, .22, 1, 1.59, -6.98, 4.97 ],\n\t\t'game/die/002': [ 1, , 321, .01, .06, .06, 1, 3.8, , -49, , , , .3, , , , .79, .09 ],\n\t\t'game/die/003': [ 1, 0, 344, .01, .02, .28, 1, 1.4, , , 50, , , , .3, .2, .15, .6, .06 ],\n\t\t'game/die/004': [ 0.5, 0, 43, 0.01, , 1, 2, , , , , , , , , 0.02, 0.01 ],\n\n\t\t'game/jump/001': [ 1, .1, 75, .03, .08, .17, 1, 1.88, 7.83, , , , , .4 ],\n\t\t'game/jump/002': [ 1.2, , 311, .03, .05, .05, , 2.2, , 9, , , .02, , 2.7, , , .97, .05, , 101 ],\n\t\t'game/jump/003': [ 1.5, , 65, .04, .1, .13, 1, 1.5, , -31, , , , .3, , , , .99, .03 ],\n\t\t'game/jump/004': [ , 0, 500, , .01, .13, , .2, 1.7, , -400 ],\n\t\t'game/jump/005': [ 1, , 341, , .14, .23, 1, 1.01, .9, , -132, .03, , .1, , .1, , .52, .22 ],\n\t\t'game/jump/006': [ 0.7, , 1496, .09, .09, .01, 3, .14, , , -870, , , , 3.2, .2, , .31, .02 ],\n\n\t\t'game/powerup/001': [ , , 188, .03, .09, .12, 1, 2.4, , 95, , , , , , , , .63, .08 ],\n\t\t'game/powerup/002': [ 0.8, 0, 413, .03, .05, .05, , 1.8, , 19, 177, .05, , , , , , .83, .02 ],\n\t\t'game/powerup/003': [ 0.5, , 643, , 0.1, 0.12, 1, 0.1, , 99, , , , , , , , 0.6, 0.02, , -732 ],\n\t\t'game/powerup/004': [ 1.18, , 143, .05, .08, .06, , .09, 25, 4.1, , , , , , , .01, .52, .09 ],\n\t\t'game/powerup/005': [ 1, , 18, 0.01, 0.01, 0.21, 1, 0.49, 9.9, , , , , , , , 0.04, 0.95, 0.02 ],\n\t\t'game/powerup/006': [ 0.5, , 426, .01, , .05, , 2.54, 49, , 9, .1, , , , , , .46, .15 ],\n\t\t'game/powerup/007': [ 1, , 158, .09, .18, .03, , 2.53, 11, -58, 63, .02, .01, .5, , , , .16 ],\n\t\t'game/powerup/008': [ 1.2, 0, 539, 0, .04, .29, 1, 1.92, , , 567, .02, .02, , , , .04 ],\n\n\t\t'instrument/bass/001': [ 2, 0, 65, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/002': [ 2, 0, 73, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/003': [ 2, 0, 82, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/004': [ 2, 0, 87, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/005': [ 2, 0, 97, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/006': [ 2, 0, 110, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/007': [ 2, 0, 123, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\t\t'instrument/bass/008': [ 2, 0, 130, .01, .08, .2, , 2.6, , , , , , .1, , , , .61, .02, , -1686 ],\n\n\t\t'instrument/drum/001': [ 1.5, 0, 86, , , , , 0.7, , , , 0.5, , 6.7, 1, 0.05 ],\n\t\t'instrument/drum/002': [ 0.7, 0, 270, , , 0.12, 3, 1.65, -2, , , , , 4.5, , 0.02 ],\n\n\t\t'tone/beep/001': [ 2, 0, 130, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/002': [ 2, 0, 146, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/003': [ 2, 0, 164, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/004': [ 2, 0, 174, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/005': [ 2, 0, 195, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/006': [ 2, 0, 220, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/007': [ 2, 0, 246, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\t\t'tone/beep/008': [ 2, 0, 261, , .1, , 1, 1.5, , , , , , , , .1, .01 ],\n\n\t\t'tone/bell/001': [ 2, 0, 999, , , , , 1.5, , .3, -99, .1, 1.63, , , .11, .22 ],\n\t\t'tone/bell/002': [ , 0, 1600, .13, .52, .61, 1, 1.1, , , , , , .1, , .14 ],\n\t\t'tone/bell/random': [ 2, .1, 999, , , , , 1.5, , .3, -99, .1, 1.63, , , .11, .22 ],\n\n\t\t'tone/blip/001': [ 5, 0, 130, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/002': [ 3, 0, 146, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/003': [ 3, 0, 164, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/004': [ 3, 0, 174, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/005': [ 3, 0, 195, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/006': [ 3, 0, 220, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/007': [ 3, 0, 246, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\t\t'tone/blip/008': [ 3, 0, 261, .02, .03, .02, , 2.8, , , , , , , , , , .7, .02 ],\n\n\t\t'tone/bloop/001': [ 1, , 110, .02, , .09, 1, .61, , , 556, .12, , , , .3, , , .02 ],\n\t\t'tone/bloop/002': [ 1, 0, 521.25, , .02, .03, 2, 0, , .1, 700, .01, , , 1, .1 ],\n\t\t'tone/bloop/003': [ 1.12, , 73, , 0.02, 0.11, 2, 1.18, , -0.1, , , , , , 0.3, , 0.55, 0.05, 0.23 ],\n\t\t'tone/bloop/004': [ 0.5, , 1368, .09, , 0, , 1.11, -76, 9.1, -490, , , , , , , .56 ],\n\t\t'tone/bloop/005': [ 2.03, , 413, , , 0.24, 2, 0.12, , , , , 0.11, , 317, 0.1, 0.13, , , 0.01 ],\n\t\t'tone/bloop/006': [ , 0, , .01, .02, .09, , .6, 17, -3, , , .1, , , , , .76, .08 ],\n\t\t'tone/bloop/007': [ 0.3, , 10, 0.06, , 0, 2, 2.3, , , 621, , , , , , , , 0.21, 0.26 ],\n\t\t'tone/bloop/008': [ 1.5, 0.05, 24, 0.01, 0.02, 0.01, 1, 3.9, -33, 0, 0, 0, 0, 0, 355, 0, 0, 0.65, 0, 0, 0 ],\n\t\t'tone/bloop/009': [ 2, 0.05, 226, 0, 0.08, 0.13, 0, 3.1, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.02, 0.76, 0.04, 0, 105 ],\n\t\t'tone/bloop/010': [ 4, 0, 224, .02, .02, .08, 1, 1.7, -13.9, , , , , , 6.7 ],\n\t\t'tone/bloop/011': [ 1, , 283, .02, , .11, , .38, , , , , .07, , , .1, .08, .63, .02 ],\n\t\t'tone/bloop/012': [ 1, 0, 288, 0.05, 0.01, , , 2, - 10, , , , , , , , , 0.5, 0.1 ],\n\t\t'tone/bloop/013': [ 2, 0, 700, 0.01, , 0, , , , , , , , , , , , 0.1, 0.01 ],\n\t\t'tone/bloop/014': [ 2.21, , 107, 0.02, 0.04, 0.07, , 2.22, 2, 0.9, , , , 0.4, , 0.5, 0.15, 0.42, 0.04 ],\n\t\t'tone/bloop/015': [ 0.6, 0, 2200, , , 0.04, 3, 2, , , 800, 0.02, , 4.8, , 0.01, 0.1 ],\n\n\t\t'tone/jingle/001': [ 1.4, , 183, .07, .13, .34, , 3.3, , , 35, .06, .07, , , , .13, .95, .27, .11 ],\n\t\t'tone/jingle/002': [ .8, , 208, .02, .21, .13, 3, .2, , , 40, .06, .1, , , , , .91, .2, .27 ],\n\t\t'tone/jingle/003': [ .9, , 56, .15, .46, .08, , 1.6, -2, , -137, .01, .06, , , , .09, .77, .37, .13 ],\n\t\t'tone/jingle/004': [ .6, , 269, .03, .17, .41, , .2, , 1, 239, .08, .04, , , , , .72, .19, .43, -720 ],\n\t\t'tone/jingle/005': [ 1.3, 0, 130.81, 0.32, 0.35, 0.5, 3, 5.2, 0, 1, 50, 0, 0.14, 0, 0, 0, 0, 0.37, 0.04, 0.24, 0 ],\n\t\t'tone/jingle/006': [ 1, , 525, .18, .28, .17, 1, 1.24, 8.3, -9.7, -151, .03, .06, , , , , .93, .02, .14 ],\n\t\t'tone/jingle/007': [ .6, , 934, .12, .38, .93, 1, .27, , .4, -434, .08, .2, .1, , .1, .17, .55, 1, .46 ],\n\t\t'tone/jingle/008': [ 1.4, 0, 20, .04, , .6, , 1.31, , , -990, .06, .17, , , .04, .07 ],\n\t\t'tone/jingle/009': [ 1.2, 0, 80, .3, .4, .7, 2, .1, -0.73, 3.42, -430, .09, .17, , , , .19 ],\n\t\t'tone/jingle/010': [ 0.5, , 392, .06, .22, .5, 1, 1.85, -0.1, -0.9, 61, .05, .07, , , .1, , .96, .12 ],\n\t\t'tone/jingle/011': [ 0.5, , 146, .04, .23, .46, , .56, , -3.7, 658, .02, .15, .1, , , , .82, .13, .2 ],\n\t\t'tone/jingle/012': [ 1, , 284, .08, .2, .25, 1, 3, , , 50, .09, .06, , , , , .6, .28, .03, -1391 ],\n\t\t'tone/jingle/013': [ 1.5, , 430, .02, .12, .5, , .89, , -3.6, -133, .07, .13, , , .1, , .83, .23, .26 ],\n\t\t'tone/jingle/014': [ 0.4, , 22, .08, .22, .02, 1, .52, -4.2, -9.8, , , .14, , -18, .2, , , .05 ],\n\t\t'tone/jingle/015': [ , , 193, .04, .27, .42, 1, 1.71, 2.8, 4.9, , , .1, .2, , .1, , .55, .27, .47 ],\n\t\t'tone/jingle/016': [ 1.1, , 250, .07, .24, .26, , 2, , 164, 211, .07, .08, , , .1, , .75, .12, .09, 115 ],\n\t\t'tone/jingle/017': [ , , 103, .04, .11, .43, 1, .77, , , 57, .19, .05, , , .1, , .68, .24 ],\n\n\t\t'ui/click/001': [ 1.5, 0, 900, , .01, 0, 1, , -10, , -31, .02, , , , , , 1.2, , .16, -1448 ],\n\t\t'ui/click/002': [ 2.5, , 783, , .03, .02, 1, 2, , , 940, .03, , , , , .2, .6, , .06 ],\n\t\t'ui/click/003': [ 1.5, .01, 300, , , .02, 3, .22, , , -9, .2, , , , , , .5 ],\n\t\t'ui/click/004': [ 1, 0, 685, .01, .03, .17, 1, 1.4, , , , , , , , , , .63, .01, , 420 ],\n\t\t'ui/click/005': [ 6, , 205, , .02, 0, , 1.03, , , , , , , , , .12, .32 ],\n\n\t\t'weapon/explode/001': [ 1.5, 0, 333, .01, 0, .9, 4, 1.9, , , , , , .5, , .6 ],\n\t\t'weapon/explode/002': [ 1.1, 0, 418, 0, .02, .2, 4, 1.15, -8.5, , , , , .7, , .1 ],\n\t\t'weapon/explode/003': [ 1.2, 0, 82, .02, , .2, 4, 4, , , , , , .8, , .2, , .8, .09 ],\n\t\t'weapon/explode/004': [ 2, .2, 72, .01, .01, .2, 4, , , , , , , 1, , .5, .1, .5, .02 ],\n\t\t'weapon/explode/005': [ 2, , 1e3, .02, , .2, 1, 3, .1, , , , , 1, -30, .5, , .5 ],\n\t\t'weapon/explode/006': [ 1, , 485, .02, .2, .2, 4, .11, -3, .1, , , .05, 1.1, , .4, , .57, .5 ],\n\t\t'weapon/explode/007': [ 0.8, , 372, 0.02, 0.02, 0.5, 4, 2.29, 0.2, , , , , 0.6, , 0.6, , 0.7, 0.04, 0.19 ],\n\t\t'weapon/explode/008': [ 1.05, , 591, .03, .13, .51, 4, 3.02, .6, .1, , , .04, 1.6, , 1, , .46, .13 ],\n\t\t'weapon/explode/009': [ 1.99, , 770, 0.03, 0.19, 0.35, , 0.26, , , , , , 2, -50, 0.1, 0.27, 0.48, 0.06 ],\n\t\t'weapon/explode/010': [ 1.5, , 98, .08, .18, .02, 2, 2.47, 36, .5, , , .04, .1, , .9, .44, , .04 ],\n\t\t'weapon/explode/011': [ 1, , 400, , .03, .21, 3, .85, .5, , , , , 1.8, , .5, , .97, .05 ],\n\t\t'weapon/explode/012': [ 1, , 485, .02, .07, .03, 4, .11, -3, .1, , , .05, 1.1, , .4, , .57, .09 ],\n\t\t'weapon/explode/013': [ , , 30, .09, .12, .35, 4, 3, 4, , , , , 1.3, , .6, , .36, .21 ],\n\n\t\t'weapon/lazer/001': [ 1.5, 0, 515, .05, .07, .09, 1, 2.8, , , 302, .06, .1, , 3.5, .1, .08, .75, .04 ],\n\t\t'weapon/lazer/002': [ , 0, 925, .04, .3, .6, 1, .3, , 6.27, -184, .09, .17 ],\n\t\t'weapon/lazer/003': [ 1, , 375, .01, .06, , 2, 2.3, 18, -10, , , , , 18, , , .56, .14 ],\n\t\t'weapon/lazer/004': [ 0.5, , 2e3, , 0.05, 0, , 1.11, -17, , 197, 0.01, , 0.2, , , , , 0.16 ],\n\t\t'weapon/lazer/005': [ .9, , 752, .03, .01, .02, , 1.4, , , -10, .01, , , 3.4, , , .68, .03, , 106 ],\n\t\t'weapon/lazer/006': [ 1.9, , 221, .01, .05, .06, 1, 3.9, -2, , 116, .05, , , , , , .65, .02, , 452 ],\n\t\t'weapon/lazer/007': [ 1, , 659, .01, .04, , 1, .4, , -75, 179, .06, , , .2, , , .57 ],\n\n\t\t'world/footstep/001': [ 1.1, 0.05, 157, 0.03, 0.04, 0.04, 4, 4.9, 78, -13, 0, 0, 0.07, 0, 0, 0, 0, 0.91, 0.02, 0.33, 0 ],\n\t\t'world/footstep/002': [ .1, 1, 300, .05, .1, .05, 4, .2, -100, , -50, .07, , .5, , .4, , , , .05 ],\n\t\t'world/footstep/003': [ 3, , 5, , .06, .01, 2, 2.25, -19, -79, 409, .01, , , 6.6, , .2, .57, , .8 ],\n\n\t\t'world/nature/frog': [ 0.5, , 160, .03, .03, .02, , 1.52, -23, 93, 662, .02, , , , .1, , , .07, .01 ],\n\t\t'world/nature/dolphin': [ 0.5, 0, 448, .01, .1, .3, 3, .39, -0.5, , , , , , .2, .1, .08 ],\n\t\t'world/nature/whale': [ 1.2, 0, 1306, .8, .08, .02, 1, , , , , , .48, , -0.1, .11, .25 ],\n\t\t'world/nature/mouse': [ 1.2, 0, 1e3, .02, , .01, 2, , 18, , 475, .01, .01 ],\n\t\t'world/nature/small-dog': [ 1, , 759, .01, , .01, 1, .97, 15, , , , , , 3.1, , , .76, .04 ],\n\t\t'world/nature/tweet': [ 0.7, , 1305, , , .03, 1, .75, , 23, 694, .01, , , 3.9, , , , .01 ],\n\n\t\t'world/water/splash': [ 2, , 94, .07, .1, .33, 4, .6, 1, , , , , .1, 1, .1, .1, .45, .15 ],\n\t\t'world/water/wave': [ 1, 0, 40, .5, , 1.5, , 11, , , , , , 199 ],\n\t\t'world/water/pop': [ 1, 0, 103, , 0.02, 0.06, , 1.24, - 18, 4.4, , , , 0.7, , 0.1, , 0.95, 0.03 ],\n\n\t\t'world/weather/thunder': [ 1.2, 0, 471, , .09, .47, 4, 1.06, -6.7, , , , , .9, 61, .1, , .82, .09, .13 ],\n\n\t};\n\n\n\t/**\n\t * Play a named sound effect.\n\t *\n\t * @param {string} sfx - The name of the sound effect to play.\n\t * @throws {Error} If the sfx is not found.\n\t * @returns\t{void}\n\t */\n\tbeep8.Sfx.play = function( sfx = '' ) {\n\n\t\t// Quit if no sound specified.\n\t\tif ( !sfx ) return;\n\n\t\t// Check the sfx is a string.\n\t\tbeep8.Utilities.checkString( 'sfx', sfx );\n\n\t\t// SFX not found.\n\t\tif ( !beep8.Sfx.library[ sfx ] ) {\n\t\t\tbeep8.Utilities.fatal( `SFX ${sfx} not found.` );\n\t\t}\n\n\t\tbeep8.Sfx.playFromArray( beep8.Sfx.library[ sfx ] );\n\n\t}\n\n\n\t/**\n\t * Play a sound effect from a ZzFX array.\n\t *\n\t * This array can be generated with ZzFX. It should be just the array beginning and ending with square brackets.\n\t *\n\t * @see https://killedbyapixel.github.io/ZzFX/\n\t *\n\t * @param {Array} sfxArray - The sound effect array to play.\n\t * @returns {void}\n\t */\n\tbeep8.Sfx.playFromArray = function( sfxArray = [] ) {\n\n\t\t// Check the sfx is an array.\n\t\tbeep8.Utilities.checkArray( 'sfxArray', sfxArray );\n\n\t\t// Play the raw sound effect.\n\t\tzzfx( ...sfxArray );\n\t}\n\n\n\t/**\n\t * Add a sound effect to the library.\n\t *\n\t * @param {string} sfxName - The name of the sound effect.\n\t * @param {Array} sfxArray The sound effect array.\n\t * @throws {Error} If the sfxName is not a string.\n\t * @throws {Error} If the sfxArray is not an array.\n\t * @return {void}\n\t */\n\tbeep8.Sfx.add = function( sfxName, sfxArray ) {\n\n\t\tbeep8.Utilities.checkString( 'sfxName', sfxName );\n\t\tbeep8.Utilities.checkArray( 'sfxArray', sfxArray );\n\n\t\tbeep8.Sfx.library[ sfxName ] = sfxArray;\n\n\t}\n\n\n\t/**\n\t * Get the list of sfx from the library.\n\t *\n\t * @return {Array} The list of sfx.\n\t */\n\tbeep8.Sfx.get = function() {\n\n\t\treturn Object.keys( beep8.Sfx.library );\n\n\t}\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * Stores all scenes by name.\n\t *\n\t * @type {Object}\n\t */\n\tbeep8.Scene = {};\n\n\n\t/**\n\t * Holds the current active scene object.\n\t *\n\t * @type {Object|null}\n\t */\n\tlet activeScene = null;\n\n\tconst sceneList = {};\n\n\n\t/**\n\t * Adds a new scene to the scene manager.\n\t *\n\t * A scene should be a javascript object with at least one of the following functions:\n\t *\n\t * - init (optional): A function that will be called when the scene is set.\n\t * - update (optional): A function that will be called multiple times a frame and passed a deltatime value as a parameter.\n\t * - render (optional): A function that will be called every frame.\n\t *\n\t * Init can be used to set up the scene. For asynchronous games you can add a while loop here and use await functions (eg for keypresses) and then render yourself.\n\t * For synchronous games you can use the update and render functions to manage game logic and rendering efficiently.\n\t *\n\t * eg:\n\t * const game = {\n\t *  init: () => { }\n\t *  update: ( dt ) => { }\n\t *  render: () => { }\n\t * }\n\t *\n\t * @param {string} name - The name of the scene.\n\t * @param {object} gameObject - An object that includes init, update, and\n\t * render methods as well as other properties for the scene. If update and\n\t * render are set then these will be passed to `beep8.frame`.\n\t * @param {number} frameRate - The frame rate at which to update and render\n\t */\n\tbeep8.Scene.add = function( name, gameObject = null, frameRate = 30 ) {\n\n\t\tbeep8.Utilities.checkString( 'name', name );\n\n\t\tif ( gameObject !== null ) {\n\t\t\tbeep8.Utilities.checkObject( 'gameObject', gameObject );\n\t\t}\n\n\t\tbeep8.Utilities.checkInt( 'frameRate', frameRate );\n\n\t\tconst init = gameObject.init || null;\n\t\tconst update = gameObject.update || null;\n\t\tconst render = gameObject.render || null;\n\n\t\tsceneList[ name ] = { init, update, render, frameRate };\n\n\t};\n\n\n\t/**\n\t * Switches to a specified scene by name.\n\t *\n\t * @param {string} name - The name of the scene to switch to.\n\t */\n\tbeep8.Scene.set = function( name ) {\n\n\t\tbeep8.Utilities.checkString( 'name', name );\n\n\t\tif ( !sceneList[ name ] ) {\n\t\t\tbeep8.Utilities.fatal( `Scene \"${name}\" does not exist.` );\n\t\t}\n\n\t\t// Stop the current game loop.\n\t\tbeep8.Core.stopFrame();\n\n\t\t// Store the active scene.\n\t\tactiveScene = name;\n\n\t\t// Clear any inputs.\n\t\tif ( beep8.Input && typeof beep8.Input.onEndFrame === 'function' ) {\n\t\t\tbeep8.Input.onEndFrame();\n\t\t}\n\n\t\t// Get the scene object.\n\t\tconst currentScene = sceneList[ name ];\n\n\t\t// If there's an init method, call it.\n\t\tif ( currentScene.init ) {\n\t\t\tcurrentScene.init();\n\t\t}\n\n\t\t// If there's an update or render method, call frame to create a synchronous game.\n\t\tif ( currentScene.update || currentScene.render ) {\n\t\t\tbeep8.frame( currentScene.render, currentScene.update, currentScene.frameRate );\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Pauses the current scene.\n\t *\n\t * @param {string} name - The name of the scene to pause.\n\t * @returns {void}\n\t */\n\tbeep8.Scene.pause = function() {\n\n\t\tbeep8.frame( null );\n\n\t};\n\n\n\t/**\n\t * Resumes the current scene.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Scene.resume = function() {\n\n\t\t// If there's no active scene, do nothing.\n\t\tif ( !activeScene ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the currentScene.\n\t\tconst currentScene = sceneList[ activeScene ];\n\n\t\t// If there's an update or render method, call frame to create a synchronous game.\n\t\tif ( currentScene.update || currentScene.render ) {\n\t\t\tbeep8.frame(\n\t\t\t\tcurrentScene.render || ( () => { } ),\n\t\t\t\tcurrentScene.update || ( () => { } ),\n\t\t\t\tcurrentScene.frameRate || 30\n\t\t\t);\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Gets the current active scene.\n\t *\n\t * @returns {Object|null} The active scene object, or null if no scene is active.\n\t */\n\tbeep8.Scene.get = function() {\n\n\t\treturn activeScene;\n\n\t};\n\n\n\t/**\n\t * Gets all scenes.\n\t *\n\t * @returns {Object} All scenes.\n\t */\n\tbeep8.Scene.getAll = function() {\n\n\t\treturn sceneList;\n\n\t};\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t// Define the Renderer object inside beep8.\n\tbeep8.Renderer = {};\n\n\t// Has the screen updated.\n\tlet dirty = false;\n\n\t// Effects.\n\tlet screenshakeDuration = 0;\n\n\t// Variables for screen effects.\n\tlet vignetteGradient = null;\n\tlet scanPattern = null;\n\n\n\t/**\n\t * Initialization function that precomputes bloom and scanline ranges.\n\t *\n\t * @returns {void}\n\t */\n\tconst initCrt = () => {\n\n\t\tif ( !beep8.Core.realCtx ) {\n\t\t\tsetTimeout( initCrt, 10 );\n\t\t\treturn;\n\t\t}\n\n\t\t// A gradient for the vignette effect.\n\t\tvignetteGradient = beep8.Core.realCtx.createRadialGradient(\n\t\t\tbeep8.Core.realCanvas.width / 2,\n\t\t\tbeep8.Core.realCanvas.height / 2,\n\t\t\tMath.max( beep8.Core.realCanvas.width, beep8.Core.realCanvas.height ) * 0.4,\n\n\t\t\tbeep8.Core.realCanvas.width / 2,\n\t\t\tbeep8.Core.realCanvas.height / 2,\n\t\t\tMath.max( beep8.Core.realCanvas.width, beep8.Core.realCanvas.height ) * 0.9\n\t\t);\n\t\tvignetteGradient.addColorStop( 0, 'rgba(255,255,255,0)' );\n\t\tvignetteGradient.addColorStop( 0.7, 'rgba(0,0,0,0.5)' );\n\t\tvignetteGradient.addColorStop( 1, 'rgba(0,0,0,1)' );\n\n\t\t// tiny 2px device-pixel scanline pattern\n\t\tconst pat = new OffscreenCanvas( 1, 2 );\n\t\tconst patCtx = pat.getContext( '2d' );\n\t\tpatCtx.fillStyle = 'rgba(0,0,0,0.15)';\n\t\tpatCtx.fillRect( 0, 1, 1, 1 );\n\t\tpatCtx.fillStyle = 'rgba(255,255,255,0.0)';\n\t\tpatCtx.fillRect( 0, 0, 1, 1 );\n\t\tscanPattern = beep8.Core.realCtx.createPattern( pat, 'repeat' );\n\n\t}\n\n\tdocument.addEventListener( 'beep8.initComplete', initCrt );\n\n\n\t/**\n\t * Renders the screen.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Renderer.render = function() {\n\n\t\tif ( beep8.Core.crashed ) return;\n\n\t\tbeep8.Core.realCtx.imageSmoothingEnabled = false;\n\n\t\t// Canvas Drawing location.\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\t// Do screenshake.\n\t\tif ( screenshakeDuration > 0 ) {\n\n\t\t\tlet amount = screenshakeDuration * beep8.CONFIG.CHR_WIDTH;\n\n\t\t\tx = Math.round( ( Math.random() * amount ) - ( amount / 2 ) );\n\t\t\ty = Math.round( ( Math.random() * amount ) - ( amount / 2 ) );\n\n\t\t\tx = beep8.Utilities.clamp( x, -6, 6 );\n\t\t\ty = beep8.Utilities.clamp( y, -6, 6 );\n\n\t\t\tscreenshakeDuration -= beep8.Core.deltaTime;\n\n\t\t}\n\n\t\t// Reset real ctx composite mode.\n\t\tbeep8.Core.realCtx.globalCompositeOperation = 'source-over';\n\n\t\t// Clear the real canvas.\n\t\tbeep8.Core.realCtx.clearRect(\n\t\t\t0, 0,\n\t\t\tbeep8.Core.realCanvas.width,\n\t\t\tbeep8.Core.realCanvas.height\n\t\t);\n\n\t\t// Draw the offscreen canvas to the real canvas, scaling it up.\n\t\tbeep8.Core.realCtx.drawImage(\n\t\t\tbeep8.Core.offCanvas,\n\t\t\tx, y,\n\t\t\tbeep8.Core.realCanvas.width,\n\t\t\tbeep8.Core.realCanvas.height\n\t\t);\n\n\t\tdirty = false;\n\n\t\tbeep8.CursorRenderer.draw( beep8.Core.realCtx );\n\n\t\tapplyScanlines();\n\t\tapplyVignette();\n\n\t}\n\n\n\t/**\n\t * Applies a vignette effect to the screen.\n\t *\n\t * @returns {void}\n\t */\n\tconst applyVignette = () => {\n\n\t\tif ( !vignetteGradient ) return;\n\n\t\tif ( !beep8.CONFIG.CRT_ENABLE ) return;\n\n\t\tbeep8.Core.realCtx.save();\n\t\tbeep8.Core.realCtx.globalCompositeOperation = 'multiply';\n\t\tbeep8.Core.realCtx.fillStyle = vignetteGradient;\n\t\tbeep8.Core.realCtx.fillRect( 0, 0, beep8.Core.realCanvas.width, beep8.Core.realCanvas.height );\n\t\tbeep8.Core.realCtx.restore();\n\n\t};\n\n\n\t/**\n\t * Applies a scanline effect to the screen.\n\t *\n\t * @returns {void}\n\t */\n\tconst applyScanlines = () => {\n\n\t\tif ( !scanPattern ) return;\n\n\t\tif ( !beep8.CONFIG.CRT_ENABLE ) return;\n\n\t\tbeep8.Core.realCtx.save();\n\t\tbeep8.Core.realCtx.globalCompositeOperation = 'soft-light';\n\t\tbeep8.Core.realCtx.fillStyle = scanPattern;\n\t\tbeep8.Core.realCtx.fillRect( 0, 0, beep8.Core.realCanvas.width, beep8.Core.realCanvas.height );\n\t\tbeep8.Core.realCtx.restore();\n\n\t};\n\n\n\t/**\n\t * Triggers the screenshake effect.\n\t *\n\t * @param {number} durationSeconds - The duration of the screenshake effect in seconds.\n\t * @returns {boolean} Returns true if the screenshake effect was successfully triggered.\n\t */\n\tbeep8.Renderer.shakeScreen = function( durationSeconds = 0.25 ) {\n\n\t\tbeep8.Utilities.checkNumber( \"duration\", durationSeconds );\n\n\t\tif ( durationSeconds <= 0 ) {\n\t\t\tbeep8.Utilities.warn( `Screenshake duration must be positive. Currently: ${durationSeconds}` );\n\t\t\treturn false;\n\t\t}\n\n\t\tscreenshakeDuration = durationSeconds;\n\n\t\treturn true;\n\n\t}\n\n\n\t/**\n\t * Marks the screen as dirty, so it will be re-rendered on the next frame.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Renderer.markDirty = function() {\n\n\t\tif ( dirty ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdirty = true;\n\t\tsetTimeout( beep8.Renderer.render, 1 );\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Random = {};\n\n\t/**\n\t * The seed for the random number generator.\n\t *\n\t * @type {number}\n\t */\n\tlet randomSeed = null;\n\n\n\t/**\n\t * Sets the seed for the random number generator.\n\t * If the seed is null, the random number generator will reset to use the current time.\n\t *\n\t * @param {number|string} seed - The seed to use for the random number generator.\n\t * @returns {void}\n\t */\n\tbeep8.Random.setSeed = function( seed = null ) {\n\n\t\tif ( seed === null ) {\n\t\t\tseed = Date.now();\n\t\t}\n\n\t\t// Convert seed string to number.\n\t\tif ( typeof seed === \"string\" ) {\n\t\t\tseed = seed.split( \"\" ).reduce( ( a, b ) => a + b.charCodeAt( 0 ), 0 );\n\t\t}\n\n\t\t// Extra mixing step using xorshift.\n\t\tseed ^= seed << 13;\n\t\tseed ^= seed >> 17;\n\t\tseed ^= seed << 5;\n\t\tseed >>>= 0; // Ensure an unsigned 32-bit integer\n\n\t\t// Set the global seed value.\n\t\trandomSeed = seed;\n\n\t\t// Burn a few random numbers to mix up initial values.\n\t\tfor ( let i = 0; i < 10; i++ ) {\n\t\t\tbeep8.Random.num();\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Returns the seed for the random number generator.\n\t *\n\t * @returns {number} The seed for the random number generator.\n\t */\n\tbeep8.Random.getSeed = function() {\n\n\t\treturn randomSeed;\n\n\t}\n\n\n\t/**\n\t * Returns a random number between 0 and 1.\n\t *\n\t * @returns {number} A random number between 0 and 1.\n\t */\n\tbeep8.Random.num = function() {\n\n\t\tconst a = 1664525;\n\t\tconst c = 1013904223;\n\t\tconst m = 4294967296;\n\n\t\trandomSeed = ( randomSeed * a + c ) % m;\n\n\t\treturn randomSeed / m;\n\n\t}\n\n\n\t/**\n\t * Returns a random number (float) in the given closed interval.\n\t *\n\t * @param {number} min - The minimum value (inclusive).\n\t * @param {number} max - The maximum value (inclusive).\n\t * @returns {number} A random number between min and max.\n\t */\n\tbeep8.Random.range = function( min, max ) {\n\n\t\tbeep8.Utilities.checkNumber( \"min\", min );\n\t\tbeep8.Utilities.checkNumber( \"max\", max );\n\n\t\treturn min + beep8.Random.num() * ( max - min );\n\n\t}\n\n\n\t/**\n\t * Returns a random integer in the given closed interval.\n\t *\n\t * @param {number} min - The minimum value (inclusive).\n\t * @param {number} max - The maximum value (inclusive).\n\t * @returns {number} A random integer between min and max.\n\t */\n\tbeep8.Random.int = function( min, max ) {\n\n\t\tbeep8.Utilities.checkInt( \"min\", min );\n\t\tbeep8.Utilities.checkInt( \"max\", max );\n\n\t\t// Reverse max and min.\n\t\tif ( max <= min ) {\n\t\t\tconst tmp = max;\n\t\t\tmax = min;\n\t\t\tmin = tmp;\n\t\t}\n\n\t\tconst randomValue = beep8.Random.range( min, max );\n\t\treturn Math.round( randomValue );\n\n\t}\n\n\n\t/**\n\t * Returns a randomly picked element of the given array.\n\t *\n\t * @param {Array} array - The array to pick from.\n\t * @returns {any} A randomly picked element of the array, or null if the array is empty.\n\t */\n\tbeep8.Random.pick = function( array ) {\n\n\t\tbeep8.Utilities.checkArray( \"array\", array );\n\n\t\t// Pick a random number from 0 to array.length.\n\t\tconst index = beep8.Random.int( 0, array.length - 1 );\n\n\t\treturn array[ index ];\n\n\t}\n\n\n\tconst weightedArrayCache = new Map();\n\n\n\t/**\n\t * Returns a randomly picked element of the given array, with a weighted probability.\n\t *\n\t * @param {Array} array - The array to pick from, with each element repeated a number of times.\n\t * @param {number} decayFactor - The decay factor for the weighted array.\n\t * @returns {any} A randomly picked element of the array, or null if the array is empty.\n\t */\n\tbeep8.Random.pickWeighted = function( array, decayFactor = 0.2 ) {\n\n\t\tbeep8.Utilities.checkArray( \"array\", array );\n\n\t\t// Create a unique cache key based on the array and decayFactor\n\t\tconst cacheKey = JSON.stringify( array ) + `|${decayFactor}`;\n\n\t\t// Check if the weighted array is already cached\n\t\tlet weightedArray = weightedArrayCache.get( cacheKey );\n\n\t\tif ( !weightedArray ) {\n\t\t\tweightedArray = beep8.Random.weightedArray( array, decayFactor );\n\t\t\tweightedArrayCache.set( cacheKey, weightedArray );\n\t\t}\n\n\t\treturn beep8.Random.pick( weightedArray );\n\n\t};\n\n\n\t/**\n\t * Shuffles an array, randomly reordering the elements.\n\t * Does not modify the original array. Returns the shuffled array.\n\t *\n\t * @param {Array} array - The array to shuffle.\n\t * @returns {Array} The shuffled array.\n\t */\n\tbeep8.Random.shuffleArray = function( array ) {\n\n\t\tbeep8.Utilities.checkArray( \"array\", array );\n\n\t\tarray = array.slice();\n\n\t\tfor ( let i = 0; i < array.length; i++ ) {\n\t\t\tconst j = beep8.Random.int( 0, array.length - 1 );\n\t\t\tconst tmp = array[ i ];\n\t\t\tarray[ i ] = array[ j ];\n\t\t\tarray[ j ] = tmp;\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\n\t/**\n\t * Returns a random boolean value based upon the probability percentage provided.\n\t *\n\t * @param {number} probability - A percentage value between 0 and 100 representing the chance of returning true.\n\t * @returns {boolean} True with the specified probability, false otherwise.\n\t */\n\tbeep8.Random.chance = function( probability ) {\n\n\t\tbeep8.Utilities.checkNumber( \"probability\", probability );\n\n\t\treturn beep8.Random.num() <= ( probability / 100 );\n\n\t}\n\n\n\t/**\n\t * Returns a weighted array of elements.\n\t * The array uses a decay factor to determine the number of times each element should be repeated.\n\t *\n\t * @param {Array} array - The array to weight.\n\t * @param {number} decayFactor - The decay factor for the weighted array.\n\t * @returns {Array} The weighted array.\n\t */\n\tbeep8.Random.weightedArray = function( array, decayFactor = 0.2 ) {\n\n\t\tbeep8.Utilities.checkArray( \"array\", array );\n\n\t\tconst weightedArray = [];\n\n\t\tfor ( let i = 0; i < array.length; i++ ) {\n\t\t\tconst count = Math.pow( decayFactor, i ) * 10;\n\t\t\tfor ( let j = 0; j < count; j++ ) {\n\t\t\t\tweightedArray.push( array[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn weightedArray;\n\n\t}\n\n\n\t/**\n\t * Returns a consistent pseudo-random number between 0 and 1 for the given 2D coordinates and seed.\n\t * Uses a simple hash function to generate the number.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @param {number} seed - The seed value.\n\t * @returns {number} A pseudo-random number between 0 and 1.\n\t */\n\tbeep8.Random.coord2D = function( x, y, seed ) {\n\n\t\tlet h = 2166136261 ^ seed;\n\t\th = Math.imul( h ^ x, 16777619 );\n\t\th = Math.imul( h ^ y, 16777619 );\n\t\th ^= h >>> 13; h = Math.imul( h, 0x85ebca6b );\n\t\th ^= h >>> 16;\n\t\treturn ( h >>> 0 ) / 4294967296;\n\n\t}\n\n\n\t/**\n\t * Returns a smooth noise value between 0 and 1 for the given 2D coordinates and seed.\n\t * Uses bilinear interpolation between the corner values.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @param {number} seed - The seed value.\n\t * @param {number} freq - The frequency of the noise.\n\t * @returns {number} A smooth noise value between 0 and 1.\n\t */\n\tbeep8.Random.smooth2D = function( x, y, seed = 0, freq = 1 ) {\n\n\t\t// scale space to control feature size\n\t\tx *= freq;\n\t\ty *= freq;\n\n\t\tconst ix = Math.floor( x );\n\t\tconst iy = Math.floor( y );\n\t\tconst fx = x - ix;\n\t\tconst fy = y - iy;\n\n\t\t// corner values from your coord-based RNG\n\t\tconst v00 = beep8.Random.coord2D( ix, iy, seed );\n\t\tconst v10 = beep8.Random.coord2D( ix + 1, iy, seed );\n\t\tconst v01 = beep8.Random.coord2D( ix, iy + 1, seed );\n\t\tconst v11 = beep8.Random.coord2D( ix + 1, iy + 1, seed );\n\n\t\t// fade curves for smooth interpolation\n\t\tconst u = beep8.Math.fade( fx );\n\t\tconst v = beep8.Math.fade( fy );\n\n\t\t// bilinear interpolation\n\t\tconst i1 = beep8.Math.lerp( v00, v10, u );\n\t\tconst i2 = beep8.Math.lerp( v01, v11, u );\n\t\treturn beep8.Math.lerp( i1, i2, v );\n\n\t}\n\n\n\tbeep8.Random.setSeed();\n\n} )( beep8 );\n\n\n( function( beep8 ) {\n\n\tbeep8.Passcodes = {};\n\n\n\t/**\n\t * The length of the level passcodes.\n\t *\n\t * @type {number}\n\t */\n\tbeep8.Passcodes.codeLength = 4;\n\n\n\t/**\n\t * Function to generate a passcode for a given id.\n\t * This is intended for level passcodes.\n\t *\n\t * @param {string} id - The id to generate a code for.\n\t * @returns {string} The generated code.\n\t */\n\tbeep8.Passcodes.getCode = function( id ) {\n\n\t\tbeep8.Utilities.checkIsSet( \"id\", id );\n\n\t\t// Combine the id and secret key for uniqueness.\n\t\tconst combined = id + beep8.CONFIG.PASSKEY;\n\n\t\t// Generate hash of the combined string.\n\t\tlet hash = hashString( combined );\n\n\t\t// Remove non-alphabetic characters and convert to uppercase.\n\t\thash = hash.replace( /[^a-zA-Z]/g, '' );\n\t\thash = hash.toUpperCase(); // Convert to uppercase\n\n\t\t// Return the first 'codeLength' characters.\n\t\treturn hash.substring( 0, beep8.Passcodes.codeLength );\n\n\t}\n\n\n\t/**\n\t * Function to check if a given code is valid for a given id.\n\t *\n\t * @param {string} id - The id to check the code for.\n\t * @param {string} code - The code to check.\n\t * @returns {boolean} True if the code is valid, false otherwise.\n\t */\n\tbeep8.Passcodes.checkCode = function( id, code ) {\n\n\t\tbeep8.Utilities.checkIsSet( \"id\", id );\n\t\tbeep8.Utilities.checkString( \"code\", code );\n\n\t\tconst generatedCode = beep8.Passcodes.getCode( id );\n\t\treturn generatedCode === code;\n\n\t}\n\n\n\t/**\n\t * Function to work out the id from the code.\n\t *\n\t * @param {string} code - The code to get the id for.\n\t * @returns {int} The id for the code.\n\t */\n\tbeep8.Passcodes.getId = function( code ) {\n\n\t\tbeep8.Utilities.checkString( \"code\", code );\n\n\t\t// Loop through all levels to find a match.\n\t\tcode = code.toUpperCase();\n\t\tfor ( c = 1; c < 999; c++ ) {\n\t\t\tif ( beep8.Passcodes.checkCode( c, code ) ) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\n\t\t// Return null if no match is found.\n\t\treturn null;\n\n\t}\n\n\n\t/**\n\t * Display a dialog to accept a passcode. This is automatically centered on\n\t * the screen.\n\t *\n\t * The level id of the specified passcode is returned as an integer.\n\t *\n\t * This can be coloured with the standard beep8.color function.\n\t *\n\t * @returns {number|null} The level id of the passcode.\n\t */\n\tbeep8.Passcodes.input = async function() {\n\n\t\tconst message = 'Enter code:';\n\t\tconst width = message.length + 2 + 2;\n\t\tconst height = 6;\n\n\t\tlet xPosition = Math.round( ( beep8.CONFIG.SCREEN_COLS - width ) / 2 );\n\t\tlet yPosition = Math.round( ( beep8.CONFIG.SCREEN_ROWS - height ) / 2 );\n\n\t\tbeep8.Core.setCursorLocation( xPosition, yPosition );\n\t\tbeep8.TextRenderer.printBox( width, height );\n\n\t\tbeep8.Core.setCursorLocation( xPosition + 2, yPosition + 2 );\n\t\tbeep8.TextRenderer.print( message + \"\\n>\" );\n\n\t\tconst passcode = await beep8.Async.readLine( \"\", beep8.Passcodes.codeLength );\n\t\tconst value = beep8.Passcodes.getId( passcode );\n\n\t\treturn value;\n\n\t}\n\n\n\t/**\n\t * Function to hash a string.\n\t *\n\t * @param {string} input - The string to hash.\n\t * @returns {string} The hashed string.\n\t */\n\tfunction hashString( input ) {\n\n\t\tinput = btoa( input );\n\t\tlet hash = 0;\n\t\tlet result = '';\n\n\t\t// Loop to hash the input string.\n\t\tfor ( let i = 0; i < input.length; i++ ) {\n\t\t\thash = ( hash << 5 ) - hash + input.charCodeAt( i );\n\t\t\thash = hash & hash; // Convert to 32bit integer\n\t\t}\n\n\t\t// Loop to extend the length of the result by rehashing.\n\t\t// Adjust to control string length.\n\t\tfor ( let j = 0; j < 5; j++ ) {\n\t\t\thash = ( hash << 5 ) - hash + beep8.CONFIG.PASSKEY.charCodeAt( j % beep8.CONFIG.PASSKEY.length );\n\t\t\t// Append base-36 to the result.\n\t\t\tresult += Math.abs( hash ).toString( 36 );\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * beep8.Particles handles particles.\n\t */\n\tbeep8.Particles = {};\n\n\t// Private particle array.\n\tlet particles_ = [];\n\n\n\t/**\n\t * Adds a new particle to the system.\n\t *\n\t * Each particle is an object with properties:\n\t * - x, y: position,\n\t * - vx, vy: velocity (pixels per second, default=0),\n\t * - life: remaining life time (seconds, default=1),\n\t * - size: square size (pixels, default=1),\n\t * - color: fill color (a beep8 palette id, default=15).\n\t * - gravity: gravity (pixels per second, default=0).\n\t *\n\t * @param {object} particle - The particle object to add.\n\t * @returns {void}\n\t */\n\tbeep8.Particles.add = function( x, y, props ) {\n\n\t\tbeep8.Utilities.checkNumber( 'x', x );\n\t\tbeep8.Utilities.checkNumber( 'y', y );\n\t\tbeep8.Utilities.checkObject( 'props', props );\n\n\t\tconst defaults = {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tvx: 0,\n\t\t\tvy: 0,\n\t\t\tlife: 1,\n\t\t\tsize: 1,\n\t\t\tcolor: 15,\n\t\t\tgravity: 0,\n\t\t}\n\n\t\tconst newParticle = Object.assign( {}, defaults, props );\n\n\t\t// Particle Color.\n\t\tif ( Array.isArray( newParticle.color ) ) {\n\t\t\tnewParticle.color = beep8.Random.pick( newParticle.color );\n\t\t}\n\n\t\t// Particle Size.\n\t\tif ( Array.isArray( newParticle.size ) ) {\n\t\t\tnewParticle.size = beep8.Random.pick( newParticle.size );\n\t\t}\n\n\t\tparticles_.push( newParticle );\n\n\t};\n\n\n\t/**\n\t * Adds an explosion of particles to the system.\n\t *\n\t * The explosion is created at the x, y position with a number of particles.\n\t *\n\t * The optional properties include:\n\t * - size: The size of the particles (in pixels, default=1).\n\t * - color: The color of the particles (a beep8 palette id, default=fgColor).\n\t * - life: The life of the particles (in seconds, default=2).\n\t * - speed: The speed of the particles (in pixels per second, default=25).\n\t * - gravity: The gravity of the particles (in pixels per second, default=0).\n\t *\n\t * @param {number} x - The x position of the explosion.\n\t * @param {number} y - The y position of the explosion.\n\t * @param {number} count - The number of particles to add.\n\t * @param {object} props - The properties of the explosion.\n\t * @returns {void}\n\t */\n\tbeep8.Particles.createExplosion = function( x, y, count = 10, props = {} ) {\n\n\t\tbeep8.Utilities.checkNumber( 'x', x );\n\t\tbeep8.Utilities.checkNumber( 'y', y );\n\t\tbeep8.Utilities.checkNumber( 'count', count );\n\t\tbeep8.Utilities.checkObject( 'props', props );\n\n\t\tconst defaults = {\n\t\t\tsize: 1,\n\t\t\tcolor: beep8.Core.drawState.fgColor,\n\t\t\tlife: 2,\n\t\t\tspeed: 25,\n\t\t\tgravity: 0,\n\t\t};\n\n\t\tconst newExplosion = Object.assign( {}, defaults, props );\n\n\t\tfor ( let i = 0; i < count; i++ ) {\n\n\t\t\tconst angle = beep8.Random.range( 0, Math.PI * 2 );\n\t\t\tconst speed = beep8.Random.range( newExplosion.speed / 2, newExplosion.speed );\n\n\t\t\tbeep8.Particles.add(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\t{\n\t\t\t\t\tsize: newExplosion.size,\n\t\t\t\t\tcolor: newExplosion.color,\n\t\t\t\t\tlife: newExplosion.life,\n\t\t\t\t\tvx: Math.cos( angle ) * speed,\n\t\t\t\t\tvy: Math.sin( angle ) * speed,\n\t\t\t\t\tg: newExplosion.gravity,\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Updates all particles.\n\t *\n\t * If you are using Beep8 scenes or the Beep8 game loop (doframe) then this\n\t * is called automatically and you don't need to call it manually.\n\t *\n\t * @param {number} dt - Delta time to update particle movement.\n\t * @returns {void}\n\t */\n\tbeep8.Particles.update = function( dt ) {\n\n\t\t// Loop backwards to allow for removal.\n\t\tfor ( let i = particles_.length - 1; i >= 0; i-- ) {\n\n\t\t\tconst p = particles_[ i ];\n\t\t\t// Apply gravity.\n\t\t\tp.vy += ( p.g * dt );\n\t\t\t// Update position based on velocity.\n\t\t\tp.x += p.vx * dt;\n\t\t\tp.y += p.vy * dt;\n\t\t\t// Decrease life.\n\t\t\tp.life -= dt;\n\n\t\t\t// Remove particle if life expired.\n\t\t\tif ( p.life <= 0 ) {\n\t\t\t\tparticles_.splice( i, 1 );\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Renders all particles as squares.\n\t *\n\t * This should be called in your render method. This is not called\n\t * automatically which allows you to control the draw order.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Particles.render = function() {\n\n\t\tfor ( let i = 0; i < particles_.length; i++ ) {\n\n\t\t\tconst p = particles_[ i ];\n\t\t\tconst center = p.size / 2;\n\n\t\t\t// Draw the square particle with p.x, p.y at the center.\n\t\t\tbeep8.Core.offCtx.fillStyle = beep8.Core.getColorHex( p.color );\n\t\t\tbeep8.Core.offCtx.fillRect( Math.round( p.x - center ), Math.round( p.y - center ), Math.round( p.size ), Math.round( p.size ) );\n\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Clears all particles from the system.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Particles.clearAll = function() {\n\n\t\tparticles_ = [];\n\n\t};\n\n\n\t/**\n\t * Returns the particles array.\n\t *\n\t * This is useful for debugging or if you want to manipulate the particles\n\t * directly.\n\t *\n\t * @returns {array} The particles array.\n\t */\n\tbeep8.Particles.getParticles = function() {\n\n\t\treturn [ ...particles_ ];\n\n\t};\n\n\n\t/**\n\t * Sets the particles array.\n\t *\n\t * Can be used with Particles.getParticles to manipulate the particles directly.\n\t *\n\t * @param {array} particles - The particles array.\n\t * @returns {void}\n\t */\n\tbeep8.Particles.setParticles = function( particles ) {\n\n\t\tbeep8.Utilities.checkArray( 'particles', particles );\n\n\t\tparticles_ = particles;\n\n\t};\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tlet timeHidden = 0;\n\tlet isHidden = false;\n\n\n\t/**\n\t * Called when the document is hidden (blurred).\n\t *\n\t * @returns {void}\n\t */\n\tfunction sleep() {\n\n\t\tif ( isHidden ) return;\n\n\t\tisHidden = true;\n\n\t\t// Document is hidden (blurred) so start the timer.\n\t\ttimeHidden = Date.now();\n\n\t\t// Log the event and notify listeners.\n\t\tbeep8.Utilities.event( 'pageVisibility.sleep' );\n\n\t};\n\n\n\t/**\n\t * Called when the document is shown (focused).\n\t *\n\t * @returns {void}\n\t */\n\tfunction wake() {\n\n\t\tif ( !isHidden ) return;\n\t\tisHidden = false;\n\n\t\tif ( timeHidden === 0 ) return;\n\n\t\t// Document is shown again so the timer is stopped and totalled.\n\t\tconst timeAsleep = Date.now() - timeHidden;\n\t\tbeep8.Utilities.log( 'Time asleep:', ( timeAsleep / 1000 ).toFixed( 3 ) );\n\t\tbeep8.Utilities.event( 'pageVisibility.wake', { time: timeAsleep } );\n\t\ttimeHidden = 0;\n\n\t}\n\n\n\t// Set an event when the document loses focus (change tab/ window).\n\tdocument.addEventListener(\n\t\t'visibilitychange',\n\t\tfunction() {\n\n\t\t\tif ( document.hidden ) {\n\t\t\t\tsleep();\n\t\t\t} else {\n\t\t\t\twake();\n\t\t\t}\n\n\t\t}\n\t);\n\n\twindow.addEventListener( 'blur', () => sleep() );\n\twindow.addEventListener( 'focus', () => wake() );\n\n} )( beep8 );\n/**\n * beep8 Music Module\n * This module handles the creation, manipulation, and playback of procedurally generated music.\n */\n( function( beep8 ) {\n\n\tbeep8.Music = {};\n\n\n\t/**\n\t * Calls a function n times and collects the results in an array.\n\t *\n\t * @param {number} n - Number of times to call the function.\n\t * @param {function(number): any} fn - Function to be called with the current index.\n\t * @returns {Array<any>} An array of results.\n\t */\n\tfunction times( n, fn ) {\n\n\t\tvar result = [];\n\t\tfor ( var i = 0; i < n; i++ ) {\n\t\t\tresult.push( fn( i ) );\n\t\t}\n\t\treturn result;\n\n\t}\n\n\n\t// --- p1.js Note Conversion ---\n\n\t// p1.js supports 52 keys using these 52 characters.\n\tconst p1Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n\n\t/**\n\t * Converts a note string (e.g. \"C4\" or \"D#4\") to a MIDI note number.\n\t * Expects a format: letter, optional accidental (# or b), then octave digit.\n\t *\n\t * @param {string} note - The musical note string.\n\t * @returns {number|null} The MIDI note number, or null if the note format is invalid.\n\t */\n\tfunction noteToMidi( note ) {\n\n\t\tvar regex = /^([A-Ga-g])([#b]?)(\\d)$/;\n\t\tvar match = note.match( regex );\n\n\t\tif ( !match ) return null;\n\n\t\tvar letter = match[ 1 ].toUpperCase();\n\t\tvar accidental = match[ 2 ];\n\t\tvar octave = parseInt( match[ 3 ], 10 );\n\n\t\t// Map letter to its base semitone number.\n\t\tvar semitones = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 }[ letter ];\n\t\tif ( accidental === \"#\" ) {\n\t\t\tsemitones += 1;\n\t\t} else if ( accidental === \"b\" ) {\n\t\t\tsemitones -= 1;\n\t\t}\n\n\t\t// MIDI formula: (octave + 1) * 12 + semitones.\n\t\treturn ( octave + 1 ) * 12 + semitones;\n\n\t}\n\n\n\t/**\n\t * Converts a musical note (e.g. \"C4\" or \"D#4\") to a p1.js note letter.\n\t * The MIDI note is clamped to the range [36, 87] before conversion.\n\t *\n\t * @param {string} note - The musical note string.\n\t * @returns {string} The corresponding p1.js letter, or \"?\" if invalid.\n\t */\n\tfunction noteToP1( note ) {\n\n\t\tlet midi = noteToMidi( note );\n\n\t\tif ( midi === null ) return \"?\";\n\n\t\tmidi = beep8.Utilities.clamp( midi, 36, 87 );\n\n\t\treturn p1Alphabet.charAt( midi - 36 );\n\n\t}\n\n\n\t/**\n\t * Compresses an array of note characters by replacing consecutive repeats\n\t * (except for spaces and bars) with dashes to indicate sustained notes.\n\t *\n\t * @param {Array<string>} arr - Array of note characters.\n\t * @returns {string} Compressed note string.\n\t */\n\tfunction compressNotes( arr ) {\n\n\t\tif ( arr.length === 0 ) return \"\";\n\n\t\tvar result = arr[ 0 ];\n\n\t\tfor ( var i = 1; i < arr.length; i++ ) {\n\t\t\tif ( arr[ i ] === arr[ i - 1 ] && arr[ i ] !== \" \" && arr[ i ] !== \"|\" ) {\n\t\t\t\tresult += \"-\";\n\t\t\t} else {\n\t\t\t\tresult += arr[ i ];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\n\t/**\n\t * Creates a random boolean pattern of a given length.\n\t * The pattern is modified several times with segment reversals.\n\t *\n\t * @param {number} len - The length of the pattern.\n\t * @param {number} freq - Frequency parameter for reversals.\n\t * @param {number} interval - Initial interval for segmentation.\n\t * @param {number} loop - Number of times to modify the pattern.\n\t * @returns {Array<boolean>} The generated pattern.\n\t */\n\tfunction createRandomPattern( len, freq, interval, loop ) {\n\n\t\tvar pattern = times(\n\t\t\tlen,\n\t\t\tfunction() {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t);\n\n\t\tfor ( var i = 0; i < loop; i++ ) {\n\t\t\tif ( interval > len ) break;\n\t\t\tpattern = reversePattern( pattern, interval, freq );\n\t\t\tinterval *= 2;\n\t\t}\n\n\t\treturn pattern;\n\n\t}\n\n\n\t/**\n\t * Reverses segments of a boolean pattern based on a randomly generated toggle pattern.\n\t *\n\t * @param {Array<boolean>} pattern - The original boolean pattern.\n\t * @param {number} interval - The segment length.\n\t * @param {number} freq - Frequency of toggling within the segment.\n\t * @returns {Array<boolean>} The modified pattern.\n\t */\n\tfunction reversePattern( pattern, interval, freq ) {\n\n\t\tvar pt = times(\n\t\t\tinterval,\n\t\t\tfunction() {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t);\n\n\t\tfor ( var i = 0; i < freq; i++ ) {\n\t\t\tpt[ beep8.Random.int( 0, interval - 1 ) ] = true;\n\t\t}\n\n\t\treturn pattern.map(\n\t\t\tfunction( p, i ) {\n\t\t\t\treturn pt[ i % interval ] ? !p : p;\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t// --- Chord Progression Generation ---\n\n\n\t/**\n\t * Available chord progressions represented in Roman numerals.\n\t *\n\t * @type {Array<Array<string>>}\n\t */\n\tconst chords = [\n\t\t[ \"I\", \"IIIm\", \"VIm\" ],\n\t\t[ \"IV\", \"IIm\" ],\n\t\t[ \"V\", \"VIIm\" ]\n\t];\n\n\n\t/**\n\t * Mapping of next chord progression indices.\n\t *\n\t * @type {Array<Array<number>>}\n\t */\n\tconst nextChordsIndex = [\n\t\t[ 0, 1, 2 ],\n\t\t[ 1, 2, 0 ],\n\t\t[ 2, 0 ]\n\t];\n\n\n\t/**\n\t * Chord mapping for key C.\n\t *\n\t * @type {Object<string, Array<string>>}\n\t */\n\tconst chordMap = {\n\t\tI: [ \"C4\", \"E4\", \"G4\", \"B4\" ],\n\t\tIIIm: [ \"E4\", \"G4\", \"B4\", \"D5\" ],\n\t\tVIm: [ \"A3\", \"C4\", \"E4\", \"G4\" ],\n\t\tIV: [ \"F4\", \"A4\", \"C5\", \"E5\" ],\n\t\tIIm: [ \"D4\", \"F4\", \"A4\", \"C5\" ],\n\t\tV: [ \"G3\", \"B3\", \"D4\", \"F4\" ],\n\t\tVIIm: [ \"B3\", \"D4\", \"F4\", \"A4\" ]\n\t};\n\n\n\t/**\n\t * Mapping of key shifts for transposition.\n\t *\n\t * @type {Object<string, number>}\n\t */\n\tconst keyShift = {\n\t\tC: 0,\n\t\tD: 2,\n\t\tEb: 3,\n\t\tF: 5,\n\t\tG: 7,\n\t\tA: 9,\n\t\tBb: 10\n\t};\n\n\n\t/**\n\t * Available instrument options.\n\t *\n\t * @type {Array<number>}\n\t */\n\tconst instrumentOptions = [ 0, 1, 2, 3, 4, 5 ];\n\n\tconst drumOptions = [ 6, 7 ];\n\n\n\t/**\n\t * Gets the chord notes for a given key, Roman numeral, and octave.\n\t *\n\t * @param {string} key - The musical key (e.g., \"C\").\n\t * @param {string} roman - The Roman numeral chord identifier (e.g., \"I\", \"IIIm\").\n\t * @returns {Array<string>} An array of chord note strings.\n\t */\n\tfunction getChordNotes( key, roman ) {\n\n\t\tconst base = chordMap[ roman ] || chordMap.I;\n\t\tconst shift = keyShift[ key ] || 0;\n\n\t\treturn base.map(\n\t\t\tfunction( note ) {\n\t\t\t\treturn transpose( note, shift );\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Transposes a note by a specified number of semitones.\n\t *\n\t * @param {string} note - The note to transpose (e.g., \"C4\").\n\t * @param {number} shift - The number of semitones to shift.\n\t * @returns {string} The transposed note.\n\t */\n\tfunction transpose( note, shift ) {\n\n\t\tvar midi = noteToMidi( note );\n\t\tif ( midi === null ) {\n\t\t\treturn note;\n\t\t}\n\n\t\tmidi += shift;\n\t\tvar octave = Math.floor( midi / 12 ) - 1;\n\t\tvar index = midi % 12;\n\t\tvar noteNames = [ \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\" ];\n\n\t\treturn noteNames[ index ] + octave;\n\n\t}\n\n\n\t/**\n\t * Generates a chord progression as an array of chord note arrays.\n\t *\n\t * @param {number} len - The number of segments in the progression.\n\t * @returns {Array<Array<string>>} The chord progression.\n\t */\n\tfunction generateChordProgression( len ) {\n\n\t\tvar keys = [ \"C\", \"D\", \"Eb\", \"F\", \"G\", \"A\", \"Bb\" ];\n\t\tvar key = beep8.Random.pick( keys );\n\t\tvar chordChangeInterval = 4;\n\t\tvar currentRoman = null;\n\t\tvar chordsIndex = 0;\n\t\tvar progression = [];\n\n\t\tfor ( var i = 0; i < len; i++ ) {\n\t\t\tif ( i % chordChangeInterval === 0 ) {\n\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\tchordsIndex = beep8.Random.int( 0, chords.length - 1 );\n\t\t\t\t\tcurrentRoman = beep8.Random.pick( chords[ chordsIndex ] );\n\t\t\t\t} else if (\n\t\t\t\t\tbeep8.Random.num() <\n\t\t\t\t\t0.8 - ( ( i / chordChangeInterval ) % 2 ) * 0.5\n\t\t\t\t) {\n\t\t\t\t\tchordsIndex = beep8.Random.pick( nextChordsIndex[ chordsIndex ] );\n\t\t\t\t\tcurrentRoman = beep8.Random.pick( chords[ chordsIndex ] );\n\t\t\t\t}\n\t\t\t\tvar currentChord = getChordNotes( key, currentRoman );\n\t\t\t}\n\n\t\t\tprogression.push( currentChord );\n\n\t\t}\n\n\t\treturn progression;\n\n\t}\n\n\n\t// --- p1.js Music String Generators ---\n\n\t/**\n\t * Generates a melody note string based on note length and chord progression.\n\t *\n\t * @param {number} noteCount - The number of beats/positions.\n\t * @param {Array<Array<string>>} chordProgressionNotes - The chord progression notes.\n\t * @returns {string} The compressed melody note string.\n\t */\n\tfunction generateMelodyNote( noteCount, chordProgressionNotes ) {\n\n\t\tvar notes = [ beep8.Random.pick( instrumentOptions ), '|' ];\n\t\tvar pattern = createRandomPattern( noteCount, 4, 8, 3 );\n\t\tvar octaveOffset = beep8.Random.int( -1, 1 );\n\n\t\tfor ( var i = 0; i < noteCount; i++ ) {\n\n\t\t\t// Occasionally adjust the octave offset.\n\t\t\tif ( beep8.Random.chance( 10 ) ) {\n\t\t\t\toctaveOffset += beep8.Random.int( -1, 1 );\n\t\t\t}\n\n\t\t\t// Add a rest if no note should be played.\n\t\t\tif ( !pattern[ i ] ) {\n\t\t\t\tnotes.push( \" \" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar chordNotes = chordProgressionNotes[ i ];\n\t\t\t// Select a random note from the chord.\n\t\t\tvar ns = chordNotes[ beep8.Random.int( 0, chordNotes.length - 1 ) ];\n\t\t\tvar baseOctave = parseInt( ns.slice( -1 ), 10 );\n\t\t\t// Clamp the octave so it fits within p1.js range (3 to 6).\n\t\t\tvar newOctave = beep8.Utilities.clamp( baseOctave + octaveOffset, 3, 6 );\n\t\t\tvar noteName = ns.slice( 0, -1 ).toUpperCase();\n\t\t\tvar finalNote = noteName + newOctave;\n\t\t\tvar p1Note = noteToP1( finalNote );\n\t\t\tnotes.push( p1Note );\n\n\t\t}\n\n\t\tnotes.push( '|' );\n\n\t\treturn compressNotes( notes );\n\n\t}\n\n\n\t/**\n\t * Generates a chord or arpeggio note string based on note length and chord progression.\n\t *\n\t * @param {number} noteCount - The number of beats/positions.\n\t * @param {Array<Array<string>>} chordProgressionNotes - The chord progression notes.\n\t * @returns {string} The compressed chord/arpeggio note string.\n\t */\n\tfunction generateChordNote( noteCount, chordProgressionNotes ) {\n\n\t\tconst notes = [ beep8.Random.pick( instrumentOptions ), '|' ];\n\n\t\tvar isArpeggio = beep8.Random.chance( 30 );\n\t\tvar arpeggioInterval = beep8.Random.pick( [ 4, 8, 16 ] );\n\t\tvar arpeggioPattern = times(\n\t\t\tarpeggioInterval,\n\t\t\tfunction() {\n\t\t\t\treturn beep8.Random.int( 0, 3 );\n\t\t\t}\n\t\t);\n\n\t\tvar interval = beep8.Random.pick( [ 2, 4, 8 ] );\n\t\tvar pattern = isArpeggio\n\t\t\t? times(\n\t\t\t\tnoteCount,\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t)\n\t\t\t: createRandomPattern( noteCount, beep8.Random.pick( [ 1, 1, interval / 2 ] ), interval, 2 );\n\n\t\tvar baseOctave = beep8.Random.int( -1, 1 );\n\t\tvar isReciprocatingOctave = beep8.Random.chance( isArpeggio ? 30 : 80 );\n\t\tvar octaveOffset = 0;\n\n\t\tfor ( var i = 0; i < noteCount; i++ ) {\n\n\t\t\t// Adjust octave offset at set intervals.\n\t\t\tif ( isReciprocatingOctave && i % interval === 0 ) {\n\t\t\t\toctaveOffset = ( octaveOffset + 1 ) % 2;\n\t\t\t}\n\n\t\t\t// Insert a rest if no note is scheduled.\n\t\t\tif ( !pattern[ i ] ) {\n\t\t\t\tnotes.push( \" \" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar chordNotes = chordProgressionNotes[ i ];\n\t\t\tvar noteIndex = isArpeggio ? arpeggioPattern[ i % arpeggioInterval ] : 0;\n\t\t\tvar ns = chordNotes[ noteIndex ];\n\t\t\tvar baseOct = parseInt( ns.slice( -1 ), 10 );\n\t\t\tvar newOct = beep8.Utilities.clamp( baseOct + baseOctave + octaveOffset, 3, 6 );\n\t\t\tvar noteName = ns.slice( 0, -1 ).toUpperCase();\n\t\t\tvar finalNote = noteName + newOct;\n\t\t\tvar p1Note = noteToP1( finalNote );\n\t\t\tnotes.push( p1Note );\n\n\t\t}\n\n\t\tnotes.push( '|' );\n\n\t\treturn compressNotes( notes );\n\n\t}\n\n\n\t/**\n\t * Generates a drum note string for a given note length.\n\t *\n\t * @param {number} noteCount - The number of beats/positions.\n\t * @returns {string} The compressed drum note string.\n\t */\n\tfunction generateDrumNote( noteCount ) {\n\n\t\t// Pick an instrument and add the starting pipe.\n\t\tconst notes = [ beep8.Random.pick( drumOptions ), '|' ];\n\n\t\t// Create a random pattern for drum hits.\n\t\tconst pattern = createRandomPattern(\n\t\t\tnoteCount,\n\t\t\tbeep8.Random.int( 1, 3 ),\n\t\t\tbeep8.Random.pick( [ 4, 8 ] ),\n\t\t\t3\n\t\t);\n\n\t\t// Fixed drum hit note (using \"C4\" converted to p1.js).\n\t\tvar drumHit = noteToP1( \"C4\" );\n\t\tfor ( var i = 0; i < noteCount; i++ ) {\n\t\t\tnotes.push( pattern[ i ] ? drumHit : \" \" );\n\t\t}\n\n\t\tnotes.push( '|' );\n\n\t\treturn compressNotes( notes );\n\n\t}\n\n\n\t/**\n\t * Generates multi-track music in p1.js format.\n\t * It creates a chord progression and then generates various parts (melody, chord, or drum).\n\t * Optionally prepends tempo and hold information to the first part.\n\t *\n\t * @param {Object} [options] - Options for music generation.\n\t * @param {number} [options.seed] - Random seed.\n\t * @param {number} [options.noteCount] - Number of beats/positions.\n\t * @param {number} [options.channelCount] - Number of parts to generate.\n\t * @param {number} [options.drumPartRatio] - Ratio of parts to be drums.\n\t * @param {number|null} [options.tempo] - Tempo in BPM. If null, tempo info is omitted.\n\t * @param {number|null} [options.hold] - Hold duration. If null, hold info is omitted.\n\t * @returns {string} The generated multi-track music string.\n\t */\n\tbeep8.Music.generate = function( options ) {\n\n\t\tif ( options && options.seed ) {\n\t\t\tbeep8.Random.setSeed( options.seed );\n\t\t}\n\n\t\t/**\n\t\t * Default options for the music generator.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tconst defaultOptions = {\n\t\t\tseed: beep8.Random.int( 10000, 99999 ),\n\t\t\tnoteCount: beep8.Random.pick( [ 16, 32, 48, 64 ] ),\n\t\t\tchannelCount: beep8.Random.int( 2, 5 ),\n\t\t\tdrumPartRatio: 0.3,\n\t\t\ttempo: beep8.Random.pick( [ 70, 100, 140, 170, 200, 240, 280 ] ), // Default tempo (BPM).\n\t\t\thold: beep8.Random.pick( [ 40, 50, 60, 60, 70, 70, 70, 80, 80, 80, 80, 90, 90, 90, 100, 110, 120, 130, 140, 150 ] )    // Default hold duration.\n\t\t};\n\n\t\t// Merge default options with provided options.\n\t\tconst opts = Object.assign( {}, defaultOptions, options );\n\n\t\tbeep8.Music.currentSongProperties = opts;\n\n\t\tbeep8.Random.setSeed( opts.seed );\n\t\tvar chordProgressionNotes = generateChordProgression( opts.noteCount );\n\t\tvar parts = times(\n\t\t\topts.channelCount,\n\t\t\tfunction() {\n\t\t\t\tvar isDrum = beep8.Random.num() < opts.drumPartRatio;\n\t\t\t\tif ( isDrum ) {\n\t\t\t\t\treturn generateDrumNote( opts.noteCount );\n\t\t\t\t} else {\n\t\t\t\t\tif ( beep8.Random.num() < 0.5 ) {\n\t\t\t\t\t\treturn generateMelodyNote( opts.noteCount, chordProgressionNotes );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn generateChordNote( opts.noteCount, chordProgressionNotes );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// Prepend tempo (and hold) information to the first part if provided.\n\t\tif ( opts.tempo !== null ) {\n\t\t\tvar tempoStr = String( opts.tempo );\n\t\t\tif ( opts.hold !== null ) {\n\t\t\t\ttempoStr += \".\" + String( opts.hold );\n\t\t\t}\n\t\t\tparts[ 0 ] = tempoStr + \"\\n\" + parts[ 0 ];\n\t\t}\n\n\t\t// Join all parts with a newline so p1.js can play multi-track music.\n\t\treturn parts.join( \"\\n\" );\n\n\t}\n\n\n\t// Store the currently playing song so it can be started again after pausing.\n\tlet currentSong = null;\n\n\n\t/**\n\t * Plays a p1.js music string.\n\t *\n\t * @param {string} song - The music string to play.\n\t * @returns {void}\n\t */\n\tbeep8.Music.play = function( song ) {\n\n\t\tp1( song );\n\n\t\tif ( song ) {\n\t\t\tcurrentSong = song;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Stops the current music playback.\n\t * If `clearCurrentSong` is true, it will also clear the current song reference.\n\t * This is disabled when the music is paused to allow resuming playback.\n\t *\n\t * @param {boolean} [clearCurrentSong=true] - Whether to clear the current song reference.\n\t * @returns {void}\n\t */\n\tbeep8.Music.stop = function( clearCurrentSong = true ) {\n\n\t\t// Clear the currently stored song.\n\t\tbeep8.Utilities.checkBoolean( \"clearCurrentSong\", clearCurrentSong );\n\t\tif ( clearCurrentSong ) currentSong = null;\n\n\t\t// Stop the music playback.\n\t\tbeep8.Music.play( \"\" );\n\n\t}\n\n\n\t/**\n\t * Pauses the current music playback.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Music.pause = function() {\n\n\t\tif ( beep8.Music.isPlaying() ) {\n\t\t\tbeep8.Music.stop( false );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Resumes the current music playback.\n\t *\n\t * If a song is currently playing, it will continue from where it left off.\n\t * If no song is playing, it will do nothing.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Music.resume = function() {\n\n\t\t// If there is a current song and it is not playing, resume playback.\n\t\tif ( currentSong && !beep8.Music.isPlaying() ) {\n\t\t\tbeep8.Music.play( currentSong );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Sets the volume for the music playback.\n\t *\n\t * @param {number} volume - The volume level (0 to 1).\n\t * @returns {void}\n\t */\n\tbeep8.Music.setVolume = function( volume ) {\n\n\t\tbeep8.Utilities.checkNumber( \"volume\", volume );\n\n\t\tp1.setVolume( volume );\n\n\t}\n\n\n\t/**\n\t * Set the tempo of a currently playing song.\n\t *\n\t * @param {number} tempo - The new tempo in BPM.\n\t * @returns {void}\n\t */\n\tbeep8.Music.setTempo = function( tempo ) {\n\n\t\tbeep8.Utilities.checkInt( \"tempo\", tempo );\n\n\t\t// Ensure tempo is within a valid range.\n\t\tif ( tempo < 50 ) {\n\t\t\ttempo = 50;\n\t\t}\n\n\t\tp1.setTempo( tempo );\n\n\t}\n\n\n\t/**\n\t * Checks if music is currently playing.\n\t *\n\t * @returns {boolean} True if music is playing, otherwise false.\n\t */\n\tbeep8.Music.isPlaying = function() {\n\n\t\treturn p1.isPlaying();\n\n\t}\n\n\tdocument.addEventListener( 'beep8.pageVisibility.wake', beep8.Music.resume );\n\tdocument.addEventListener( 'beep8.pageVisibility.sleep', beep8.Music.pause );\n\n} )( beep8 );\n( function( beep8 ) {\n\n\tbeep8.Menu = {};\n\n\n\t/**\n\t * Displays a menu with the given choices and returns the index of the selected choice.\n\t *\n\t * Displaying a menu will pause the execution of other elements of your game\n\t * until a choice has been made.\n\t *\n\t * The menu automatically beeps and boops as the player navigates through the choices.\n\t *\n\t * The options object can contain the following properties:\n\t * - options.title - The title of the menu.\n\t * - options.prompt - The prompt to display above the choices.\n\t * - options.selBgColor - The background color of the selected choice. Defaults to the current foreground colour.\n\t * - options.selFgColor - The foreground color of the selected choice. Defaults to the current background colour.\n\t * - options.border - Whether to draw a border around the menu. Defaults to true.\n\t * - options.borderChar - The character to use for the border.\n\t * - options.center - Whether to center the menu horizontally and vertically.\n\t * - options.centerH - Whether to center the menu horizontally.\n\t * - options.centerV - Whether to center the menu vertically.\n\t * - options.padding - The padding around the prompt and choices.\n\t * - options.selIndex - The index of the initially selected choice.\n\t * - options.typewriter - display the prompt as a typewriter effect.\n\t *\n\t * @param {string[]} choices - The choices to display.\n\t * @param {object} [options] - Options for the menu.\n\t * @returns {Promise<number>} A promise that resolves to the index of the selected choice.\n\t */\n\tbeep8.Menu.display = async function( choices, options ) {\n\n\t\toptions = options || {};\n\t\tbeep8.Utilities.checkArray( \"choices\", choices );\n\t\tbeep8.Utilities.checkObject( \"options\", options );\n\n\t\toptions = Object.assign(\n\t\t\t{\n\t\t\t\ttitle: \"\",\n\t\t\t\tprompt: \"\",\n\t\t\t\tselBgColor: beep8.Core.drawState.fgColor,\n\t\t\t\tselFgColor: beep8.Core.drawState.bgColor,\n\t\t\t\tborder: true,\n\t\t\t\tborderChar: beep8.CONFIG.BORDER_CHAR,\n\t\t\t\tcenter: false,\n\t\t\t\tcenterH: false,\n\t\t\t\tcenterV: false,\n\t\t\t\tpadding: 1,\n\t\t\t\tselIndex: 0,\n\t\t\t\ttypewriter: false\n\t\t\t},\n\t\t\toptions\n\t\t);\n\n\t\tlet startCol = beep8.Core.drawState.cursorCol;\n\t\tlet startRow = beep8.Core.drawState.cursorRow;\n\n\t\tconst promptSize = beep8.TextRenderer.measure( options.prompt );\n\t\tconst prompt01 = options.prompt ? 1 : 0;\n\t\tconst border01 = options.borderChar ? 1 : 0;\n\t\tlet choicesCols = 0;\n\t\tconst choicesRows = choices.length;\n\n\t\tchoices.forEach(\n\t\t\t( choice ) => {\n\t\t\t\tchoicesCols = Math.ceil( Math.max( choicesCols, beep8.TextRenderer.measure( choice ).cols ) );\n\t\t\t}\n\t\t);\n\n\t\tlet totalCols = Math.ceil( Math.max( promptSize.cols, choicesCols ) ) + 2 * options.padding + 2 * border01;\n\t\ttotalCols = Math.min( totalCols, beep8.CONFIG.SCREEN_COLS );\n\n\t\tconst totalRows = prompt01 * ( promptSize.rows + 1 ) + choicesRows + 2 * options.padding + 2 * border01;\n\n\t\tif ( options.centerH || options.center ) {\n\t\t\tstartCol = Math.round( ( beep8.CONFIG.SCREEN_COLS - totalCols ) / 2 );\n\t\t}\n\n\t\tif ( options.centerV || options.center ) {\n\t\t\tstartRow = Math.round( ( beep8.CONFIG.SCREEN_ROWS - totalRows ) / 2 );\n\t\t}\n\n\t\tbeep8.Core.drawState.cursorCol = startCol;\n\t\tbeep8.Core.drawState.cursorRow = startRow;\n\n\t\tif ( options.border ) {\n\n\t\t\t// Print the background & border.\n\t\t\tbeep8.TextRenderer.printBox( totalCols, totalRows, true, options.borderChar );\n\n\t\t\t// Print title at the top of the border.\n\t\t\tif ( options.title ) {\n\t\t\t\tconst t = \" \" + options.title + \" \";\n\t\t\t\tbeep8.Core.drawState.cursorCol = startCol + Math.round( ( totalCols - t.length ) / 2 );\n\t\t\t\tbeep8.TextRenderer.print( t );\n\t\t\t}\n\n\t\t}\n\n\t\tif ( options.prompt ) {\n\n\t\t\tbeep8.Core.drawState.cursorCol = promptSize.cols <= totalCols ?\n\t\t\t\t( startCol + border01 + options.padding ) :\n\t\t\t\t( startCol + Math.round( ( totalCols - promptSize.cols ) / 2 ) );\n\t\t\tbeep8.Core.drawState.cursorRow = startRow + border01 + options.padding;\n\n\t\t\tif ( options.typewriter ) {\n\t\t\t\tawait beep8.Async.typewriter( options.prompt );\n\t\t\t} else {\n\t\t\t\tbeep8.TextRenderer.print( options.prompt );\n\t\t\t}\n\n\t\t}\n\n\t\t// TODO: save the screen image before showing the menu and restore it later.\n\n\t\tlet selIndex = options.selIndex;\n\n\t\twhile ( true ) {\n\n\t\t\t// Draw choices.\n\t\t\tbeep8.Core.drawState.cursorRow = startRow + border01 + options.padding + prompt01 * ( promptSize.rows + 1 );\n\t\t\tbeep8.Core.drawState.cursorCol = ( promptSize.cols <= choicesCols ) ?\n\t\t\t\t( startCol + border01 + options.padding ) :\n\t\t\t\t( startCol + Math.round( ( totalCols - choicesCols ) / 2 ) );\n\n\t\t\tprintChoices( choices, selIndex, options );\n\n\t\t\tconst k = await beep8.Input.readKeyAsync();\n\n\t\t\tif ( k.includes( \"ArrowUp\" ) ) {\n\n\t\t\t\t// Go up the menu.\n\t\t\t\tselIndex = selIndex > 0 ? selIndex - 1 : choices.length - 1;\n\t\t\t\tif ( choices.length > 1 ) beep8.Sfx.play( beep8.CONFIG.SFX.MENU_UP );\n\n\t\t\t} else if ( k.includes( \"ArrowDown\" ) ) {\n\n\t\t\t\t// Go down the menu.\n\t\t\t\tselIndex = ( selIndex + 1 ) % choices.length;\n\t\t\t\tif ( choices.length > 1 ) beep8.Sfx.play( beep8.CONFIG.SFX.MENU_DOWN );\n\n\t\t\t} else if (\n\t\t\t\tk.includes( \"Enter\" ) ||\n\t\t\t\tk.includes( \"ButtonA\" ) ||\n\t\t\t\tk.includes( \"ButtonB\" ) ||\n\t\t\t\tk.includes( \" \" )\n\t\t\t) {\n\n\t\t\t\t// Select menu item.\n\t\t\t\tbeep8.Sfx.play( beep8.CONFIG.SFX.MENU_SELECT );\n\t\t\t\treturn selIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Prints the choices for a menu highlighting the current choice.\n\t *\n\t * The options object should contain the following properties:\n\t * - options.selBgColor - The background color of the selected choice.\n\t * - options.selFgColor - The foreground color of the selected choice.\n\t *\n\t * @param {string[]} choices - The choices to print.\n\t * @param {number} selIndex - The index of the selected choice.\n\t * @param {object} options - Options for the menu.\n\t * @returns {void}\n\t */\n\tconst printChoices = function( choices, selIndex, options ) {\n\n\t\tconst origBg = beep8.Core.drawState.bgColor;\n\t\tconst origFg = beep8.Core.drawState.fgColor;\n\n\t\tfor ( let i = 0; i < choices.length; i++ ) {\n\t\t\tconst isSel = i === selIndex;\n\t\t\tbeep8.Core.setColor( isSel ? options.selFgColor : origFg, isSel ? options.selBgColor : origBg );\n\t\t\tbeep8.TextRenderer.print( choices[ i ] + \"\\n\" );\n\t\t}\n\n\t\tbeep8.Core.setColor( origFg, origBg );\n\n\t}\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Math = {};\n\n\n\t/**\n\t * Calculates a 2D distance between points (x0, y0) and (x1, y1).\n\t *\n\t * @param {number} x0 - The x-coordinate of the first point.\n\t * @param {number} y0 - The y-coordinate of the first point.\n\t * @param {number} x1 - The x-coordinate of the second point.\n\t * @param {number} y1 - The y-coordinate of the second point.\n\t * @returns {number} The distance between the two points.\n\t */\n\tbeep8.Math.dist2D = function( x0, y0, x1, y1 ) {\n\n\t\tbeep8.Utilities.checkNumber( \"x0\", x0 );\n\t\tbeep8.Utilities.checkNumber( \"y0\", y0 );\n\t\tbeep8.Utilities.checkNumber( \"x1\", x1 );\n\t\tbeep8.Utilities.checkNumber( \"y1\", y1 );\n\n\t\tconst dx = x0 - x1;\n\t\tconst dy = y0 - y1;\n\n\t\treturn Math.sqrt( dx * dx + dy * dy );\n\n\t}\n\n\n\t/**\n\t * Linearly interpolates between two values.\n\t *\n\t * @param {number} a - The start value.\n\t * @param {number} b - The end value.\n\t * @param {number} t - The interpolation factor (0.0 to 1.0).\n\t * @returns {number} The interpolated value.\n\t */\n\tbeep8.Math.lerp = function( a, b, t ) {\n\n\t\treturn a + ( b - a ) * t;\n\n\t}\n\n\n\t/**\n\t * A smoothing function for interpolation.\n\t *\n\t * This is Perlin's classic fade function 6t^5 - 15t^4 + 10t^3.\n\t * It eases coordinate values so that they will ease towards integral values.\n\t * This ends up smoothing the final output.\n\t *\n\t * @param {number} t - The interpolation factor (0.0 to 1.0).\n\t * @returns {number} The smoothed interpolation factor.\n\t */\n\tbeep8.Math.fade = function( t ) {\n\n\t\treturn t * t * t * ( t * ( t * 6 - 15 ) + 10 );\n\n\t}\n\n\n\t/**\n\t * A simpler smoothing function for interpolation.\n\t *\n\t * This is the smoothstep function 3t^2 - 2t^3.\n\t * It eases coordinate values so that they will ease towards integral values.\n\t * This ends up smoothing the final output.\n\t *\n\t * @param {number} t - The interpolation factor (0.0 to 1.0).\n\t * @returns {number} The smoothed interpolation factor.\n\t */\n\tbeep8.Math.smoothstep = function( t ) {\n\n\t\treturn t * t * ( 3 - 2 * t );\n\n\t}\n\n\n\t// Ken Perlin's quintic fade (smoother than smoothstep)\n\tfunction fade( t ) {\n\t\treturn t * t * t * ( t * ( t * 6 - 15 ) + 10 );\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Inventory = {};\n\n\n\tdocument.addEventListener(\n\t\t'beep8.initComplete',\n\t\t() => {\n\n\t\t\tbeep8.Inventory.reset();\n\n\t\t},\n\t\t{ once: true }\n\t);\n\n\n\t/**\n\t * Reset the inventory to empty.\n\t *\n\t * This clears all item counts and flags.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Inventory.reset = function() {\n\n\t\tbeep8.data.inventory = {\n\t\t\tcounts: {},\n\t\t\tflags: {}\n\t\t};\n\n\t};\n\n\n\t/**\n\t * Get the count of a specific item in the inventory.\n\t *\n\t * @param {string} id The item ID to check.\n\t * @returns {number} The count of the item (default: 0 if not found).\n\t */\n\tbeep8.Inventory.getCount = function( id ) {\n\n\t\treturn beep8.data.inventory.counts[ id ] ?? 0;\n\n\t}\n\n\n\t/**\n\t * Add a certain amount of an item to the inventory.\n\t *\n\t * If a max is provided, the item count will not exceed that max.\n\t *\n\t * @param {string} id The item ID to add.\n\t * @param {number} [amount=1] The amount to add (default: 1).\n\t * @param {number} [max=Infinity] The maximum amount allowed (default: Infinity).\n\t */\n\tbeep8.Inventory.add = function( id, amount = 1, max = Infinity ) {\n\n\t\tconst current = beep8.Inventory.getCount( id );\n\t\tbeep8.data.inventory.counts[ id ] = Math.min( current + amount, max );\n\n\t}\n\n\n\t/**\n\t * Remove a certain amount of an item from the inventory.\n\t *\n\t * If the item count goes below zero, it is set to zero.\n\t *\n\t * @param {string} id The item ID to remove.\n\t * @param {number} [amount=1] The amount to remove (default: 1).\n\t */\n\tbeep8.Inventory.remove = function( id, amount = 1 ) {\n\n\t\tconst current = beep8.Inventory.getCount( id );\n\t\tbeep8.data.inventory.counts[ id ] = Math.max( current - amount, 0 );\n\n\t}\n\n\n\t/**\n\t * Check if the inventory has at least a certain amount of an item.\n\t *\n\t * @param {string} id The item ID to check.\n\t * @param {number} [amount=1] The minimum amount required (default: 1).\n\t * @returns {boolean} True if the inventory has at least the specified amount, false otherwise.\n\t */\n\tbeep8.Inventory.has = function( id, amount = 1 ) {\n\n\t\treturn beep8.Inventory.getCount( id ) >= amount;\n\n\t}\n\n\n\t/**\n\t * Set a flag in the inventory.\n\t *\n\t * For things like \"door opened\", \"cutscene played\"\n\t *\n\t * @param {string} flag The flag name to set.\n\t * @param {boolean} [value=true] The value to set the flag to (default: true).\n\t */\n\tbeep8.Inventory.setFlag = function( flag, value = true ) {\n\n\t\tbeep8.data.inventory.flags[ flag ] = value;\n\n\t}\n\n\n\t/**\n\t * Get a flag from the inventory.\n\t *\n\t * Returns true/false if the flag is set.\n\t *\n\t * @param {string} flag The flag name to get.\n\t * @returns {boolean} The value of the flag (default: false).\n\t */\n\tbeep8.Inventory.getFlag = function( flag ) {\n\n\t\tbeep8.Utilities.checkString( 'flag', flag );\n\n\t\treturn !!beep8.data.inventory.flags[ flag ];\n\n\t}\n\n\n\t/**\n\t * Filters inventory items based on a prefix or a regular expression.\n\t *\n\t * This function returns an array of objects, each containing the `id` and `count`\n\t * of items that match the given prefix or regular expression.\n\t *\n\t * Examples:\n\t * - To get all keys by prefix:\n\t *   const keys = beep8.Inventory.filter(\"key-\");\n\t *\n\t * - To use a regex for finer control:\n\t *   const special = beep8.Inventory.filter(/^potion-|^scroll-/);\n\t *\n\t * @param {string|RegExp} match Item ID prefix or regex to match.\n\t * @returns {Array<{id:string,count:number}>} Matching items with counts.\n\t */\n\tbeep8.Inventory.filter = function( match ) {\n\n\t\t// Array to store matching items\n\t\tconst out = [];\n\t\t// Reference to the inventory counts\n\t\tconst counts = beep8.data.inventory.counts;\n\t\t// Check if `match` is a regular expression\n\t\tconst isRegex = match instanceof RegExp;\n\t\t// Ensure the `match` parameter is a valid string or RegExp\n\t\tif ( !isRegex ) beep8.Utilities.checkString( 'match', match );\n\n\n\t\t// Iterate over all item IDs in the inventory\n\t\tfor ( const id in counts ) {\n\n\t\t\tif ( !Object.hasOwn( counts, id ) ) continue;\n\t\t\tconst count = counts[ id ];\n\n\t\t\t// Skip items with a count of 0 or less\n\t\t\tif ( count <= 0 ) continue;\n\n\t\t\t// Check if the item ID matches the given prefix or regex\n\t\t\tif (\n\t\t\t\t( isRegex && match.test( id ) ) || // If `match` is a regex, test the ID\n\t\t\t\t( !isRegex && id.includes( match ) ) // If `match` is a string, check if the ID includes it\n\t\t\t) {\n\t\t\t\tout.push( { id, count } );\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\n\t}\n\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Intro = {};\n\n\n\t/**\n\t * Display a loading screen.\n\t *\n\t * @returns {Promise<void>} A promise that resolves when the loading screen is displayed.\n\t */\n\tbeep8.Intro.loading = async function() {\n\n\t\t// Colour count.\n\t\tconst prefix = \"8> \";\n\n\t\t// Loop through all colours.\n\t\tbeep8.color( 0, 4 );\n\t\tbeep8.cls();\n\t\tbeep8.locate( 1, 1 );\n\t\tbeep8.print( prefix + \"beep8 Loading...\\n\" );\n\n\t\tawait beep8.Async.wait( 0.4 );\n\n\t}\n\n\n\t/**\n\t * Display a splash screen.\n\t *\n\t * @param {string} [name=\"beep8 Project\"] The name of the project.\n\t * @returns {Promise<void>} A promise that resolves when the splash screen is dismissed.\n\t */\n\tbeep8.Intro.splash = async function() {\n\n\t\t// Load title screen image.\n\t\tconst titleScreen = beep8.Tilemap.load( `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gwEEAIMBBACDAQQAAA8AAA8AmB6DAA8EgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgwADBIMYegMEgxiZAwSDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgwEEAIMAAwSDAAMEgwADBAAPAAAPAJgegxgcCgSDGB0KBIMBBACDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgxgpAwSDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAAA8AAA8AmB6DGC4KBIMYLwoEgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgxgpAwSDGCkDBIMBBACDAQQAgwEEAIMBBACDAQQAgxcDBIMBAwSDGBgDBIMAAwSDAQQAgxh0AwSDGIYDBIMABQSDAQQAAA8AAA8AmB6DAQQAgwEEAIMBBACDAA8EgwEEAIMBBACDAQQAgxcDBIMCAwSDAQMEgxgYAwSDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDAAMEgwADBIMYdAMEgxkBbAUEgwEEAIMZAUYFBIMBBAAADwAADwCYHoMWAwSDGCgDBIMBBACDAQQAgxh0AwSDEAMEgwEEAIMBBACDAQQAgwEEAIMBBACDAQQAgwEEAIMBBACDFgMEgxgoAwSDGHQDBIMYhgMEgxkBbAUEgwAFBIMABQWDAQUEgwEFBIMBBQQADwAADwCYHoMYKAUDgwAFA4MYKAMEgxh0AwSDAQQAgwEEAIMNBQSDAQQAgwEEAIMYdAMEgxiGAwSDFgMEgxgoAwSDFgMEgwEDBIMBAwSDEAMEgxi0BQSDAAEFgwMBBYMABQWDAQUEgwEFBIMBBQQADwAADwCYHoMBBQSDGCgFA4MABQODGCgDBIMYuAUEgwEEAIMBBACDGIYDBIMYdAMEgxi4BQSDDwMEgwsDBIMBAwSDAQMEgxkBagUDgwEDBIMYnAUDgwADBYMAAQWDAQUEgwAFBYMPAQWDAQUEgwEFBAAPAAAPAJgegwMBBYMBBQSDAQUEgwEFBIMBBQSDAQUEgwEFBIMBBQSDAQUEgwEFBIMBBQSDAQUEgwEFBIMBBQSDAQUEgwEFBIMBBQSDAQUEgw8BBYMRAQWDDwEFgwMFAYMBBQSDAQUEAA8AAA8AloMRAQWDEQEFgwMBBYMDAQWDAwEFgwMBBYMADwWDAwEFgwMBBYMADwWDAA8FgwAPBYMDAQWDAA8FgwAPBYMADwWDDwEFgwsBBYMRAQWDCwEFgxhYBQGDAA8BloMADwGDEAEFgwAPBYMADwWDAA8FgwAPBYMADwWDAQEFgxABBYMADwWDAA8FgwAPBYMADwWDAA8FgwkBBYMADwWDAA8FgwQBBYMADwGDAA8BgwAPAYMABQE=` );\n\n\t\t// Draw title screen.\n\t\tbeep8.locate( 0, 0 );\n\t\tbeep8.Tilemap.draw( titleScreen );\n\n\t\t// Click to start.\n\t\tlet message = \"Click to start\";\n\t\tif ( beep8.Core.isTouchDevice() ) message = \"Tap to start\";\n\n\t\tbeep8.color( 4, 5 );\n\t\tbeep8.locate( 0, beep8.CONFIG.SCREEN_ROWS - 2 );\n\t\tbeep8.printCentered( message, beep8.CONFIG.SCREEN_COLS );\n\n\t\t// Wait for user input.\n\t\tawait beep8.Input.readPointerAsync();\n\n\t\tbeep8.color( 15, 0 );\n\t\tbeep8.cls();\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\t/**\n\t * Input class handles keyboard input and provides methods to check key states.\n\t */\n\tbeep8.Input = {};\n\n\t/**\n\t * List of keys currently held down.\n\t *\n\t * @type {Set<string>}\n\t */\n\tlet keysHeld_ = null;\n\n\t/**\n\t * List of keys that were just pressed in the current frame.\n\t *\n\t * @type {Set<string>}\n\t */\n\tlet keysJustPressed_ = null;\n\n\n\t/**\n\t * Initializes the input system.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Input.init = function() {\n\n\t\t// Keys currently held down (set of strings).\n\t\tkeysHeld_ = new Set();\n\t\t// Keys that were just pressed in the current frame.\n\t\tkeysJustPressed_ = new Set();\n\n\t\t// Bind event listeners to handle keydown and keyup events.\n\t\twindow.addEventListener( \"keydown\", e => beep8.Input.onKeyDown( e ) );\n\t\twindow.addEventListener( \"keyup\", e => beep8.Input.onKeyUp( e ) );\n\t\twindow.addEventListener( \"pointerdown\", e => beep8.Input.onPointerDown( e ) );\n\n\t}\n\n\n\t/**\n\t * Checks if a key is currently held down.\n\t *\n\t * @param {string} keyName - The name of the key to check.\n\t * @returns {boolean} Whether the key is currently held down.\n\t */\n\tbeep8.Input.keyHeld = function( keyName ) {\n\n\t\treturn keysHeld_.has( keyName.toUpperCase() );\n\n\t}\n\n\n\t/**\n\t * Checks if a key was just pressed in the current frame.\n\t *\n\t * @param {string} keyName - The name of the key to check.\n\t * @returns {boolean} Whether the key was just pressed.\n\t */\n\tbeep8.Input.keyJustPressed = function( keyName ) {\n\n\t\treturn keysJustPressed_.has( keyName.toUpperCase() );\n\n\t}\n\n\n\t/**\n\t * Clears the list of keys that were just pressed.\n\t * Should be called at the end of each frame.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Input.onEndFrame = function() {\n\n\t\tkeysJustPressed_.clear();\n\n\t}\n\n\n\t/**\n\t * Handles keydown events, adding the key to the just pressed and held sets.\n\t * Resolves any pending asynchronous key events.\n\t *\n\t * @param {KeyboardEvent} e - The event object.\n\t * @returns {void}\n\t */\n\tbeep8.Input.onKeyDown = function( e ) {\n\n\t\tconst key = e.key;\n\t\tconst keys = beep8.Input.getKeys( key );\n\n\t\t// Stop page from scrolling when the arrows/ space are pressed.\n\t\tif ( [ \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \" \" ].includes( key ) ) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\t// Add to currently held keys.\n\t\tfor ( const k of keys ) {\n\t\t\tkeysJustPressed_.add( k.toUpperCase() );\n\t\t\tkeysHeld_.add( k.toUpperCase() );\n\t\t}\n\n\t\t// Return any pending key events.\n\t\tif ( beep8.Core.hasPendingAsync( \"beep8.Async.key\" ) ) {\n\t\t\tbeep8.Core.resolveAsync( \"beep8.Async.key\", keys );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Handles pointerdown events, resolving any pending asynchronous pointer events.\n\t *\n\t * @param {PointerEvent} e - The event object.\n\t * @returns {void}\n\t */\n\tbeep8.Input.onPointerDown = function( e ) {\n\n\t\tif ( beep8.Core.hasPendingAsync( \"beep8.Async.pointer\" ) ) {\n\t\t\tbeep8.Core.resolveAsync( \"beep8.Async.pointer\", { x: e.clientX, y: e.clientY } );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Handles keyup events, removing the key from the held set.\n\t *\n\t * @param {KeyboardEvent} e - The event object.\n\t * @returns {void}\n\t */\n\tbeep8.Input.onKeyUp = function( e ) {\n\n\t\tif ( !e.key ) return;\n\n\t\tconst key = e.key.toUpperCase();\n\t\tconst keys = beep8.Input.getKeys( key );\n\n\t\tfor ( const k of keys ) {\n\t\t\tkeysHeld_.delete( k.toUpperCase() );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Reads a key asynchronously. Returns a promise that resolves to the key that was pressed.\n\t *\n\t * @returns {Promise<string>} A promise that resolves to the key that was pressed.\n\t */\n\tbeep8.Input.readKeyAsync = function() {\n\n\t\treturn new Promise(\n\t\t\t( resolve, reject ) => {\n\t\t\t\tbeep8.Core.startAsync( \"beep8.Async.key\", resolve, reject );\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Reads a pointer asynchronously. Returns a promise that resolves to the\n\t * pointer position.\n\t *\n\t * @returns {Promise<{x: number, y: number}>} A promise that resolves to the pointer position.\n\t */\n\tbeep8.Input.readPointerAsync = function() {\n\n\t\treturn new Promise(\n\t\t\t( resolve, reject ) => {\n\t\t\t\tbeep8.Core.startAsync( \"beep8.Async.pointer\", resolve, reject );\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Gets an array of keys that correspond to a given key.\n\t * This is used to handle key aliases (e.g. \"W\" and \"ArrowUp\").\n\t *\n\t * @param {string} key - The key to get aliases for.\n\t * @returns {string[]} An array of key names.\n\t */\n\tbeep8.Input.getKeys = function( key ) {\n\n\t\tlet keys = [ key ];\n\n\t\tswitch ( key.toUpperCase() ) {\n\t\t\tcase \"W\":\n\t\t\t\tkeys.push( \"ArrowUp\" );\n\t\t\t\tbreak;\n\n\t\t\tcase \"A\":\n\t\t\t\tkeys.push( \"ArrowLeft\" );\n\t\t\t\tbreak;\n\n\t\t\tcase \"S\":\n\t\t\t\tkeys.push( \"ArrowDown\" );\n\t\t\t\tbreak;\n\n\t\t\tcase \"D\":\n\t\t\t\tkeys.push( \"ArrowRight\" );\n\t\t\t\tbreak;\n\n\t\t\tcase \"Enter\":\n\t\t\t\tkeys.push( \"Escape\" );\n\t\t\t\tbreak;\n\n\t\t\tcase \"Z\":\n\t\t\tcase \"N\":\n\t\t\t\tkeys.push( \"ButtonA\" );\n\t\t\t\tbreak;\n\n\t\t\tcase \"X\":\n\t\t\tcase \"M\":\n\t\t\t\tkeys.push( \"ButtonB\" );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn keys;\n\n\t}\n\n\n\t/**\n\t * Reads a line of text asynchronously.\n\t * Handles user input to build a string until the Enter key is pressed.\n\t *\n\t * @param {string} initString - The initial string to display.\n\t * @param {number} maxLen - The maximum length of the string to read.\n\t * @param {number} [maxWidth=-1] - The maximum width of the line.\n\t * @returns {Promise<string>} A promise that resolves to the string that was read.\n\t */\n\tbeep8.Input.readLine = async function( initString, maxLen, maxWidth = -1 ) {\n\n\t\tconst startCol = beep8.Core.drawState.cursorCol;\n\t\tconst startRow = beep8.Core.drawState.cursorRow;\n\n\t\tlet curCol = startCol;\n\t\tlet curRow = startRow;\n\t\tlet curStrings = [ initString ];\n\t\tlet curPos = 0;\n\n\t\tconst cursorWasVisible = beep8.Core.drawState.cursorVisible;\n\t\tbeep8.CursorRenderer.setCursorVisible( true );\n\n\t\t// Loop until the user presses Enter.\n\t\twhile ( true ) {\n\n\t\t\tbeep8.Core.setCursorLocation( curCol, curRow );\n\t\t\tbeep8.TextRenderer.print( curStrings[ curPos ] || \"\" );\n\t\t\tconst keys = await beep8.Input.readKeyAsync();\n\n\t\t\tfor ( const key of keys ) {\n\n\t\t\t\tif ( key === \"Backspace\" ) {\n\n\t\t\t\t\t// Handle backspace: remove the last character.\n\t\t\t\t\tif ( curStrings[ curPos ].length === 0 ) {\n\t\t\t\t\t\tif ( curPos === 0 ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurPos--;\n\t\t\t\t\t\tcurRow--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the current string has at least one character it removes the last character.\n\t\t\t\t\t// If the string is empty it leaves it unchanged.\n\t\t\t\t\tcurStrings[ curPos ] = curStrings[ curPos ].length > 0 ? curStrings[ curPos ].substring( 0, curStrings[ curPos ].length - 1 ) : curStrings[ curPos ];\n\t\t\t\t\t// Position the flashing cursor and then print a space to remove the last character.\n\t\t\t\t\tbeep8.Core.setCursorLocation( curCol + beep8.TextRenderer.measure( curStrings[ curPos ] ).cols, curRow );\n\t\t\t\t\tbeep8.TextRenderer.print( \" \" );\n\n\t\t\t\t\tbeep8.Sfx.play( beep8.CONFIG.SFX.TYPING );\n\n\t\t\t\t} else if ( key === \"Enter\" ) {\n\n\t\t\t\t\t// Handle enter: submit the text.\n\t\t\t\t\tbeep8.Core.setCursorLocation( 1, curRow + 1 );\n\t\t\t\t\tbeep8.CursorRenderer.setCursorVisible( cursorWasVisible );\n\n\t\t\t\t\tbeep8.Sfx.play( beep8.CONFIG.SFX.TYPING );\n\n\t\t\t\t\treturn curStrings.join( \"\" );\n\n\t\t\t\t} else if ( key.length === 1 ) {\n\n\t\t\t\t\t// Handle regular character input.\n\t\t\t\t\tif ( curStrings.join( \"\" ).length < maxLen || maxLen === -1 ) {\n\t\t\t\t\t\tcurStrings[ curPos ] += key;\n\n\t\t\t\t\t\t// Word wrap.\n\t\t\t\t\t\t// Check if maxWidth is set and the current string has reached/exceeded it\n\t\t\t\t\t\tif ( maxWidth !== -1 && curStrings[ curPos ].length >= maxWidth ) {\n\t\t\t\t\t\t\t// Print the last character of the current string (to visually fill the slot)\n\t\t\t\t\t\t\tbeep8.TextRenderer.print( curStrings[ curPos ].charAt( curStrings[ curPos ].length - 1 ) );\n\t\t\t\t\t\t\t// Reset the column to the starting column for the next line\n\t\t\t\t\t\t\tcurCol = startCol;\n\t\t\t\t\t\t\t// Move to the next string position (start a new line)\n\t\t\t\t\t\t\tcurPos++;\n\t\t\t\t\t\t\t// Initialize the new line as an empty string\n\t\t\t\t\t\t\tcurStrings[ curPos ] = \"\";\n\t\t\t\t\t\t\t// Move the row down for the new line\n\t\t\t\t\t\t\tcurRow++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbeep8.Sfx.play( beep8.CONFIG.SFX.TYPING );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\n} )( beep8 );\n\n\n( function( beep8 ) {\n\t'use strict';\n\n\t/**\n\t * Lightweight Entity-Component store for Beep8.\n\t * ---------------------------------------------\n\t * \u2022 Entity: A reference to a collection of data for an object in game. It is a numeric ID. Automatically assigned when using the create() method.\n\t * \u2022 Component: A property for an entity. The data can be any plain object. Each entity has a key string used as a property name. Loc is reserved for location.\n\t * \u2022 System: Code that executes commands on entities. There are different systems for different processes.\n\t *\n\t * All data is stored by reference; mutating the returned\n\t * component objects is intentional and fast.\n\t */\n\tbeep8.ECS = {};\n\n\t// auto-incrementing entity IDs\n\tlet nextId = 0;\n\n\t// Map<name, Map<id, data>>\n\tlet components = new Map();\n\n\t// Grid for positional queries.\n\t// To keep this up to date you must use setLoc() to move entities.\n\tlet grid = [];\n\n\t// Map<name, function> for systems\n\tlet systems = new Map();\n\n\n\n\t/**\n\t * Create a new unique entity ID.\n\t *\n\t * @returns {number}\n\t */\n\tfunction makeEntity() {\n\n\t\treturn nextId++;\n\n\t}\n\n\n\t/**\n\t * Ensure a component bucket exists and return it.\n\t *\n\t * @param {string} name\n\t * @returns {Map<number, Object>}\n\t * @private\n\t */\n\tfunction bucket( name ) {\n\n\t\t// If component store doesn't exist, create it.\n\t\tif ( !components.has( name ) ) components.set( name, new Map() );\n\t\t// Return the store.\n\t\treturn components.get( name );\n\n\t}\n\n\n\t/**\n\t * Get all entities at a specific grid location.\n\t *\n\t * @param {number} col\n\t * @param {number} row\n\t * @returns {number[]} Array of entity IDs at that location\n\t */\n\tbeep8.ECS.entitiesAt = function( col, row ) {\n\n\t\treturn grid[ row ]?.[ col ] ?? [];\n\n\t}\n\n\n\t/**\n\t * Register a system that runs every frame.\n\t *\n\t * @param {Function} fn   System function (dt)=>void\n\t * @param {string}   name Unique system name\n\t * @param {number}  [order=0] Lower numbers run first\n\t */\n\tbeep8.ECS.addSystem = function( name, fn, order = 0 ) {\n\n\t\tbeep8.Utilities.checkFunction( 'fn', fn );\n\t\tbeep8.Utilities.checkString( 'name', name );\n\t\tbeep8.Utilities.checkInt( 'order', order );\n\n\t\tif ( systems.has( name ) ) beep8.Utilities.warn( `ECS: overwriting existing system \"${name}\"` );\n\n\t\tsystems.set( name, { fn, order } );\n\n\t};\n\n\n\t/**\n\t * Add a system a single time. Don't overwite existing systems or add multiple copies.\n\t *\n\t * @param {Function} fn   System function (dt)=>void\n\t * @param {string}   name Unique system name\n\t * @param {number}  [order=0] Lower numbers run first\n\t */\n\tbeep8.ECS.addSystemOnce = function( fn, name, order = 0 ) {\n\n\t\tbeep8.Utilities.checkFunction( 'fn', fn );\n\t\tbeep8.Utilities.checkString( 'name', name );\n\t\tbeep8.Utilities.checkInt( 'order', order );\n\n\t\tif ( systems.has( name ) ) return;\n\n\t\tbeep8.ECS.addSystem( fn, name, order );\n\n\t};\n\n\n\t/**\n\t * Remove a previously-registered system.\n\t *\n\t * @param {string} name\n\t */\n\tbeep8.ECS.removeSystem = function( name ) {\n\n\t\tsystems.delete( name );\n\n\t};\n\n\n\t/**\n\t * Run every system in order.\n\t * Optionally pass a filter:  (name)=>boolean\n\t *\n\t * @param {number} dt Delta-time in seconds\n\t * @param {(name:string)=>boolean=} filter Skip systems that return false\n\t */\n\tbeep8.ECS.run = function( dt, filter = () => true ) {\n\n\t\t[ ...systems.entries() ]\n\t\t\t// Sort by order/ priority.\n\t\t\t.sort( ( a, b ) => a[ 1 ].order - b[ 1 ].order )   // order ASC\n\t\t\t// Execute each system in priority order.\n\t\t\t.forEach(\n\t\t\t\t( [ name, { fn } ] ) => {\n\t\t\t\t\tif ( filter( name ) ) fn( dt );\n\t\t\t\t}\n\t\t\t);\n\n\t};\n\n\n\t/**\n\t * Attach or overwrite a component on an entity.\n\t *\n\t * @param {number} id Entity ID\n\t * @param {string} name Component name\n\t * @param {Object} [data={}] Component data (stored by reference)\n\t * @returns {void}\n\t */\n\tbeep8.ECS.add = function( id, name = null, data = {} ) {\n\n\t\tbeep8.Utilities.checkInt( 'id', id );\n\t\tbeep8.Utilities.checkString( 'name', name );\n\t\tbeep8.Utilities.checkObject( 'data', data );\n\n\t\t// Add the new component to the store.\n\t\tbucket( name ).set( id, data );\n\n\t\t// If the component is Loc (location), update the position grid.\n\t\tif ( 'Loc' === name ) beep8.ECS.setLoc( id, data.col, data.row );\n\n\t}\n\n\n\t/**\n\t * Set a component on an entity, overwriting any existing data.\n\t * This is a convenience method for add().\n\t *\n\t * @param {number} id Entity ID\n\t * @param {string} name Component name\n\t * @param {Object} data Component data (stored by reference)\n\t * @returns {void}\n\t */\n\tbeep8.ECS.set = function( id, name, data ) {\n\n\t\tbeep8.ECS.add( id, name, data );\n\n\t}\n\n\n\t/**\n\t * Set the location of an entity.\n\t *\n\t * @param {number} id Entity ID\n\t * @param {number} col X tile coordinate\n\t * @param {number} row Y tile coordinate\n\t * @returns {void}\n\t */\n\tbeep8.ECS.setLoc = function( id, col, row ) {\n\n\t\tbeep8.Utilities.checkInt( 'id', id );\n\t\tbeep8.Utilities.checkInt( 'col', col );\n\t\tbeep8.Utilities.checkInt( 'row', row );\n\n\t\t// Get the current location component.\n\t\tconst loc = this.getComponent( id, 'Loc' );\n\n\t\t// Remove from old position.\n\t\tconst oldRow = grid[ loc.row ];\n\t\tif ( oldRow ) {\n\t\t\tconst cell = oldRow[ loc.col ];\n\t\t\tif ( cell ) {\n\t\t\t\tconst i = cell.indexOf( id );\n\t\t\t\tif ( i !== -1 ) cell.splice( i, 1 );\n\t\t\t}\n\t\t}\n\n\t\t// Update component position.\n\t\tloc.col = col;\n\t\tloc.row = row;\n\n\t\t// Save new grid location.\n\t\tif ( !grid[ row ] ) grid[ row ] = [];\n\t\tif ( !grid[ row ][ col ] ) grid[ row ][ col ] = [];\n\t\tgrid[ row ][ col ].push( id );\n\n\t}\n\n\n\t/**\n\t * Get the component map for a given component name.\n\t *\n\t * @param {string} name\n\t * @returns {Map<number,Object>} Map<entityId,data>\n\t */\n\tbeep8.ECS.get = function( name ) {\n\n\t\tbeep8.Utilities.checkString( 'name', name );\n\n\t\treturn components.get( name ) ?? new Map();\n\n\t}\n\n\n\t/**\n\t * Return *all* components for a given entity.\n\t *\n\t * @param {number} id\n\t * @returns {Map<string, Object>} Map of name \u2192 data\n\t */\n\tbeep8.ECS.getEntity = function( id ) {\n\n\t\tbeep8.Utilities.checkInt( 'id', id );\n\n\t\tconst out = new Map();\n\t\tfor ( const [ name, map ] of components ) {\n\t\t\tif ( map.has( id ) ) out.set( name, map.get( id ) );\n\t\t}\n\t\treturn out;\n\n\t}\n\n\n\t/**\n\t * Get one specific component for an entity.\n\t *\n\t * @param {number} id\n\t * @param {string} name\n\t * @returns {Object|undefined}\n\t */\n\tbeep8.ECS.getComponent = function( id, name ) {\n\n\t\treturn components.get( name )?.get( id );\n\n\t}\n\n\n\t/**\n\t * Check if an entity owns a component.\n\t *\n\t * @param {number} id\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\tbeep8.ECS.hasComponent = function( id, name ) {\n\n\t\treturn components.get( name )?.has( id ) ?? false;\n\n\t}\n\n\n\t/**\n\t * Remove a single component from an entity.\n\t *\n\t * @param {number} id\n\t * @param {string} name\n\t * @returns {void}\n\t */\n\tbeep8.ECS.removeComponent = function( id, name ) {\n\n\t\tcomponents.get( name )?.delete( id );\n\n\t}\n\n\n\t/**\n\t * Remove an entity entirely (all its components).\n\t *\n\t * @param {number} id\n\t * @returns {void}\n\t */\n\tbeep8.ECS.removeEntity = function( id ) {\n\n\t\tconst loc = this.getComponent( id, 'Loc' );\n\n\t\tif ( loc ) {\n\t\t\tconst cell = grid[ loc.row ]?.[ loc.col ];\n\t\t\tif ( cell ) cell.splice( cell.indexOf( id ), 1 );\n\t\t}\n\n\t\tfor ( const store of components.values() ) store.delete( id );\n\n\t}\n\n\n\t/**\n\t * Create an entity from a bundle of components.\n\t *\n\t * @param {Object.<string, Object>} bundle Keys = component names\n\t * @returns {number} The new entity ID\n\t */\n\tbeep8.ECS.create = function( bundle ) {\n\n\t\tconst id = makeEntity();\n\t\tfor ( const [ name, data ] of Object.entries( bundle ) ) {\n\t\t\tbeep8.ECS.add( id, name, data );\n\t\t}\n\t\treturn id;\n\n\t}\n\n\n\t/**\n\t * Query for entities that own *all* given components.\n\t *\n\t * @param {...string} names\n\t * @returns {number[]} Array of entity IDs\n\t */\n\tbeep8.ECS.query = function( ...names ) {\n\n\t\tif ( names.length === 0 ) return [];\n\t\tconst base = components.get( names[ 0 ] );\n\n\t\tif ( !base ) return [];\n\n\t\treturn [ ...base.keys() ].filter( id =>\n\t\t\tnames.every( n => components.get( n )?.has( id ) )\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Count entities by type.\n\t *\n\t * @param {string} typeName\n\t * @returns {number}\n\t */\n\tbeep8.ECS.countByType = function( typeName ) {\n\n\t\t// get all entities with a Type component\n\t\tconst typeMap = this.get( 'Type' );\n\t\tif ( !typeMap ) return 0;\n\n\t\tlet count = 0;\n\n\t\tfor ( const comp of typeMap.values() ) {\n\t\t\tif ( comp.name === typeName ) count++;\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\n\t/**\n\t * Reset the ECS (clears all entities & components).\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.ECS.reset = function() {\n\n\t\tcomponents = new Map();\n\t\tsystems = new Map();\n\t\tgrid = [];\n\t\tnextId = 0;\n\n\t}\n\n} )( beep8 );\n\n\n\n( function( beep8 ) {\n\n\t/**\n\t * beep8.CursorRenderer handles the rendering and blinking of the cursor.\n\t */\n\tbeep8.CursorRenderer = {};\n\n\tlet blinkCycle_ = 0;\n\tlet toggleBlinkHandle_ = null;\n\n\n\t/**\n\t * Set the visibility of the cursor.\n\t *\n\t * @param {boolean} visible - Whether the cursor should be visible\n\t * @returns {void}\n\t */\n\tbeep8.CursorRenderer.setCursorVisible = function( visible ) {\n\n\t\tbeep8.Utilities.checkBoolean( \"visible\", visible );\n\n\t\t// If the cursor is already in the desired state, do nothing.\n\t\tif ( beep8.Core.drawState.cursorVisible === visible ) return;\n\n\t\tbeep8.Core.drawState.cursorVisible = visible;\n\n\t\tblinkCycle_ = 0;\n\t\tbeep8.Renderer.render();\n\n\t\tif ( toggleBlinkHandle_ !== null ) {\n\t\t\tclearInterval( toggleBlinkHandle_ );\n\t\t\ttoggleBlinkHandle_ = null;\n\t\t}\n\n\t\t// If visible, start the blink cycle.\n\t\tif ( visible ) {\n\t\t\ttoggleBlinkHandle_ = setInterval(\n\t\t\t\t() => advanceBlink_(),\n\t\t\t\tbeep8.CONFIG.CURSOR.BLINK_INTERVAL\n\t\t\t);\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Draws the flashing cursor.\n\t * This is called automatically in the beep8 render function so does not\n\t * need to be called manually.\n\t *\n\t * @param {CanvasRenderingContext2D} targetCtx - The context to draw the cursor on\n\t * @returns {void}\n\t */\n\tbeep8.CursorRenderer.draw = function( targetCtx ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"targetCtx\", targetCtx, CanvasRenderingContext2D );\n\n\t\t// If the cursor is not visible or it is not time to blink, do nothing.\n\t\tif ( !beep8.Core.drawState.cursorVisible || blinkCycle_ <= 0 ) return;\n\n\t\tconst font = beep8.TextRenderer.getFont();\n\n\t\t// Calculate the real position of the cursor.\n\t\tconst realX = beep8.Core.drawState.cursorCol * beep8.CONFIG.CHR_WIDTH;\n\t\tconst realY = beep8.Core.drawState.cursorRow * beep8.CONFIG.CHR_HEIGHT;\n\n\t\t// Draw the cursor.\n\t\ttargetCtx.fillStyle = beep8.Core.getColorHex( beep8.Core.drawState.fgColor );\n\n\t\ttargetCtx.fillRect(\n\t\t\trealX + 1, realY + 1,\n\t\t\tfont.charWidth_ - 2, font.charHeight_ - 2\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Advances the cursor blink cycle.\n\t *\n\t * @private\n\t * @returns {void}\n\t */\n\tfunction advanceBlink_() {\n\n\t\tblinkCycle_ = ( blinkCycle_ + 1 ) % 2;\n\t\tbeep8.Renderer.render();\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Core = {};\n\n\tbeep8.Core.realCanvas = null;\n\tbeep8.Core.realCtx = null;\n\tbeep8.Core.offCanvas = null;\n\tbeep8.Core.offCtx = null;\n\tbeep8.Core.container = null;\n\tbeep8.Core.startTime = 0;\n\tbeep8.Core.deltaTime = 0;\n\tbeep8.Core.crashed = false;\n\tbeep8.Core.crashing = false;\n\n\tbeep8.Core.drawState = {\n\t\tfgColor: 7,\n\t\tbgColor: 0,  // -1 means transparent\n\n\t\tcursorCol: 0,\n\t\tcursorRow: 0,\n\n\t\tcursorVisible: false, // Don't change this directly, use cursorRenderer.setCursorVisible()\n\t};\n\n\tlet lastFrameTime = null;\n\tlet initDone = false;\n\tlet updateHandler = null;\n\tlet renderHandler = null;\n\tlet targetDt = 0;\n\tlet timeToNextFrame = 0;\n\tlet pendingAsync = null;\n\n\n\t/**\n\t * Initializes the engine.\n\t *\n\t * This merges config properties and then calls beep8.Core.asyncInit() to\n\t * prepare assets.\n\t *\n\t * @param {Function} callback - The function to call when the engine is initialized.\n\t * @return {void}\n\t */\n\tbeep8.Core.init = function( callback, options = {} ) {\n\n\t\tbeep8.Utilities.checkFunction( \"callback\", callback );\n\t\tif ( options ) {\n\t\t\tbeep8.Utilities.checkObject( \"options\", options );\n\t\t}\n\n\t\t// Merge the options with the default configuration.\n\t\tbeep8.CONFIG = {\n\t\t\t...beep8.CONFIG,\n\t\t\t...options,\n\t\t};\n\n\t\tbeep8.Hooks.doAction( 'beforeInit' );\n\n\t\t// Setup screenshot taking.\n\t\tbeep8.Core.initScreenshot();\n\n\t\t// Initialize the engine asynchronously.\n\t\tbeep8.Core.asyncInit( callback );\n\n\t\t// Initialize the game clock.\n\t\tbeep8.Core.startTime = beep8.Core.getNow();\n\n\t\tbeep8.Hooks.doAction( 'afterInit' );\n\n\t\tbeep8.Utilities.event( 'initComplete' );\n\n\t}\n\n\n\t/**\n\t * Checks if the engine has been initialized.\n\t *\n\t * @returns {boolean} True if the engine has been initialized.\n\t */\n\tbeep8.Core.initialized = function() {\n\n\t\treturn initDone;\n\n\t}\n\n\n\t/**\n\t * Asynchronously initializes the engine.\n\t *\n\t * This function sets up the canvas, initializes subsystems, and then calls\n\t * the callback function if it's set.\n\t *\n\t * @param {Function} callback - The function to call when the engine is initialized.\n\t * @returns {void}\n\t */\n\tbeep8.Core.asyncInit = async function( callback = null ) {\n\n\t\tbeep8.Utilities.log( \"beep8 System initializing\" );\n\n\t\t// Computed values: width and height of screen in virtual pixels.\n\t\tbeep8.CONFIG.SCREEN_WIDTH = beep8.CONFIG.SCREEN_COLS * beep8.CONFIG.CHR_WIDTH;\n\t\tbeep8.CONFIG.SCREEN_HEIGHT = beep8.CONFIG.SCREEN_ROWS * beep8.CONFIG.CHR_HEIGHT;\n\n\t\t// Set up the real canvas (the one that really exists onscreen).\n\t\tbeep8.Core.realCanvas = document.createElement( \"canvas\" );\n\n\t\tif ( beep8.CONFIG.CANVAS_SETTINGS && beep8.CONFIG.CANVAS_SETTINGS.CANVAS_ID ) {\n\t\t\tbeep8.Core.realCanvas.setAttribute( \"id\", beep8.CONFIG.CANVAS_SETTINGS.CANVAS_ID );\n\t\t}\n\n\t\tif ( beep8.CONFIG.CANVAS_SETTINGS && beep8.CONFIG.CANVAS_SETTINGS.CANVAS_CLASSES ) {\n\t\t\tfor ( const className of beep8.CONFIG.CANVAS_SETTINGS.CANVAS_CLASSES ) {\n\t\t\t\tbeep8.Core.realCanvas.classList.add( className );\n\t\t\t}\n\t\t}\n\n\t\tbeep8.Core.realCanvas.style.touchAction = \"none\";\n\t\tbeep8.Core.realCanvas.style.userSelect = \"none\";\n\t\tbeep8.Core.realCanvas.style.imageRendering = \"pixelated\";\n\n\t\t// Prevent default touch events on touch devices.\n\t\tbeep8.Core.realCanvas.addEventListener( \"touchstart\", e => e.preventDefault() );\n\n\t\t// Work out where to put the canvas.\n\t\tbeep8.Core.container = document.createElement( 'div' );\n\t\tbeep8.Core.container.setAttribute( \"style\", \"\" );\n\t\tbeep8.Core.container.id = \"beep8\";\n\t\tbeep8.Core.container.style.display = \"block\";\n\t\tbeep8.Core.container.style.lineHeight = \"0\";\n\t\tbeep8.Core.container.style.position = \"relative\";\n\n\t\t// Add the canvas to the container.\n\t\tbeep8.Core.container.appendChild( beep8.Core.realCanvas );\n\n\t\t// Put the canvas in the container.\n\t\tbeep8.Core.getBeepContainerEl().appendChild( beep8.Core.container );\n\n\t\t// Set up the virtual canvas (the one we render to). This canvas isn't\n\t\t// part of the document( it's not added to document.body), it only\n\t\t// exists off-screen.\n\t\tbeep8.Core.offCanvas = new OffscreenCanvas( beep8.CONFIG.SCREEN_WIDTH, beep8.CONFIG.SCREEN_HEIGHT );\n\t\tbeep8.Core.offCtx = beep8.Core.offCanvas.getContext(\n\t\t\t\"2d\",\n\t\t\t{\n\t\t\t\talpha: false,\n\t\t\t\tcolorSpace: 'srgb',\n\t\t\t\tdesynchronized: true\n\t\t\t}\n\t\t);\n\t\tbeep8.Core.offCtx.imageSmoothingEnabled = false;\n\n\t\t// Load and initialize default fonts.\n\t\tawait beep8.TextRenderer.initAsync();\n\t\tbeep8.Input.init();\n\n\t\t// Update the positioning and size of the canvas.\n\t\tbeep8.Core.updateLayout( false );\n\t\twindow.addEventListener(\n\t\t\t\"resize\",\n\t\t\t() => beep8.Core.updateLayout( true )\n\t\t);\n\n\t\tif ( beep8.Core.isMobile() ) {\n\t\t\tbeep8.Joystick.setup();\n\t\t}\n\n\t\tinitDone = true;\n\n\t\tbeep8.Utilities.log( \"beep8 System initialized\" );\n\n\t\tawait beep8.Intro.loading();\n\t\tawait beep8.Intro.splash();\n\n\t\t// Call the callback function if it's set.\n\t\tif ( callback ) {\n\t\t\tawait callback();\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Gets the container element for the engine.\n\t *\n\t * This is the element under which the rendering canvas is created. If the\n\t * container is not specified in the configuration, this will be the body element.\n\t *\n\t * @returns {HTMLElement} The container element.\n\t */\n\tbeep8.Core.getBeepContainerEl = function() {\n\n\t\tlet container = document.body;\n\n\t\tif ( beep8.CONFIG.CANVAS_SETTINGS && beep8.CONFIG.CANVAS_SETTINGS.CONTAINER ) {\n\n\t\t\tconst containerSpec = beep8.CONFIG.CANVAS_SETTINGS.CONTAINER;\n\n\t\t\tif ( typeof ( containerSpec ) === \"string\" ) {\n\n\t\t\t\tcontainer = document.getElementById( containerSpec.replace( '#', '' ) );\n\n\t\t\t\tif ( !container ) {\n\t\t\t\t\tbeep8.Utilities.fatal( \"beep8: Could not find container element with ID: \" + containerSpec );\n\t\t\t\t}\n\n\t\t\t} else if ( containerSpec instanceof HTMLElement ) {\n\n\t\t\t\tcontainer = containerSpec;\n\n\t\t\t} else {\n\n\t\t\t\tbeep8.Utilities.error( \"beep8: beep8.CONFIG.CANVAS_SETTINGS.CONTAINER must be either an ID of an HTMLElement.\" );\n\t\t\t\tcontainer = document.body;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn container;\n\n\t}\n\n\n\t/**\n\t * Checks if the engine (and specified api method) is ready to run.\n\t *\n\t * This function checks if the engine has crashed, if the initAsync() method\n\t * has been called, and if there is a pending asynchronous operation.\n\t *\n\t * This should be called at the start of any async operation.\n\t *\n\t * @param {string} apiMethod - The name of the API method being called.\n\t * @returns {void}\n\t */\n\tbeep8.Core.preflight = function( apiMethod ) {\n\n\t\tif ( beep8.Core.crashed ) {\n\t\t\tthrow new Error( `Can't call API method ${apiMethod}() because the engine has crashed.` );\n\t\t}\n\n\t\tif ( !initDone ) {\n\n\t\t\tbeep8.Utilities.fatal(\n\t\t\t\t`Can't call API method ${apiMethod}(): API not initialized. ` +\n\t\t\t\t`Call initAsync() wait until it finishes before calling API methods.`\n\t\t\t);\n\n\t\t}\n\n\t\tif ( pendingAsync ) {\n\n\t\t\tbeep8.Utilities.fatal(\n\t\t\t\t`Can't call API method ${apiMethod}() because there is a pending async ` +\n\t\t\t\t`call to ${pendingAsync.name}() that hasn't finished running yet. Are you missing ` +\n\t\t\t\t`an 'await' keyword to wait for the async method? Use 'await ${pendingAsync.name}()',` +\n\t\t\t\t`not just '${pendingAsync.name}()'`\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Starts an asynchronous operation.\n\t *\n\t * This function should be called at the beginning of an asynchronous method.\n\t * It sets up the pendingAsync object, which is used to track the state of the\n\t * asynchronous operation.\n\t *\n\t * @param {string} asyncMethodName - The name of the asynchronous method.\n\t * @param {Function} resolve - The function to call when the operation is successful.\n\t * @param {Function} reject - The function to call when the operation fails.\n\t * @returns {void}\n\t */\n\tbeep8.Core.startAsync = function( asyncMethodName, resolve, reject ) {\n\n\t\tif ( pendingAsync ) {\n\n\t\t\tthrow new Error(\n\t\t\t\t\"Internal bug: startAsync called while pendingAsync is not null. \" +\n\t\t\t\t\"Missing preflight() call?\"\n\t\t\t);\n\n\t\t}\n\n\t\tpendingAsync = {\n\t\t\tname: asyncMethodName,\n\t\t\tresolve,\n\t\t\treject,\n\t\t};\n\n\t\tbeep8.Renderer.render();\n\n\t}\n\n\n\t/**\n\t * Checks if there is a pending asynchronous operation.\n\t *\n\t * @param {string} asyncMethodName - The name of the asynchronous method.\n\t * @returns {boolean} True if there is a pending asynchronous operation.\n\t */\n\tbeep8.Core.hasPendingAsync = function( asyncMethodName = null ) {\n\n\t\tif ( null === asyncMethodName ) {\n\t\t\treturn !!pendingAsync;\n\t\t}\n\n\t\treturn pendingAsync && pendingAsync.name === asyncMethodName;\n\n\t}\n\n\n\t/**\n\t * Ends an asynchronous operation.\n\t *\n\t * @param {string} asyncMethodName - The name of the asynchronous method.\n\t * @param {boolean} isError - Whether the operation failed.\n\t * @param {any} result - The result of the operation.\n\t * @returns {void}\n\t */\n\tbeep8.Core.endAsyncImpl = function( asyncMethodName, isError, result ) {\n\n\t\tif ( !pendingAsync ) {\n\t\t\tthrow new Error( `Internal bug: endAsync(${asyncMethodName}) called with no pendingAsync` );\n\t\t}\n\n\t\tif ( pendingAsync.name !== asyncMethodName ) {\n\t\t\tthrow new Error(\n\t\t\t\t`Internal bug: endAsync(${asyncMethodName}) called but pendingAsync.name ` +\n\t\t\t\t`is ${pendingAsync.name}`\n\t\t\t);\n\t\t}\n\n\t\tconst fun = isError ? pendingAsync.reject : pendingAsync.resolve;\n\t\tpendingAsync = null;\n\t\tfun( result );\n\n\t}\n\n\n\t/**\n\t * Resolves an asynchronous operation.\n\t *\n\t * This function should be called at the end of an asynchronous method.\n\t *\n\t * @param {string} asyncMethodName - The name of the asynchronous method.\n\t * @param {any} result - The result of the operation.\n\t * @returns {void}\n\t */\n\tbeep8.Core.resolveAsync = function( asyncMethodName, result ) {\n\n\t\tbeep8.Core.endAsyncImpl( asyncMethodName, false, result );\n\n\t}\n\n\n\t/**\n\t * Fails an asynchronous operation.\n\t *\n\t * @param {string} asyncMethodName - The name of the asynchronous method.\n\t * @param {any} error - The error that occurred.\n\t * @returns {void}\n\t */\n\tbeep8.Core.failAsync = function( asyncMethodName, error ) {\n\n\t\tbeep8.Core.endAsyncImpl( asyncMethodName, true, error );\n\n\t}\n\n\n\tlet running = false;\n\tlet animationFrameId = null;\n\n\n\t/**\n\t * Set the update and render callbacks for the game loop.\n\t *\n\t * @param {Function|null} updateCallback - The update function. Optional.\n\t * @param {Function} renderCallback - The render function.\n\t * @param {number} [targetFps=30] - Target frames per second.\n\t * @returns {void}\n\t */\n\tbeep8.Core.setFrameHandlers = function( renderCallback = null, updateCallback = null, targetFps = 30 ) {\n\n\t\tupdateHandler = updateCallback || ( () => { } );\n\t\trenderHandler = renderCallback || ( () => { } );\n\t\ttargetDt = 1 / targetFps;\n\t\ttimeToNextFrame = 0;\n\t\tlastFrameTime = beep8.Core.getNow();\n\n\t\t// Cancel current animation frame if running.\n\t\tif ( animationFrameId ) {\n\t\t\twindow.cancelAnimationFrame( animationFrameId );\n\t\t\tanimationFrameId = null;\n\t\t}\n\n\t\trunning = true;\n\n\t\tanimationFrameId = window.requestAnimationFrame( beep8.Core.doFrame );\n\n\t}\n\n\n\t/**\n\t * Update the game loop for realtime games.\n\t *\n\t * This function calls the update phase as many times as needed\n\t * (capped to prevent spiraling) and then calls the render phase.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Core.doFrame = async function() {\n\n\t\t// Stop if not running.\n\t\tif ( !running ) return;\n\n\t\t// Get current time and compute delta (in seconds).\n\t\tconst now = beep8.Core.getNow();\n\t\tlet delta = ( now - lastFrameTime ) / 1000;\n\t\tlastFrameTime = now;\n\n\t\t// Save actual delta time.\n\t\tbeep8.Core.deltaTime = delta;\n\n\t\t// Cap delta to avoid large time steps.\n\t\tdelta = Math.min( delta, 0.05 );\n\n\t\t// Accumulate time.\n\t\ttimeToNextFrame += delta;\n\n\t\t// Determine how many update steps to run based upon target delta time\n\t\t// and actual delta time.\n\t\t// This ensures updates are run even if the frame rate is lower than\n\t\t// intended.\n\t\tlet numUpdates = Math.floor( timeToNextFrame / targetDt );\n\t\tconst MAX_UPDATES = 10;\n\t\tif ( numUpdates > MAX_UPDATES ) {\n\t\t\tnumUpdates = MAX_UPDATES;\n\t\t\t// Reset accumulator to prevent spiral of death.\n\t\t\ttimeToNextFrame = 0;\n\t\t}\n\n\t\t// Run fixed update steps.\n\t\tfor ( let i = 0; i < numUpdates; i++ ) {\n\t\t\tif ( updateHandler ) {\n\t\t\t\tupdateHandler( targetDt );\n\t\t\t}\n\t\t\tif ( beep8.Input && typeof beep8.Input.onEndFrame === 'function' ) {\n\t\t\t\tbeep8.Input.onEndFrame();\n\t\t\t}\n\t\t\tbeep8.Particles.update( targetDt );\n\t\t}\n\n\t\t// Retain the fractional remainder for accurate timing.\n\t\ttimeToNextFrame %= targetDt;\n\n\t\t// if pending async then skip render.\n\t\tif ( renderHandler ) {\n\t\t\trenderHandler();\n\t\t}\n\n\t\tbeep8.Renderer.render();\n\n\t\tanimationFrameId = window.requestAnimationFrame( beep8.Core.doFrame );\n\n\t}\n\n\n\t/**\n\t * Stop the game loop.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Core.stopFrame = function() {\n\n\t\trunning = false;\n\t\tif ( animationFrameId ) {\n\t\t\twindow.cancelAnimationFrame( animationFrameId );\n\t\t\tanimationFrameId = null;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Clears the screen and resets the cursor to the top-left corner.\n\t *\n\t * It will optionally also set the background colour. By default it uses the\n\t * specified background but you can override this yourself.\n\t *\n\t * @param {number} [bgColor] - Optional background color index.\n\t * @returns {void}\n\t */\n\tbeep8.Core.cls = function( bgColor = undefined ) {\n\n\t\tbgColor = bgColor || beep8.Core.drawState.bgColor;\n\n\t\tbeep8.Utilities.checkNumber( \"bgColor\", bgColor );\n\n\t\tbeep8.Core.offCtx.fillStyle = beep8.Core.getColorHex( bgColor );\n\t\tbeep8.Core.offCtx.fillRect( 0, 0, beep8.Core.offCanvas.width, beep8.Core.offCanvas.height );\n\n\t\tbeep8.Core.setCursorLocation( 0, 0 );\n\t\tbeep8.Renderer.markDirty();\n\n\t}\n\n\n\t/**\n\t * Sets the colors used for text and background.\n\t *\n\t * @param {array} colors - A list of colours.\n\t * @returns {void}\n\t */\n\tbeep8.Core.defineColors = function( colors ) {\n\n\t\tbeep8.Utilities.checkArray( \"colors\", colors );\n\n\t\tbeep8.CONFIG.COLORS = colors.slice();\n\t\tbeep8.TextRenderer.regenColors();\n\n\t}\n\n\n\t/**\n\t * Sets the colors used for text and background.\n\t *\n\t * @param {number} fg - The foreground color.\n\t * @param {number} [bg=undefined] - The background color.\n\t * @returns {void}\n\t */\n\tbeep8.Core.setColor = function( fg, bg = undefined ) {\n\n\t\tbeep8.Utilities.checkNumber( \"fg\", fg );\n\t\tbeep8.Core.drawState.fgColor = Math.round( fg );\n\n\t\tif ( bg !== undefined ) {\n\t\t\tbeep8.Utilities.checkNumber( \"bg\", bg );\n\t\t\tbeep8.Core.drawState.bgColor = Math.round( bg );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Sets the cursor location.\n\t *\n\t * The cursor location is used for text rendering and is the position where\n\t * the next character will be drawn.\n\t *\n\t * Characters can be text or images, drawn using the loaded fonts.\n\t *\n\t * Rounds the position to the nearest 0.5.\n\t *\n\t * @param {number} col - The column.\n\t * @param {number} row - The row.\n\t * @returns {void}\n\t */\n\tbeep8.Core.setCursorLocation = function( col, row ) {\n\n\t\t// Columns.\n\t\tbeep8.Utilities.checkNumber( \"col\", col );\n\t\tbeep8.Core.drawState.cursorCol = Math.round( col * 2 ) / 2;\n\n\t\t// Rows.\n\t\tif ( row !== undefined ) {\n\t\t\tbeep8.Utilities.checkNumber( \"row\", row );\n\t\t\tbeep8.Core.drawState.cursorRow = Math.round( row * 2 ) / 2;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Move the cursor to the next character.\n\t *\n\t * This adjusts the drawing position without actually drawing anything.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Core.nextCursorLocation = function() {\n\n\t\tlet currentCursorCol = beep8.Core.drawState.cursorCol;\n\t\tlet currentCursorRow = beep8.Core.drawState.cursorRow;\n\n\t\tbeep8.Core.setCursorLocation( currentCursorCol + 1, currentCursorRow );\n\n\t}\n\n\n\t/**\n\t * Gets the color for the specified index.\n\t *\n\t * @param {number} c - The color index.\n\t * @returns {string} The color.\n\t */\n\tbeep8.Core.getColorHex = function( c ) {\n\n\t\tif ( typeof ( c ) !== \"number\" ) {\n\t\t\treturn \"#f0f\";\n\t\t}\n\n\t\tif ( c < 0 ) {\n\t\t\treturn \"#000\";\n\t\t}\n\n\t\tc = beep8.Utilities.clamp( Math.round( c ), 0, beep8.CONFIG.COLORS.length - 1 );\n\n\t\treturn beep8.CONFIG.COLORS[ c ];\n\n\t}\n\n\n\t/**\n\t * Gets the current time in milliseconds.\n\t *\n\t * This is used for rendering and animation, and can also be used in the game\n\t * to get the current time for things like timers.\n\t *\n\t * You can get the game start time by calling beep8.Core.startTime.\n\t *\n\t * @returns {number} The current time in milliseconds.\n\t */\n\tbeep8.Core.getNow = function() {\n\n\t\tif ( window.performance && window.performance.now ) {\n\t\t\treturn window.performance.now();\n\t\t}\n\n\t\treturn new Date().getTime();\n\n\t}\n\n\n\t/**\n\t * Draws an image.\n\t *\n\t * This function is a wrapper around the canvas drawImage() function and will\n\t * draw the image at any x,y position. It does not use the cursor position.\n\t *\n\t * @param {HTMLImageElement} img - The image to draw.\n\t * @param {number} x - The x-coordinate of the upper-left corner of the image.\n\t * @param {number} y - The y-coordinate of the upper-left corner of the image.\n\t * @param {number} [srcX] - The x-coordinate of the upper-left corner of the source image.\n\t * @param {number} [srcY] - The y-coordinate of the upper-left corner of the source image.\n\t * @param {number} [width] - The width of the image.\n\t * @param {number} [height] - The height of the image.\n\t * @returns {void}\n\t */\n\tbeep8.Core.drawImage = function( img, x, y, srcX, srcY, width, height ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"img\", img, HTMLImageElement );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\n\t\tif ( srcX !== undefined ) beep8.Utilities.checkNumber( \"srcX\", srcX );\n\t\tif ( srcY !== undefined ) beep8.Utilities.checkNumber( \"srcY\", srcY );\n\t\tif ( width !== undefined ) beep8.Utilities.checkNumber( \"width\", width );\n\t\tif ( height !== undefined ) beep8.Utilities.checkNumber( \"height\", height );\n\n\t\tif (\n\t\t\tsrcX !== undefined && srcY !== undefined &&\n\t\t\twidth !== undefined && height !== undefined\n\t\t) {\n\t\t\tbeep8.Core.offCtx.drawImage( img, srcX, srcY, width, height, x, y, width, height );\n\t\t} else {\n\t\t\tbeep8.Core.offCtx.drawImage( img, x, y );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Loads an image from the given URL.\n\t *\n\t * This function loads an image and converts its colors to the closest\n\t * colors in the beep8 color palette.\n\t *\n\t * Remember to keep images as small as possible. The larger the image the\n\t * longer it will take to process.\n\t *\n\t * @param {string} url - The URL of the image to load.\n\t * @returns {Promise<HTMLImageElement>} The loaded image.\n\t */\n\tbeep8.Core.loadImage = async function( url ) {\n\n\t\tbeep8.Utilities.log( 'load image', url );\n\n\t\treturn new Promise(\n\t\t\t( resolve ) => {\n\n\t\t\t\tconst img = new Image();\n\t\t\t\timg.crossOrigin = \"Anonymous\"; // Allow cross-origin images if needed\n\n\t\t\t\timg.onload = () => {\n\n\t\t\t\t\t// Create a canvas to manipulate the image\n\t\t\t\t\tconst canvas = document.createElement( \"canvas\" );\n\t\t\t\t\tconst ctx = canvas.getContext( \"2d\" );\n\n\t\t\t\t\tcanvas.width = img.width;\n\t\t\t\t\tcanvas.height = img.height;\n\t\t\t\t\tctx.drawImage( img, 0, 0 );\n\n\t\t\t\t\t// Get image data\n\t\t\t\t\tconst imageData = ctx.getImageData( 0, 0, canvas.width, canvas.height );\n\t\t\t\t\tconst data = imageData.data;\n\n\t\t\t\t\t// Use the precomputed lookup table\n\t\t\t\t\tconst lookupTable = generateColorLookupTable( beep8.CONFIG.COLORS );\n\n\t\t\t\t\tfor ( let i = 0; i < data.length; i += 4 ) {\n\n\t\t\t\t\t\tconst r = data[ i ];\n\t\t\t\t\t\tconst g = data[ i + 1 ];\n\t\t\t\t\t\tconst b = data[ i + 2 ];\n\n\t\t\t\t\t\t// Find the closest color using the lookup table\n\t\t\t\t\t\tconst closestColor = findClosestColorUsingLookup( r, g, b, lookupTable );\n\n\t\t\t\t\t\t// Convert the closest hex color to RGB\n\t\t\t\t\t\tconst { r: pr, g: pg, b: pb } = closestColor;\n\n\t\t\t\t\t\t// Replace the pixel color with the closest palette color\n\t\t\t\t\t\tdata[ i ] = pr;\n\t\t\t\t\t\tdata[ i + 1 ] = pg;\n\t\t\t\t\t\tdata[ i + 2 ] = pb;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Put the modified image data back on the canvas\n\t\t\t\t\tctx.putImageData( imageData, 0, 0 );\n\n\t\t\t\t\t// Resolve with the modified image\n\t\t\t\t\tconst modifiedImg = new Image();\n\t\t\t\t\tmodifiedImg.onload = () => resolve( modifiedImg );\n\t\t\t\t\tmodifiedImg.src = canvas.toDataURL();\n\n\t\t\t\t};\n\t\t\t\timg.src = url;\n\t\t\t}\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Draws a rectangle of the specified width and height.\n\t *\n\t * This ignores the cursor position.\n\t *\n\t * @param {number} x - The x-coordinate of the upper-left corner of the rectangle.\n\t * @param {number} y - The y-coordinate of the upper-left corner of the rectangle.\n\t * @param {number} width - The width of the rectangle.\n\t * @param {number} height - The height of the rectangle.\n\t * @returns {void}\n\t */\n\tbeep8.Core.drawRect = function( x, y, width, height, lineWidth = 1 ) {\n\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\t\tbeep8.Utilities.checkNumber( \"lineWidth\", lineWidth );\n\n\t\tconst oldStrokeStyle = beep8.Core.offCtx.strokeStyle;\n\t\tconst oldLineWidth = beep8.Core.offCtx.lineWidth;\n\n\t\tbeep8.Core.offCtx.strokeStyle = beep8.Core.getColorHex( beep8.Core.drawState.fgColor );\n\t\tbeep8.Core.offCtx.lineWidth = lineWidth;\n\n\t\t// Drawn inside the shape.\n\t\tbeep8.Core.offCtx.strokeRect(\n\t\t\tMath.round( x ), Math.round( y ),\n\t\t\tMath.round( width ), Math.round( height )\n\t\t);\n\n\t\t// Restore properties.\n\t\tbeep8.Core.offCtx.strokeStyle = oldStrokeStyle;\n\t\tbeep8.Core.offCtx.lineWidth = oldLineWidth;\n\n\t}\n\n\n\t/**\n\t * Draws a filled rectangle using the current colours.\n\t *\n\t * Ignores the cursor position.\n\t *\n\t * @param {number} x - The x-coordinate of the upper-left corner of the rectangle.\n\t * @param {number} y - The y-coordinate of the upper-left corner of the rectangle.\n\t * @param {number} width - The width of the rectangle.\n\t * @param {number} height - The height of the rectangle.\n\t * @returns {void}\n\t */\n\tbeep8.Core.fillRect = function( x, y, width, height ) {\n\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tbeep8.Utilities.checkNumber( \"width\", width );\n\t\tbeep8.Utilities.checkNumber( \"height\", height );\n\n\t\tbeep8.Core.offCtx.fillStyle = beep8.Core.getColorHex( beep8.Core.drawState.fgColor );\n\t\tbeep8.Core.offCtx.fillRect(\n\t\t\tMath.round( x ) + 0.5, Math.round( y ) + 0.5,\n\t\t\tMath.round( width ) - 1, Math.round( height ) - 1\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Take a screenshot when the 0 key is pressed.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Core.initScreenshot = function() {\n\n\t\tif ( beep8.Core.initialized() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst takeScreenshot = ( e ) => {\n\t\t\tif ( e.key === '0' ) {\n\t\t\t\tbeep8.Core.downloadScreenshot();\n\t\t\t}\n\t\t};\n\n\t\t// Take a screenshot when the 0 key is pressed.\n\t\tdocument.addEventListener( 'pointerup', takeScreenshot );\n\t\tdocument.addEventListener( 'keyup', takeScreenshot );\n\n\t}\n\n\n\t/**\n\t * Generates the bitmap data for the current screen and returns it to you.\n\t *\n\t * @returns {ImageData} The saved screen.\n\t */\n\tbeep8.Core.saveScreen = function() {\n\n\t\treturn beep8.Core.offCtx.getImageData(\n\t\t\t0, 0,\n\t\t\tbeep8.Core.offCanvas.width, beep8.Core.offCanvas.height\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Download the current screen as a PNG image.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Core.downloadScreenshot = function() {\n\n\t\t// Grab the image data from the drawn canvas (to include screen effects).\n\t\t// const dataUrl = beep8.Core.realCanvas.toDataURL( \"image/png\" );\n\t\tconst dataUrl = beep8.Core.getHighResDataURL( beep8.Core.realCanvas );\n\n\t\t// Save as a file.\n\t\tbeep8.Utilities.downloadFile( \"beep8-screenshot.png\", dataUrl );\n\n\t}\n\n\n\t/**\n\t * Get a high-resolution data URL for the specified canvas.\n\t *\n\t * @param {HTMLCanvasElement} canvas - The canvas to get the data URL for.\n\t * @param {number} [scale=4] - The scale factor.\n\t * @param {string} [mimeType=\"image/png\"] - The MIME type.\n\t * @param {number} [quality=1] - The quality.\n\t * @returns {string} The data URL.\n\t */\n\tbeep8.Core.getHighResDataURL = function( canvas, scale = 4, mimeType = \"image/png\", quality = 1 ) {\n\n\t\t// Create an offscreen canvas\n\t\tconst offscreenCanvas = new OffscreenCanvas( canvas.width * scale, canvas.height * scale );\n\n\t\t// Copy and scale the content\n\t\tconst offscreenCtx = offscreenCanvas.getContext( \"2d\" );\n\t\toffscreenCtx.imageSmoothingEnabled = false; // Disable filtering\n\t\toffscreenCtx.scale( scale, scale ); // Use nearest-neighbor scaling\n\t\toffscreenCtx.drawImage( canvas, 0, 0 );\n\n\t\t// Get the data URL\n\t\treturn offscreenCanvas.toDataURL( mimeType, quality );\n\n\t}\n\n\n\t/**\n\t * Restores the screen.\n\t *\n\t * @param {ImageData} screenData - The screen to restore.\n\t * @returns {void}\n\t */\n\tbeep8.Core.restoreScreen = function( screenData ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"screenData\", screenData, ImageData );\n\t\tbeep8.Core.offCtx.putImageData( screenData, 0, 0 );\n\n\t}\n\n\n\t/**\n\t * Updates the layout.\n\t *\n\t * @param {boolean} renderNow - Whether to render immediately.\n\t * @returns {void}\n\t */\n\tbeep8.Core.updateLayout = function( renderNow ) {\n\n\t\tbeep8.Core.updateLayout2d();\n\n\t\tif ( renderNow ) {\n\t\t\tbeep8.Renderer.render();\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Updates the layout of the 2D canvas.\n\t *\n\t * @returns {void}\n\t */\n\tbeep8.Core.updateLayout2d = function() {\n\n\t\tbeep8.Core.realCtx = beep8.Core.realCanvas.getContext(\n\t\t\t\"2d\",\n\t\t\t{\n\t\t\t\talpha: false,\n\t\t\t\tdesynchronized: true\n\t\t\t}\n\t\t);\n\t\tbeep8.Core.realCtx.imageSmoothingEnabled = false;\n\t\tbeep8.Core.realCtx.imageSmoothingQuality = 'pixelated';\n\n\t\tbeep8.CONFIG.SCREEN_EL_WIDTH = beep8.CONFIG.SCREEN_WIDTH;\n\t\tbeep8.CONFIG.SCREEN_EL_HEIGHT = beep8.CONFIG.SCREEN_HEIGHT;\n\t\tbeep8.CONFIG.SCREEN_REAL_WIDTH = beep8.CONFIG.SCREEN_WIDTH;\n\t\tbeep8.CONFIG.SCREEN_REAL_HEIGHT = beep8.CONFIG.SCREEN_HEIGHT;\n\n\t\tbeep8.Core.realCanvas.style.width = '100%';\n\t\tbeep8.Core.realCanvas.style.height = '100%';\n\t\tbeep8.Core.realCanvas.style.filter = 'blur(0.5px)';\n\t\tbeep8.Core.realCanvas.width = beep8.CONFIG.SCREEN_REAL_WIDTH;\n\t\tbeep8.Core.realCanvas.height = beep8.CONFIG.SCREEN_REAL_HEIGHT;\n\n\t\tbeep8.Core.container.style.aspectRatio = `${beep8.CONFIG.SCREEN_COLS} / ${beep8.CONFIG.SCREEN_ROWS}`;\n\n\t}\n\n\n\t/**\n\t * Handles a crash.\n\t *\n\t * @param {string} [errorMessage=\"Fatal error\"] - The error message to display.\n\t * @returns {void}\n\t */\n\tbeep8.Core.handleCrash = function( errorMessage = \"Fatal error\" ) {\n\n\t\tif ( beep8.Core.crashed || beep8.Core.crashing ) return;\n\n\t\tbeep8.Core.crashing = true;\n\n\t\tbeep8.Core.setColor( beep8.CONFIG.COLORS.length - 1, 0 );\n\t\tbeep8.Core.cls();\n\n\t\tbeep8.Core.setCursorLocation( 1, 1 );\n\t\tbeep8.TextRenderer.print( \"*** CRASH ***:\\n\" + errorMessage, null, beep8.CONFIG.SCREEN_COLS - 2 );\n\t\tbeep8.Renderer.render();\n\n\t\tbeep8.Core.crashing = false;\n\t\tbeep8.Core.crashed = true;\n\n\t}\n\n\n\t/**\n\t * Is this a touch device?\n\t *\n\t * @returns {boolean} True if this is a touch device.\n\t */\n\tbeep8.Core.isTouchDevice = function() {\n\n\t\treturn 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n\n\t}\n\n\n\t/**\n\t * Is this a mobile device?\n\t *\n\t * @returns {boolean} True if this is a mobile device.\n\t */\n\tbeep8.Core.isMobile = function() {\n\n\t\treturn beep8.Core.isIOS() || beep8.Core.isAndroid() || beep8.Core.isTouchDevice();\n\n\t}\n\n\n\t/**\n\t * Is this an iOS device?\n\t *\n\t * @returns {boolean} True if this is an iOS device.\n\t */\n\tbeep8.Core.isIOS = function() {\n\n\t\treturn /(ipad|ipod|iphone)/i.test( navigator.userAgent );\n\n\t}\n\n\n\t/**\n\t * Is this an Android device?\n\t *\n\t * @returns {boolean} True if this is an Android device.\n\t */\n\tbeep8.Core.isAndroid = function() {\n\n\t\treturn /android/i.test( navigator.userAgent );\n\n\t}\n\n\n\t/**\n\t * Finds the closest color in the palette to the given RGB values.\n\t *\n\t * @param {number} r - The red component (0-255).\n\t * @param {number} g - The green component (0-255).\n\t * @param {number} b - The blue component (0-255).\n\t * @param {string[]} palette - The color palette (array of hex strings).\n\t * @returns {string} The closest color in hex format.\n\t */\n\tfunction findClosestColorUsingLookup( r, g, b, lookupTable, bucketSize = 4 ) {\n\n\t\t// Round RGB values to the nearest bucket\n\t\tconst roundedR = Math.floor( r / bucketSize ) * bucketSize;\n\t\tconst roundedG = Math.floor( g / bucketSize ) * bucketSize;\n\t\tconst roundedB = Math.floor( b / bucketSize ) * bucketSize;\n\n\t\tconst key = `${roundedR},${roundedG},${roundedB}`;\n\t\treturn lookupTable[ key ];\n\n\t}\n\n\n\t// Cache the color lookup table to avoid recomputing it.\n\t// Only generated when an image is loaded externally.\n\t// Font images are not loaded this way.\n\tconst colorLookupTable = {};\n\n\n\t/**\n\t * Generates a color lookup table for the given palette.\n\t *\n\t * @param {string[]} palette - The color palette (array of hex strings).\n\t * @param {number} [bucketSize=4] - The size of the color buckets.\n\t * @returns {object} The color lookup table.\n\t */\n\tfunction generateColorLookupTable( palette, bucketSize = 4 ) {\n\n\t\tif ( Object.keys( colorLookupTable ).length !== 0 ) {\n\t\t\treturn colorLookupTable;\n\t\t}\n\n\t\t// Convert hex palette to rgb palette.\n\t\tconst rgbPalette = palette.map( color => beep8.Utilities.hexToRgb( color ) );\n\n\t\tfor ( let r = 0; r < 256; r += bucketSize ) {\n\t\t\tfor ( let g = 0; g < 256; g += bucketSize ) {\n\t\t\t\tfor ( let b = 0; b < 256; b += bucketSize ) {\n\t\t\t\t\tconst key = `${r},${g},${b}`;\n\t\t\t\t\tcolorLookupTable[ key ] = findClosestColor( r, g, b, rgbPalette );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn colorLookupTable;\n\n\t}\n\n\n\t/**\n\t * Finds the closest color in the palette to the given RGB values.\n\t *\n\t * @param {number} r - The red component (0-255).\n\t * @param {number} g - The green component (0-255).\n\t * @param {number} b - The blue component (0-255).\n\t * @param {object[]} palette - The color palette (array of RGB objects).\n\t * @returns {object} The closest color in RGB format.\n\t */\n\tfunction findClosestColor( r, g, b, palette ) {\n\n\t\tlet closestColor = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tfor ( const color of palette ) {\n\n\t\t\tconst distance = (\n\t\t\t\tMath.pow( color.r - r, 2 ) +\n\t\t\t\tMath.pow( color.g - g, 2 ) +\n\t\t\t\tMath.pow( color.b - b, 2 )\n\t\t\t);\n\n\t\t\tif ( distance < closestDistance ) {\n\t\t\t\tclosestDistance = distance;\n\t\t\t\tclosestColor = color;\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestColor;\n\n\t}\n\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Collision = {};\n\n\tbeep8.COLLISION = {};\n\tbeep8.COLLISION.NONE = 0;\n\tbeep8.COLLISION.N = 1;\n\tbeep8.COLLISION.E = 2;\n\tbeep8.COLLISION.S = 4;\n\tbeep8.COLLISION.W = 8;\n\tbeep8.COLLISION.NE = beep8.COLLISION.N + beep8.COLLISION.E;\n\tbeep8.COLLISION.NS = beep8.COLLISION.N + beep8.COLLISION.S;\n\tbeep8.COLLISION.NW = beep8.COLLISION.N + beep8.COLLISION.W;\n\tbeep8.COLLISION.SE = beep8.COLLISION.S + beep8.COLLISION.E;\n\tbeep8.COLLISION.SW = beep8.COLLISION.S + beep8.COLLISION.W;\n\tbeep8.COLLISION.WE = beep8.COLLISION.W + beep8.COLLISION.E;\n\tbeep8.COLLISION.WNE = beep8.COLLISION.W + beep8.COLLISION.N + beep8.COLLISION.E;\n\tbeep8.COLLISION.WES = beep8.COLLISION.W + beep8.COLLISION.E + beep8.COLLISION.S;\n\tbeep8.COLLISION.NES = beep8.COLLISION.N + beep8.COLLISION.E + beep8.COLLISION.S;\n\tbeep8.COLLISION.ALL = beep8.COLLISION.N + beep8.COLLISION.E + beep8.COLLISION.S + beep8.COLLISION.W;\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Cart = {};\n\n\n\t// Magic string used to identify the custom trailer in the PNG file\n\tconst MAGIC_STR = \"BEEP8\";\n\n\t// Encoded version of the magic string as a Uint8Array\n\tconst MAGIC = new TextEncoder().encode( MAGIC_STR );\n\n\t// Version number for the trailer format\n\tconst VERSION = 1;\n\n\n\t/**\n\t * Saves the current canvas as a PNG file with a custom trailer.\n\t *\n\t * The trailer includes metadata (e.g., game data) appended to the PNG file.\n\t * This metadata is stored as a JSON object and can be extracted later using the `load` function.\n\t *\n\t * @param {HTMLCanvasElement} canvas - The canvas element to save as a PNG file.\n\t * @param {Object|String} data - The metadata object to append as a trailer. This object will be serialized as JSON.\n\t * @param {string} [filename=\"cart.png\"] - The name of the file to save. Defaults to \"cart.png\".\n\t * @returns {Promise<void>} - A promise that resolves when the file is saved.\n\t */\n\tbeep8.Cart.save = async function( canvas, data, filename = \"cart.png\" ) {\n\n\t\tbeep8.Utilities.checkInstanceOf( \"canvas\", canvas, HTMLCanvasElement );\n\t\tbeep8.Utilities.checkString( \"data\", data );\n\t\tbeep8.Utilities.checkString( \"filename\", filename );\n\n\t\tconst pngBlob = await new Promise( res => canvas.toBlob( res, \"image/png\" ) );\n\n\t\t// Append the custom trailer to the PNG Blob\n\t\tconst cartBlob = await _appendTrailer( pngBlob, data );\n\n\t\t// Save the resulting Blob as a file (requires FileSaver.js)\n\t\tsaveAs( cartBlob, filename );\n\n\t}\n\n\n\t/**\n\t * Loads a PNG file with a custom trailer (set of game data) and extracts the appended data.\n\t *\n\t * The PNG file should be created using the beep8.Cart.save function which appends the required trailer data.\n\t *\n\t * @param {Blob|string} pngBlobOrUrl - The PNG file as a Blob or a URL.\n\t * @returns {Promise<Object>} - A promise that resolves to the extracted data object.\n\t */\n\tbeep8.Cart.load = async function( pngBlobOrUrl ) {\n\n\t\t// Fetch the PNG data as an ArrayBuffer\n\t\tconst buffer = await ( typeof pngBlobOrUrl === \"string\"\n\t\t\t? ( await fetch( pngBlobOrUrl ) ).arrayBuffer()\n\t\t\t: pngBlobOrUrl.arrayBuffer() );\n\n\t\t// Convert the ArrayBuffer to a Uint8Array\n\t\tconst bytes = new Uint8Array( buffer );\n\n\t\t// Find the position of the magic string in the byte array\n\t\tconst offset = _findMagicFromEnd( bytes, MAGIC_STR );\n\t\tif ( offset < 0 ) beep8.Utilities.fatal( \"Error Loading Cart: No BEEP8 trailer found\" );\n\n\t\t// Read the version number\n\t\tconst version = bytes[ offset + 5 ];\n\t\tif ( version !== VERSION ) beep8.Utilities.fatal( `Error Loading Cart: Unsupported version ${version}` );\n\n\t\t// Read the payload length\n\t\tconst payloadLength = _readU32BE( bytes, offset + 6 );\n\n\t\t// Calculate the start and end of the payload\n\t\tconst payloadStart = offset + 10;\n\t\tconst payloadEnd = payloadStart + payloadLength;\n\n\t\t// Ensure the payload length is within bounds\n\t\tif ( payloadEnd + 4 > bytes.length ) {\n\t\t\tbeep8.Utilities.fatal( \"Error Loading Cart: Trailer length out of range\" );\n\t\t}\n\n\t\t// Extract the payload data\n\t\tconst payload = bytes.subarray( payloadStart, payloadEnd );\n\n\t\t// Verify the CRC32 checksum\n\t\tconst expectedCrc = _readU32BE( bytes, payloadEnd );\n\t\tif ( _crc32( payload ) !== expectedCrc ) {\n\t\t\tbeep8.Utilities.fatal( \"Error Loading Cart: Bad payload CRC\" );\n\t\t}\n\n\t\t// Decode and return the payload as a JSON object\n\t\treturn JSON.parse( new TextDecoder().decode( payload ) );\n\n\t}\n\n\n\t/**\n\t * Appends a custom trailer to a PNG file.\n\t *\n\t * The trailer includes a magic string, version, payload length, payload data, and a CRC32 checksum.\n\t *\n\t * @param {Blob} pngBlob - The PNG file as a Blob.\n\t * @param {Object} dataObj - The data object to append as a trailer.\n\t * @returns {Blob} - A new Blob containing the original PNG data and the appended trailer.\n\t */\n\tasync function _appendTrailer( pngBlob, dataObj ) {\n\n\t\t// Encode the data object as a JSON string and then to a Uint8Array\n\t\tconst payload = new TextEncoder().encode( JSON.stringify( dataObj ) );\n\n\t\t// Calculate the total header size\n\t\tconst headerSize = MAGIC.length + 1 + 4 + payload.length + 4; // MAGIC + VERSION + LENGTH + PAYLOAD + CRC32\n\t\tconst header = new Uint8Array( headerSize );\n\n\t\tlet offset = 0;\n\n\t\t// Add the magic string\n\t\theader.set( MAGIC, offset );\n\t\toffset += MAGIC.length;\n\n\t\t// Add the version number\n\t\theader[ offset++ ] = VERSION;\n\n\t\t// Add the payload length (big-endian)\n\t\t_writeU32BE( header, offset, payload.length );\n\t\toffset += 4;\n\n\t\t// Add the payload data\n\t\theader.set( payload, offset );\n\t\toffset += payload.length;\n\n\t\t// Add the CRC32 checksum of the payload\n\t\t_writeU32BE( header, offset, _crc32( payload ) );\n\t\toffset += 4;\n\n\t\t// Combine the original PNG data with the new header\n\t\tconst pngBytes = new Uint8Array( await pngBlob.arrayBuffer() );\n\t\treturn new Blob( [ pngBytes, header ], { type: \"image/png\" } );\n\n\t}\n\n\n\t/**\n\t * Finds the position of a magic string in a byte array, searching from the end.\n\t *\n\t * @param {Uint8Array} bytes - The byte array to search in.\n\t * @param {string} magicStr - The magic string to find.\n\t * @returns {number} - The index of the magic string, or -1 if not found.\n\t */\n\tfunction _findMagicFromEnd( bytes, magicStr ) {\n\n\t\t// Encode the magic string into a Uint8Array\n\t\tconst magic = new TextEncoder().encode( magicStr );\n\n\t\t// Start searching from the end of the byte array\n\t\tfor ( let i = bytes.length - magic.length; i >= 0; i-- ) {\n\t\t\tlet found = true;\n\n\t\t\t// Check if the magic string matches at the current position\n\t\t\tfor ( let j = 0; j < magic.length; j++ ) {\n\t\t\t\tif ( bytes[ i + j ] !== magic[ j ] ) {\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the magic string was found, return its starting index\n\t\t\tif ( found ) return i;\n\t\t}\n\n\t\t// Return -1 if the magic string was not found\n\t\treturn -1;\n\n\t}\n\n\n\t/**\n\t * Reads a 32-bit unsigned integer from a byte array in big-endian order.\n\t *\n\t * @param {Uint8Array} byteArray - The byte array to read from.\n\t * @param {number} offset - The offset (index) in the byte array to start reading.\n\t * @returns {number} - The 32-bit unsigned integer.\n\t */\n\tfunction _readU32BE( byteArray, offset ) {\n\n\t\t// Extract four bytes starting at the given offset\n\t\tconst byte1 = byteArray[ offset ];\n\t\tconst byte2 = byteArray[ offset + 1 ];\n\t\tconst byte3 = byteArray[ offset + 2 ];\n\t\tconst byte4 = byteArray[ offset + 3 ];\n\n\t\t// Combine the bytes into a 32-bit unsigned integer (big-endian order)\n\t\treturn ( ( byte1 << 24 ) | ( byte2 << 16 ) | ( byte3 << 8 ) | byte4 ) >>> 0;\n\n\t}\n\n\n\t/**\n\t * Writes a 32-bit unsigned integer to a byte array in big-endian order.\n\t *\n\t * @param {Uint8Array} byteArray - The byte array to write to.\n\t * @param {number} offset - The offset (index) in the byte array to start writing.\n\t * @param {number} value - The 32-bit unsigned integer to write.\n\t * @returns {void}\n\t */\n\tfunction _writeU32BE( byteArray, offset, value ) {\n\n\t\t// Write each byte of the 32-bit integer in big-endian order\n\t\tbyteArray[ offset ] = ( value >>> 24 ) & 0xFF; // Most significant byte\n\t\tbyteArray[ offset + 1 ] = ( value >>> 16 ) & 0xFF;\n\t\tbyteArray[ offset + 2 ] = ( value >>> 8 ) & 0xFF;\n\t\tbyteArray[ offset + 3 ] = value & 0xFF; // Least significant byte\n\n\t}\n\n\n\t/**\n\t * Calculates the CRC32 checksum of a byte array.\n\t *\n\t * @param {Uint8Array} byteArray - The byte array to calculate the checksum for.\n\t * @returns {number} - The CRC32 checksum as an unsigned 32-bit integer.\n\t */\n\tfunction _crc32( byteArray ) {\n\n\t\t// Initialize the CRC value to all 1s\n\t\tlet crc = ~0 >>> 0;\n\n\t\t// Process each byte in the array\n\t\tfor ( let i = 0; i < byteArray.length; i++ ) {\n\t\t\tcrc ^= byteArray[ i ]; // XOR the byte with the current CRC value\n\n\t\t\t// Process each bit in the byte\n\t\t\tfor ( let bit = 0; bit < 8; bit++ ) {\n\t\t\t\t// If the least significant bit is 1, apply the polynomial\n\t\t\t\tif ( crc & 1 ) {\n\t\t\t\t\tcrc = ( crc >>> 1 ) ^ 0xEDB88320;\n\t\t\t\t} else {\n\t\t\t\t\tcrc >>>= 1; // Otherwise, just shift right\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the bitwise NOT of the final CRC value\n\t\treturn ~crc >>> 0;\n\n\t}\n\n} )( beep8 );\n\n( function( beep8 ) {\n\n\tbeep8.Actors = {};\n\n\n\t/**\n\t * The default animations for the actors.\n\t * This can be extended or replaced by your own animations.\n\t *\n\t * @type {Object}\n\t */\n\tbeep8.Actors.animations = {\n\t\t'idle': {\n\t\t\tframes: [ 0 ],\n\t\t\tfps: 1,\n\t\t},\n\t\t'idle-right': {\n\t\t\tframes: [ 1 ],\n\t\t\tfps: 1,\n\t\t},\n\t\t'idle-left': {\n\t\t\tframes: [ -1 ],\n\t\t\tfps: 1,\n\t\t},\n\t\t'idle-up': {\n\t\t\tframes: [ 4 ],\n\t\t\tfps: 1,\n\t\t},\n\t\t'move-right': {\n\t\t\tframes: [ 1, 2 ],\n\t\t\tfps: 4,\n\t\t\tloop: true\n\t\t},\n\t\t'move-left': {\n\t\t\tframes: [ -1, -2 ],\n\t\t\tfps: 4,\n\t\t\tloop: true\n\t\t},\n\t\t'move-up': {\n\t\t\tframes: [ 5, -5 ],\n\t\t\tfps: 4,\n\t\t\tloop: true\n\t\t},\n\t\t'move-down': {\n\t\t\tframes: [ 3, -3 ],\n\t\t\tfps: 4,\n\t\t\tloop: true,\n\t\t},\n\t\t'jump-right': {\n\t\t\tframes: [ 5 ],\n\t\t\tfps: 1,\n\t\t\tloop: false\n\t\t},\n\t\t'jump-left': {\n\t\t\tframes: [ -5 ],\n\t\t\tfps: 1,\n\t\t\tloop: false\n\t\t},\n\t\t'spin-left': {\n\t\t\tframes: [ 0, 1, 4, -1 ],\n\t\t\tfps: 4,\n\t\t\tloop: true\n\t\t},\n\t\t'spin-right': {\n\t\t\tframes: [ 0, -1, 4, 1 ],\n\t\t\tfps: 4,\n\t\t\tloop: true\n\t\t}\n\n\t};\n\n\n\t/**\n\t * Draw an actor at the specified x, y position.\n\t *\n\t * @param {number} ch - The character to draw.\n\t * @param {string} animation - The animation to draw.\n\t * @param {number} x - The x coordinate to draw the actor at.\n\t * @param {number} y - The y coordinate to draw the actor at.\n\t * @param {number} direction - The direction to draw the actor in. 0 = right, 1 = left.\n\t * @returns {void}\n\t */\n\tconst drawActor = function( ch, animation, x, y, direction ) {\n\n\t\tconst font = beep8.TextRenderer.curActors_;\n\t\tconst chrIndex = ( ch * font.getColCount() ) + Math.abs( animationFrame( animation ) );\n\n\t\tbeep8.TextRenderer.spr(\n\t\t\tchrIndex,\n\t\t\tx,\n\t\t\ty,\n\t\t\tfont,\n\t\t\tdirection || 0\n\t\t);\n\n\t}\n\n\n\t/**\n\t * Draw an actor at the current cursor position.\n\t *\n\t * @param {number} ch - The character to draw.\n\t * @param {number} frame - The frame to draw.\n\t * @param {number} direction - The direction to draw the actor in. 0 = right, 1 = left.\n\t * @returns {void}\n\t */\n\tbeep8.Actors.draw = function( ch, animation ) {\n\n\t\tbeep8.Utilities.checkInt( \"ch\", ch );\n\t\tbeep8.Utilities.checkString( \"animation\", animation );\n\n\t\tconst frame = animationFrame( animation );\n\t\tconst direction = frame >= 0 ? 0 : 1;\n\n\t\tdrawActor(\n\t\t\tch, animation,\n\t\t\tbeep8.Core.drawState.cursorCol * beep8.CONFIG.CHR_WIDTH,\n\t\t\tbeep8.Core.drawState.cursorRow * beep8.CONFIG.CHR_HEIGHT,\n\t\t\tdirection || 0\n\t\t);\n\n\t};\n\n\n\t/**\n\t * Draw an actor at the specified x, y position.\n\t * This ignores the cursor position and draws at specific x, y coordinates.\n\t * This is useful for drawing actors in the game world and real-time apps.\n\t *\n\t * By default the animations will start playing based upon the current game\n\t * time. This means they may loop from anywhere in the animation sequence.\n\t * If you specify the startTime then the animation will start from the\n\t * beginning. This is particularly useful for non-looping animations.\n\t *\n\t * The startTime should be stored and not changed each time the animation is\n\t * drawn.\n\t *\n\t * The function will return false if the animation has finished playing.\n\t *\n\t * @param {number} ch The character to draw.\n\t * @param {string} animation The animation to draw.\n\t * @param {number} x The x coordinate to draw the actor at.\n\t * @param {number} y The y coordinate to draw the actor at.\n\t * @param {number} [startTime=null] The time the animation started.\n\t * @returns {boolean} True if the animation is still playing, false if it has finished.\n\t */\n\tbeep8.Actors.spr = function( ch, animation, x, y, startTime = null ) {\n\n\t\tbeep8.Utilities.checkInt( \"ch\", ch );\n\t\tbeep8.Utilities.checkString( \"animation\", animation );\n\t\tbeep8.Utilities.checkNumber( \"x\", x );\n\t\tbeep8.Utilities.checkNumber( \"y\", y );\n\t\tif ( startTime !== null ) beep8.Utilities.checkNumber( \"startTime\", startTime );\n\n\t\tconst frame = animationFrame( animation, startTime );\n\t\tconst anim = beep8.Actors.animations[ animation ];\n\t\tconst direction = frame >= 0 ? 0 : 1;\n\n\t\tif ( !shouldLoopAnimation( anim, startTime ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tdrawActor( ch, animation, x, y, direction || 0 );\n\n\t\t// The animation is still playing.\n\t\treturn true;\n\n\t}\n\n\n\t/**\n\t * Get the current frame of an animation.\n\t * This is used internally to automatically determine what frame to draw.\n\t * This uses delta time to determine the current frame.\n\t *\n\t * @param {string} animation The animation to get the frame for.\n\t * @returns {number} The frame to draw for the animation.\n\t */\n\tconst animationFrame = function( animation, startTime = null ) {\n\n\t\t// Does the animation exist.\n\t\tif ( beep8.Actors.animations[ animation ] === undefined ) {\n\t\t\tbeep8.Utilities.fatal( \"Invalid animation: \" + animation );\n\t\t}\n\n\t\t// If the animation has a start time, use that.\n\t\tif ( startTime === null ) {\n\t\t\tstartTime = beep8.Core.startTime;\n\t\t}\n\n\t\t// Get the current animation properties.\n\t\tconst anim = beep8.Actors.animations[ animation ];\n\t\tlet frame = 0;\n\n\t\t// If there's only one frame, return it.\n\t\tif ( anim.frames.length === 1 ) {\n\t\t\tframe = anim.frames[ 0 ];\n\t\t}\n\n\t\t// If there's more than one frame, calculate the frame to display.\n\t\tif ( anim.frames.length > 1 ) {\n\n\t\t\tconst totalTime = beep8.Core.getNow() - startTime;\n\t\t\tconst frameCount = anim.frames.length;\n\t\t\tconst frameDuration = 1 / anim.fps;\n\n\t\t\t// Dividing totalTime by 1000 to convert ms to seconds.\n\t\t\t// Dividing by frameDuration to get the current frame.\n\t\t\t// Modulo frameCount to loop the animation.\n\t\t\tconst frameIndex = Math.floor( ( totalTime / 1000 ) / frameDuration % frameCount );\n\n\t\t\tframe = anim.frames[ frameIndex ];\n\n\t\t}\n\n\t\treturn frame;\n\n\t}\n\n\n\t/**\n\t * Checks if the animation has finished looping.\n\t *\n\t * @param {Object} anim - The animation object.\n\t * @param {number} startTime - The start time of the animation.\n\t * @returns {boolean} - Returns true if the animation should continue, false if it has finished looping.\n\t */\n\tconst shouldLoopAnimation = function( anim, startTime ) {\n\n\t\t// If the animation has not started or is set to loop, continue the animation.\n\t\tif ( startTime === null || anim.loop === true ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Calculate the total length of the animation in milliseconds.\n\t\tconst animationLength = anim.frames.length * ( 1000 / anim.fps );\n\n\t\t// Check if the current time exceeds the animation length.\n\t\tif ( beep8.Core.getNow() - startTime >= animationLength ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n} )( beep8 );\n\n// ZzFX - Zuper Zmall Zound Zynth - Micro Edition\n// MIT License - Copyright 2019 Frank Force\n// https://github.com/KilledByAPixel/ZzFX\n\n// This is a minified build of zzfx for use in size coding projects.\n// You can use zzfxV to set volume.\n// Feel free to minify it further for your own needs!\n\n'use strict';\n\n///////////////////////////////////////////////////////////////////////////////\n\n// ZzFXMicro - Zuper Zmall Zound Zynth - v1.3.1 by Frank Force\n\n// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @output_file_name ZzFXMicro.min.js\n// @js_externs zzfx, zzfxG, zzfxP, zzfxV, zzfxX\n// @language_out ECMASCRIPT_2019\n// ==/ClosureCompiler==\n\nconst zzfx = ( ...z ) => zzfxP( zzfxG( ...z ) ); // generate and play sound\nconst zzfxV = .3;    // volume\nconst zzfxR = 44100; // sample rate\nconst zzfxX = new AudioContext; // audio context\nconst zzfxP = ( ...samples ) =>  // play samples\n{\n\t// create buffer and source\n\tlet buffer = zzfxX.createBuffer( samples.length, samples[ 0 ].length, zzfxR ),\n\t\tsource = zzfxX.createBufferSource();\n\n\t// copy samples to buffer and play\n\tsamples.map( ( d, i ) => buffer.getChannelData( i ).set( d ) );\n\tsource.buffer = buffer;\n\tsource.connect( zzfxX.destination );\n\tsource.start();\n\treturn source;\n}\nconst zzfxG = // generate samples\n\t(\n\t\t// parameters\n\t\tvolume = 1, randomness = .05, frequency = 220, attack = 0, sustain = 0,\n\t\trelease = .1, shape = 0, shapeCurve = 1, slide = 0, deltaSlide = 0,\n\t\tpitchJump = 0, pitchJumpTime = 0, repeatTime = 0, noise = 0, modulation = 0,\n\t\tbitCrush = 0, delay = 0, sustainVolume = 1, decay = 0, tremolo = 0, filter = 0\n\t) => {\n\t\t// init parameters\n\t\tlet PI2 = Math.PI * 2, sign = v => v < 0 ? -1 : 1,\n\t\t\tstartSlide = slide *= 500 * PI2 / zzfxR / zzfxR,\n\t\t\tstartFrequency = frequency *=\n\t\t\t\t( 1 + randomness * 2 * Math.random() - randomness ) * PI2 / zzfxR,\n\t\t\tb = [], t = 0, tm = 0, i = 0, j = 1, r = 0, c = 0, s = 0, f, length,\n\n\t\t\t// biquad LP/HP filter\n\t\t\tquality = 2, w = PI2 * Math.abs( filter ) * 2 / zzfxR,\n\t\t\tcos = Math.cos( w ), alpha = Math.sin( w ) / 2 / quality,\n\t\t\ta0 = 1 + alpha, a1 = -2 * cos / a0, a2 = ( 1 - alpha ) / a0,\n\t\t\tb0 = ( 1 + sign( filter ) * cos ) / 2 / a0,\n\t\t\tb1 = -( sign( filter ) + cos ) / a0, b2 = b0,\n\t\t\tx2 = 0, x1 = 0, y2 = 0, y1 = 0;\n\n\t\t// scale by sample rate\n\t\tattack = attack * zzfxR + 9; // minimum attack to prevent pop\n\t\tdecay *= zzfxR;\n\t\tsustain *= zzfxR;\n\t\trelease *= zzfxR;\n\t\tdelay *= zzfxR;\n\t\tdeltaSlide *= 500 * PI2 / zzfxR ** 3;\n\t\tmodulation *= PI2 / zzfxR;\n\t\tpitchJump *= PI2 / zzfxR;\n\t\tpitchJumpTime *= zzfxR;\n\t\trepeatTime = repeatTime * zzfxR | 0;\n\t\tvolume *= zzfxV;\n\n\t\t// generate waveform\n\t\tfor ( length = attack + decay + sustain + release + delay | 0;\n\t\t\ti < length; b[ i++ ] = s * volume )               // sample\n\t\t{\n\t\t\tif ( !( ++c % ( bitCrush * 100 | 0 ) ) )                   // bit crush\n\t\t\t{\n\t\t\t\ts = shape ? shape > 1 ? shape > 2 ? shape > 3 ?      // wave shape\n\t\t\t\t\tMath.sin( t ** 3 ) :                       // 4 noise\n\t\t\t\t\tMath.max( Math.min( Math.tan( t ), 1 ), -1 ) :  // 3 tan\n\t\t\t\t\t1 - ( 2 * t / PI2 % 2 + 2 ) % 2 :                     // 2 saw\n\t\t\t\t\t1 - 4 * Math.abs( Math.round( t / PI2 ) - t / PI2 ) : // 1 triangle\n\t\t\t\t\tMath.sin( t );                           // 0 sin\n\n\t\t\t\ts = ( repeatTime ?\n\t\t\t\t\t1 - tremolo + tremolo * Math.sin( PI2 * i / repeatTime ) // tremolo\n\t\t\t\t\t: 1 ) *\n\t\t\t\t\tsign( s ) * ( Math.abs( s ) ** shapeCurve ) *      // curve\n\t\t\t\t\t( i < attack ? i / attack :                 // attack\n\t\t\t\t\t\ti < attack + decay ?                     // decay\n\t\t\t\t\t\t\t1 - ( ( i - attack ) / decay ) * ( 1 - sustainVolume ) : // decay falloff\n\t\t\t\t\t\t\ti < attack + decay + sustain ?          // sustain\n\t\t\t\t\t\t\t\tsustainVolume :                          // sustain volume\n\t\t\t\t\t\t\t\ti < length - delay ?                     // release\n\t\t\t\t\t\t\t\t\t( length - i - delay ) / release *           // release falloff\n\t\t\t\t\t\t\t\t\tsustainVolume :                          // release volume\n\t\t\t\t\t\t\t\t\t0 );                                      // post release\n\n\t\t\t\ts = delay ? s / 2 + ( delay > i ? 0 :           // delay\n\t\t\t\t\t( i < length - delay ? 1 : ( length - i ) / delay ) * // release delay\n\t\t\t\t\tb[ i - delay | 0 ] / 2 / volume ) : s;              // sample delay\n\n\t\t\t\tif ( filter )                                   // apply filter\n\t\t\t\t\ts = y1 = b2 * x2 + b1 * ( x2 = x1 ) + b0 * ( x1 = s ) - a2 * y2 - a1 * ( y2 = y1 );\n\t\t\t}\n\n\t\t\tf = ( frequency += slide += deltaSlide ) *// frequency\n\t\t\t\tMath.cos( modulation * tm++ );          // modulation\n\t\t\tt += f + f * noise * Math.sin( i ** 5 );        // noise\n\n\t\t\tif ( j && ++j > pitchJumpTime )           // pitch jump\n\t\t\t{\n\t\t\t\tfrequency += pitchJump;             // apply pitch jump\n\t\t\t\tstartFrequency += pitchJump;        // also apply to start\n\t\t\t\tj = 0;                              // stop pitch jump time\n\t\t\t}\n\n\t\t\tif ( repeatTime && !( ++r % repeatTime ) )  // repeat\n\t\t\t{\n\t\t\t\tfrequency = startFrequency;         // reset frequency\n\t\t\t\tslide = startSlide;                 // reset slide\n\t\t\t\tj = j || 1;                         // reset pitch jump time\n\t\t\t}\n\t\t}\n\n\t\treturn b;\n\t}\n( function() {\n\n\t// AudioContext.\n\tconst audioCtx = new AudioContext();\n\n\t// Master gain node for volume control.\n\tconst masterGain = audioCtx.createGain();\n\tmasterGain.gain.value = 1;  // default volume (0.0\u20131.0)\n\tmasterGain.connect( audioCtx.destination );\n\n\t// Cache for generated note buffers.\n\tlet noteBuffers = {};\n\n\t// Scheduler variables.\n\tlet schedulerInterval = null;\n\tlet schedules = []; // Array of event arrays per track.\n\tlet schedulePointers = []; // Next event index per track.\n\tlet playbackStartTime = 0; // When playback starts.\n\tlet tempo = 125; // Default tempo.\n\tconst lookaheadTime = 0.5; // Only schedule events within the next 0.5 seconds.\n\tconst schedulerIntervalMs = 50; // Check every 50ms.\n\tconst volumeMultiplier = 0.1; // Volume multiplier.\n\n\t// iOS audio unlock flag.\n\tlet unlocked = false;\n\n\t// -----------------------------\n\t// Instrument synthesis functions.\n\t// -----------------------------\n\tconst sineComponent = ( x, offset ) => Math.sin( x * 6.28 + offset );\n\n\tconst pianoWaveform = ( x ) => {\n\t\treturn sineComponent( x, Math.pow( sineComponent( x, 0 ), 2 ) +\n\t\t\tsineComponent( x, 0.25 ) * 0.75 +\n\t\t\tsineComponent( x, 0.5 ) * 0.1 ) * volumeMultiplier;\n\t}\n\n\tconst piano2WaveForm = ( x ) => {\n\t\treturn ( Math.sin( x * 6.28 ) * Math.sin( x * 3.14 ) ) * volumeMultiplier;\n\t}\n\tconst sineWaveform = ( x ) => {\n\t\treturn Math.sin( 2 * Math.PI * x ) * volumeMultiplier;\n\t}\n\tconst squareWaveform = ( x ) => {\n\t\treturn ( Math.sin( 2 * Math.PI * x ) >= 0 ? 1 : -1 ) * volumeMultiplier;\n\t}\n\tconst sawtoothWaveform = ( x ) => {\n\t\tlet t = x - Math.floor( x );\n\t\treturn ( 2 * t - 1 ) * volumeMultiplier;\n\t};\n\tconst triangleWaveform = ( x ) => {\n\t\tlet t = x - Math.floor( x );\n\t\treturn ( 2 * Math.abs( 2 * t - 1 ) - 1 ) * volumeMultiplier;\n\t};\n\tconst drumWaveform = ( x ) => {\n\t\treturn ( ( Math.random() * 2 - 1 ) * Math.exp( -x / 10 ) ) * volumeMultiplier;\n\t};\n\tconst softDrumWaveform = ( x ) => {\n\t\treturn ( Math.sin( x * 2 ) + 0.3 * ( Math.random() - 0.5 ) ) *\n\t\t\tMath.exp( -x / 15 ) * volumeMultiplier * 2;\n\t};\n\n\t// Mapping of instrument ids to synthesis functions.\n\t// 0: Piano, 1: Piano 2, 2: Sine, 3: Sawtooth, 4: Square, 5: Triangle, 6: Drum, 7: Soft Drum\n\tconst instrumentMapping = [\n\t\tpianoWaveform,\n\t\tpiano2WaveForm,\n\t\tsineWaveform,\n\t\tsawtoothWaveform,\n\t\tsquareWaveform,\n\t\ttriangleWaveform,\n\t\tdrumWaveform,\n\t\tsoftDrumWaveform,\n\t];\n\n\t// -----------------------------\n\t// Main Music Player Function (p1)\n\t// -----------------------------\n\t/**\n\t * Use as a tag template literal:\n\t *\n\t *     p1`\n\t *     0|f  dh   d T-X   X  T    X X V|\n\t *     1|Y   Y Y Y Y Y Y Y   Y Y Y Y Y Y|\n\t *     0|V   X   T   T   c   c   T   X|\n\t *     0|c fVa a-   X T R  aQT Ta   RO- X|\n\t *     [70.30]\n\t *     `\n\t */\n\tfunction p1( params ) {\n\n\t\tif ( Array.isArray( params ) ) {\n\t\t\tparams = params[ 0 ];\n\t\t}\n\t\tif ( !params || params.trim() === '' ) {\n\t\t\tp1.stop();\n\t\t\treturn;\n\t\t}\n\n\t\tif ( noteBuffers.length > 200 ) {\n\t\t\tconsole.warn( \"Beep8.Music: Note buffers exceeded limit, clearing old buffers.\" );\n\t\t\tnoteBuffers = {};\n\t\t}\n\n\t\t// Reset defaults.\n\t\ttempo = 125;\n\t\tlet baseNoteDuration = 0.5; // seconds per note.\n\t\tschedules = [];\n\n\t\t// Split input into lines.\n\t\tconst rawLines = params.split( '\\n' ).map( line => line.trim() );\n\t\tlet noteInterval = tempo / 1000; // seconds per note step.\n\n\t\t// Regular expression for track lines: instrument|track data|\n\t\tconst trackLineRegex = /^([0-9])\\|(.*)\\|$/;\n\n\t\trawLines.forEach( line => {\n\t\t\tif ( !line ) return;\n\n\t\t\t// Tempo/note duration lines.\n\t\t\tif ( ( line.startsWith( '[' ) && line.endsWith( ']' ) ) || ( /^\\d+(\\.\\d+)?$/.test( line ) ) ) {\n\t\t\t\tconst timing = line.replace( /[\\[\\]]/g, '' ).split( '.' );\n\t\t\t\ttempo = parseFloat( timing[ 0 ] ) || tempo;\n\t\t\t\tbaseNoteDuration = ( parseFloat( timing[ 1 ] ) || 50 ) / 100;\n\t\t\t\tnoteInterval = tempo / 1000;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Track lines.\n\t\t\tif ( !trackLineRegex.test( line ) ) {\n\t\t\t\tconsole.error( \"Track lines must be in the format 'instrument|track data|': \" + line );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = line.match( trackLineRegex );\n\t\t\tconst instrumentId = parseInt( match[ 1 ], 10 );\n\t\t\tconst instrumentFn = instrumentMapping[ instrumentId ] || instrumentMapping[ 0 ];\n\t\t\tconst trackData = match[ 2 ].trim();\n\n\t\t\tlet events = [];\n\t\t\t// Parse trackData character by character.\n\t\t\tfor ( let i = 0; i < trackData.length; i++ ) {\n\t\t\t\tconst char = trackData[ i ];\n\t\t\t\tlet dashCount = 1;\n\t\t\t\twhile ( i + dashCount < trackData.length && trackData[ i + dashCount ] === '-' ) {\n\t\t\t\t\tdashCount++;\n\t\t\t\t}\n\t\t\t\tlet eventTime = i * noteInterval;\n\t\t\t\tif ( char === ' ' ) {\n\t\t\t\t\tevents.push( { startTime: eventTime, noteBuffer: null } );\n\t\t\t\t\ti += dashCount - 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet noteValue = char.charCodeAt( 0 );\n\t\t\t\tnoteValue -= noteValue > 90 ? 71 : 65;\n\t\t\t\tlet noteDuration = dashCount * baseNoteDuration * ( tempo / 125 );\n\t\t\t\tlet noteBuffer = createNoteBuffer( noteValue, noteDuration, 44100, instrumentFn );\n\t\t\t\tevents.push( { startTime: eventTime, noteBuffer: noteBuffer } );\n\t\t\t\ti += dashCount - 1;\n\t\t\t}\n\t\t\tschedules.push( events );\n\t\t} );\n\n\t\t// Initialize schedule pointers and calculate loop duration.\n\t\tschedulePointers = schedules.map( () => 0 );\n\t\tplaybackStartTime = audioCtx.currentTime + 0.1;\n\n\t\tp1.stop();\n\t\tschedulerInterval = setInterval( schedulerFunction, schedulerIntervalMs );\n\t}\n\n\n\t/**\n\t * The scheduler function ensures the notes are played at the right time.\n\t *\n\t * This function is called every 50ms to check if any notes need to be played.\n\t *\n\t * The scheduler keeps track of the current time and the current note interval.\n\t * It then checks each track to see if a note needs to be played.\n\t *\n\t * @returns {void}\n\t */\n\tfunction schedulerFunction() {\n\n\t\tconst currentTime = audioCtx.currentTime;\n\t\tconst noteInterval = tempo / 1000; // note duration in seconds\n\t\t// Use the larger of the fixed lookahead and the current note interval.\n\t\tconst effectiveLookahead = Math.max( lookaheadTime, noteInterval );\n\t\tschedules.forEach( ( events, trackIndex ) => {\n\t\t\tlet pointer = schedulePointers[ trackIndex ];\n\t\t\tconst trackLength = events.length;\n\t\t\tif ( trackLength === 0 ) return;\n\t\t\tconst step = pointer % trackLength;\n\t\t\tconst loopCount = Math.floor( pointer / trackLength );\n\t\t\tconst eventTime = playbackStartTime + ( step * noteInterval ) + ( loopCount * trackLength * noteInterval );\n\t\t\tif ( eventTime < currentTime + effectiveLookahead ) {\n\t\t\t\tconst event = events[ step ];\n\t\t\t\tif ( event.noteBuffer ) {\n\t\t\t\t\tplayNoteBuffer( event.noteBuffer, audioCtx, eventTime );\n\t\t\t\t}\n\t\t\t\tschedulePointers[ trackIndex ]++;\n\t\t\t}\n\t\t} );\n\t\tif ( !p1.loop ) {\n\t\t\tconst done = schedules.every( ( events, i ) => schedulePointers[ i ] >= events.length );\n\t\t\tif ( done ) {\n\t\t\t\tp1.stop();\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Stop playback by clearing the scheduler and stopping all playing sources.\n\t */\n\tp1.stop = function() {\n\t\tif ( schedulerInterval !== null ) {\n\t\t\tclearInterval( schedulerInterval );\n\t\t\tschedulerInterval = null;\n\t\t}\n\t\tplayingSources.forEach( source => source.stop() );\n\t\tplayingSources = [];\n\t};\n\n\n\t/**\n\t * Check if music is currently playing.\n\t */\n\tp1.isPlaying = function() {\n\t\treturn schedulerInterval !== null;\n\t};\n\n\n\t/**\n\t * Set the tempo (in BPM).\n\t */\n\tp1.setTempo = function( newTempo ) {\n\t\tif ( newTempo < 50 ) newTempo = 50;\n\n\t\t// Calculate old and new note intervals in seconds.\n\t\tconst oldNoteInterval = tempo / 1000;\n\t\tconst newNoteInterval = newTempo / 1000;\n\n\t\t// Determine how much time has elapsed since playback started.\n\t\tconst elapsed = audioCtx.currentTime - playbackStartTime;\n\n\t\t// Compute the current note position (could be fractional).\n\t\tconst currentIndex = elapsed / oldNoteInterval;\n\n\t\t// Rebase playbackStartTime so that the currentIndex now corresponds to the current time.\n\t\tplaybackStartTime = audioCtx.currentTime - currentIndex * newNoteInterval;\n\n\t\t// Finally, update the tempo.\n\t\ttempo = newTempo;\n\t};\n\n\tp1.setVolume = function( value ) {\n\t\t// clamp 0.0\u20131.0\n\t\tmasterGain.gain.value = Math.min( 1, Math.max( 0, value ) );\n\t};\n\n\n\tp1.clearCache = function() {\n\t\tnoteBuffers = {};\n\t};\n\n\n\t// Loop property: set to true to repeat playback.\n\tp1.loop = true;\n\n\t/**\n\t * Create an audio buffer for a given note.\n\t */\n\tconst createNoteBuffer = ( note, durationSeconds, sampleRate, instrumentFn ) => {\n\t\tconst key = note + '-' + durationSeconds + '-' + instrumentFn.name;\n\t\tlet buffer = noteBuffers[ key ];\n\t\tif ( note >= 0 && !buffer ) {\n\t\t\tconst frequencyFactor = 65.406 * Math.pow( 1.06, note ) / sampleRate;\n\t\t\tconst totalSamples = Math.floor( sampleRate * durationSeconds );\n\t\t\tconst attackSamples = 88;\n\t\t\tconst decaySamples = sampleRate * ( durationSeconds - 0.002 );\n\t\t\tbuffer = noteBuffers[ key ] = audioCtx.createBuffer( 1, totalSamples, sampleRate );\n\t\t\tconst channelData = buffer.getChannelData( 0 );\n\t\t\tfor ( let i = 0; i < totalSamples; i++ ) {\n\t\t\t\tlet amplitude;\n\t\t\t\tif ( i < attackSamples ) {\n\t\t\t\t\tamplitude = i / ( attackSamples + 0.2 );\n\t\t\t\t} else {\n\t\t\t\t\tamplitude = Math.pow(\n\t\t\t\t\t\t1 - ( ( i - attackSamples ) / decaySamples ),\n\t\t\t\t\t\tMath.pow( Math.log( 1e4 * frequencyFactor ) / 2, 2 )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tchannelData[ i ] = amplitude * instrumentFn( i * frequencyFactor );\n\t\t\t}\n\t\t\t// Unlock audio on iOS if needed.\n\t\t\tif ( !unlocked ) {\n\t\t\t\tplayNoteBuffer( buffer, audioCtx, audioCtx.currentTime, true );\n\t\t\t\tunlocked = true;\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t};\n\n\t// Array to keep track of currently playing sources.\n\tlet playingSources = [];\n\n\n\t/**\n\t * Play an audio buffer at a scheduled time.\n\t */\n\tconst playNoteBuffer = ( buffer, context, when, stopImmediately = false ) => {\n\t\tconst source = context.createBufferSource();\n\t\tsource.buffer = buffer;\n\n\t\tsource.connect( masterGain );\n\t\tsource.start( when );\n\t\tplayingSources.push( source );\n\n\t\t// source.connect( context.destination );\n\t\t// source.start( when );\n\t\t// playingSources.push( source );\n\n\t\tif ( stopImmediately ) {\n\t\t\tsource.stop();\n\t\t}\n\t\tsource.onended = () => {\n\t\t\tconst index = playingSources.indexOf( source );\n\t\t\tif ( index !== -1 ) {\n\t\t\t\tplayingSources.splice( index, 1 );\n\t\t\t}\n\t\t};\n\t};\n\n\t// Expose the p1 function globally.\n\twindow.p1 = p1;\n\n} )();\n\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Patrick Gansterer <paroga@paroga.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n( function( global, undefined ) {\n\t\"use strict\";\n\tvar POW_2_24 = Math.pow( 2, -24 ),\n\t\tPOW_2_32 = Math.pow( 2, 32 ),\n\t\tPOW_2_53 = Math.pow( 2, 53 );\n\n\tfunction encode( value ) {\n\t\tvar data = new ArrayBuffer( 256 );\n\t\tvar dataView = new DataView( data );\n\t\tvar lastLength;\n\t\tvar offset = 0;\n\n\t\tfunction ensureSpace( length ) {\n\t\t\tvar newByteLength = data.byteLength;\n\t\t\tvar requiredLength = offset + length;\n\t\t\twhile ( newByteLength < requiredLength )\n\t\t\t\tnewByteLength *= 2;\n\t\t\tif ( newByteLength !== data.byteLength ) {\n\t\t\t\tvar oldDataView = dataView;\n\t\t\t\tdata = new ArrayBuffer( newByteLength );\n\t\t\t\tdataView = new DataView( data );\n\t\t\t\tvar uint32count = ( offset + 3 ) >> 2;\n\t\t\t\tfor ( var i = 0; i < uint32count; ++i )\n\t\t\t\t\tdataView.setUint32( i * 4, oldDataView.getUint32( i * 4 ) );\n\t\t\t}\n\n\t\t\tlastLength = length;\n\t\t\treturn dataView;\n\t\t}\n\t\tfunction write() {\n\t\t\toffset += lastLength;\n\t\t}\n\t\tfunction writeFloat64( value ) {\n\t\t\twrite( ensureSpace( 8 ).setFloat64( offset, value ) );\n\t\t}\n\t\tfunction writeUint8( value ) {\n\t\t\twrite( ensureSpace( 1 ).setUint8( offset, value ) );\n\t\t}\n\t\tfunction writeUint8Array( value ) {\n\t\t\tvar dataView = ensureSpace( value.length );\n\t\t\tfor ( var i = 0; i < value.length; ++i )\n\t\t\t\tdataView.setUint8( offset + i, value[ i ] );\n\t\t\twrite();\n\t\t}\n\t\tfunction writeUint16( value ) {\n\t\t\twrite( ensureSpace( 2 ).setUint16( offset, value ) );\n\t\t}\n\t\tfunction writeUint32( value ) {\n\t\t\twrite( ensureSpace( 4 ).setUint32( offset, value ) );\n\t\t}\n\t\tfunction writeUint64( value ) {\n\t\t\tvar low = value % POW_2_32;\n\t\t\tvar high = ( value - low ) / POW_2_32;\n\t\t\tvar dataView = ensureSpace( 8 );\n\t\t\tdataView.setUint32( offset, high );\n\t\t\tdataView.setUint32( offset + 4, low );\n\t\t\twrite();\n\t\t}\n\t\tfunction writeTypeAndLength( type, length ) {\n\t\t\tif ( length < 24 ) {\n\t\t\t\twriteUint8( type << 5 | length );\n\t\t\t} else if ( length < 0x100 ) {\n\t\t\t\twriteUint8( type << 5 | 24 );\n\t\t\t\twriteUint8( length );\n\t\t\t} else if ( length < 0x10000 ) {\n\t\t\t\twriteUint8( type << 5 | 25 );\n\t\t\t\twriteUint16( length );\n\t\t\t} else if ( length < 0x100000000 ) {\n\t\t\t\twriteUint8( type << 5 | 26 );\n\t\t\t\twriteUint32( length );\n\t\t\t} else {\n\t\t\t\twriteUint8( type << 5 | 27 );\n\t\t\t\twriteUint64( length );\n\t\t\t}\n\t\t}\n\n\t\tfunction encodeItem( value ) {\n\t\t\tvar i;\n\n\t\t\tif ( value === false )\n\t\t\t\treturn writeUint8( 0xf4 );\n\t\t\tif ( value === true )\n\t\t\t\treturn writeUint8( 0xf5 );\n\t\t\tif ( value === null )\n\t\t\t\treturn writeUint8( 0xf6 );\n\t\t\tif ( value === undefined )\n\t\t\t\treturn writeUint8( 0xf7 );\n\n\t\t\tswitch ( typeof value ) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\tif ( Math.floor( value ) === value ) {\n\t\t\t\t\t\tif ( 0 <= value && value <= POW_2_53 )\n\t\t\t\t\t\t\treturn writeTypeAndLength( 0, value );\n\t\t\t\t\t\tif ( -POW_2_53 <= value && value < 0 )\n\t\t\t\t\t\t\treturn writeTypeAndLength( 1, -( value + 1 ) );\n\t\t\t\t\t}\n\t\t\t\t\twriteUint8( 0xfb );\n\t\t\t\t\treturn writeFloat64( value );\n\n\t\t\t\tcase \"string\":\n\t\t\t\t\tvar utf8data = [];\n\t\t\t\t\tfor ( i = 0; i < value.length; ++i ) {\n\t\t\t\t\t\tvar charCode = value.charCodeAt( i );\n\t\t\t\t\t\tif ( charCode < 0x80 ) {\n\t\t\t\t\t\t\tutf8data.push( charCode );\n\t\t\t\t\t\t} else if ( charCode < 0x800 ) {\n\t\t\t\t\t\t\tutf8data.push( 0xc0 | charCode >> 6 );\n\t\t\t\t\t\t\tutf8data.push( 0x80 | charCode & 0x3f );\n\t\t\t\t\t\t} else if ( charCode < 0xd800 ) {\n\t\t\t\t\t\t\tutf8data.push( 0xe0 | charCode >> 12 );\n\t\t\t\t\t\t\tutf8data.push( 0x80 | ( charCode >> 6 ) & 0x3f );\n\t\t\t\t\t\t\tutf8data.push( 0x80 | charCode & 0x3f );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcharCode = ( charCode & 0x3ff ) << 10;\n\t\t\t\t\t\t\tcharCode |= value.charCodeAt( ++i ) & 0x3ff;\n\t\t\t\t\t\t\tcharCode += 0x10000;\n\n\t\t\t\t\t\t\tutf8data.push( 0xf0 | charCode >> 18 );\n\t\t\t\t\t\t\tutf8data.push( 0x80 | ( charCode >> 12 ) & 0x3f );\n\t\t\t\t\t\t\tutf8data.push( 0x80 | ( charCode >> 6 ) & 0x3f );\n\t\t\t\t\t\t\tutf8data.push( 0x80 | charCode & 0x3f );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\twriteTypeAndLength( 3, utf8data.length );\n\t\t\t\t\treturn writeUint8Array( utf8data );\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar length;\n\t\t\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\t\t\tlength = value.length;\n\t\t\t\t\t\twriteTypeAndLength( 4, length );\n\t\t\t\t\t\tfor ( i = 0; i < length; ++i )\n\t\t\t\t\t\t\tencodeItem( value[ i ] );\n\t\t\t\t\t} else if ( value instanceof Uint8Array ) {\n\t\t\t\t\t\twriteTypeAndLength( 2, value.length );\n\t\t\t\t\t\twriteUint8Array( value );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar keys = Object.keys( value );\n\t\t\t\t\t\tlength = keys.length;\n\t\t\t\t\t\twriteTypeAndLength( 5, length );\n\t\t\t\t\t\tfor ( i = 0; i < length; ++i ) {\n\t\t\t\t\t\t\tvar key = keys[ i ];\n\t\t\t\t\t\t\tencodeItem( key );\n\t\t\t\t\t\t\tencodeItem( value[ key ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tencodeItem( value );\n\n\t\tif ( \"slice\" in data )\n\t\t\treturn data.slice( 0, offset );\n\n\t\tvar ret = new ArrayBuffer( offset );\n\t\tvar retView = new DataView( ret );\n\t\tfor ( var i = 0; i < offset; ++i )\n\t\t\tretView.setUint8( i, dataView.getUint8( i ) );\n\t\treturn ret;\n\t}\n\n\tfunction decode( data, tagger, simpleValue ) {\n\t\tvar dataView = new DataView( data );\n\t\tvar offset = 0;\n\n\t\tif ( typeof tagger !== \"function\" )\n\t\t\ttagger = function( value ) { return value; };\n\t\tif ( typeof simpleValue !== \"function\" )\n\t\t\tsimpleValue = function() { return undefined; };\n\n\t\tfunction read( value, length ) {\n\t\t\toffset += length;\n\t\t\treturn value;\n\t\t}\n\t\tfunction readArrayBuffer( length ) {\n\t\t\treturn read( new Uint8Array( data, offset, length ), length );\n\t\t}\n\t\tfunction readFloat16() {\n\t\t\tvar tempArrayBuffer = new ArrayBuffer( 4 );\n\t\t\tvar tempDataView = new DataView( tempArrayBuffer );\n\t\t\tvar value = readUint16();\n\n\t\t\tvar sign = value & 0x8000;\n\t\t\tvar exponent = value & 0x7c00;\n\t\t\tvar fraction = value & 0x03ff;\n\n\t\t\tif ( exponent === 0x7c00 )\n\t\t\t\texponent = 0xff << 10;\n\t\t\telse if ( exponent !== 0 )\n\t\t\t\texponent += ( 127 - 15 ) << 10;\n\t\t\telse if ( fraction !== 0 )\n\t\t\t\treturn fraction * POW_2_24;\n\n\t\t\ttempDataView.setUint32( 0, sign << 16 | exponent << 13 | fraction << 13 );\n\t\t\treturn tempDataView.getFloat32( 0 );\n\t\t}\n\t\tfunction readFloat32() {\n\t\t\treturn read( dataView.getFloat32( offset ), 4 );\n\t\t}\n\t\tfunction readFloat64() {\n\t\t\treturn read( dataView.getFloat64( offset ), 8 );\n\t\t}\n\t\tfunction readUint8() {\n\t\t\treturn read( dataView.getUint8( offset ), 1 );\n\t\t}\n\t\tfunction readUint16() {\n\t\t\treturn read( dataView.getUint16( offset ), 2 );\n\t\t}\n\t\tfunction readUint32() {\n\t\t\treturn read( dataView.getUint32( offset ), 4 );\n\t\t}\n\t\tfunction readUint64() {\n\t\t\treturn readUint32() * POW_2_32 + readUint32();\n\t\t}\n\t\tfunction readBreak() {\n\t\t\tif ( dataView.getUint8( offset ) !== 0xff )\n\t\t\t\treturn false;\n\t\t\toffset += 1;\n\t\t\treturn true;\n\t\t}\n\t\tfunction readLength( additionalInformation ) {\n\t\t\tif ( additionalInformation < 24 )\n\t\t\t\treturn additionalInformation;\n\t\t\tif ( additionalInformation === 24 )\n\t\t\t\treturn readUint8();\n\t\t\tif ( additionalInformation === 25 )\n\t\t\t\treturn readUint16();\n\t\t\tif ( additionalInformation === 26 )\n\t\t\t\treturn readUint32();\n\t\t\tif ( additionalInformation === 27 )\n\t\t\t\treturn readUint64();\n\t\t\tif ( additionalInformation === 31 )\n\t\t\t\treturn -1;\n\t\t\tthrow \"Invalid length encoding\";\n\t\t}\n\t\tfunction readIndefiniteStringLength( majorType ) {\n\t\t\tvar initialByte = readUint8();\n\t\t\tif ( initialByte === 0xff )\n\t\t\t\treturn -1;\n\t\t\tvar length = readLength( initialByte & 0x1f );\n\t\t\tif ( length < 0 || ( initialByte >> 5 ) !== majorType )\n\t\t\t\tthrow \"Invalid indefinite length element\";\n\t\t\treturn length;\n\t\t}\n\n\t\tfunction appendUtf16data( utf16data, length ) {\n\t\t\tfor ( var i = 0; i < length; ++i ) {\n\t\t\t\tvar value = readUint8();\n\t\t\t\tif ( value & 0x80 ) {\n\t\t\t\t\tif ( value < 0xe0 ) {\n\t\t\t\t\t\tvalue = ( value & 0x1f ) << 6\n\t\t\t\t\t\t\t| ( readUint8() & 0x3f );\n\t\t\t\t\t\tlength -= 1;\n\t\t\t\t\t} else if ( value < 0xf0 ) {\n\t\t\t\t\t\tvalue = ( value & 0x0f ) << 12\n\t\t\t\t\t\t\t| ( readUint8() & 0x3f ) << 6\n\t\t\t\t\t\t\t| ( readUint8() & 0x3f );\n\t\t\t\t\t\tlength -= 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = ( value & 0x0f ) << 18\n\t\t\t\t\t\t\t| ( readUint8() & 0x3f ) << 12\n\t\t\t\t\t\t\t| ( readUint8() & 0x3f ) << 6\n\t\t\t\t\t\t\t| ( readUint8() & 0x3f );\n\t\t\t\t\t\tlength -= 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( value < 0x10000 ) {\n\t\t\t\t\tutf16data.push( value );\n\t\t\t\t} else {\n\t\t\t\t\tvalue -= 0x10000;\n\t\t\t\t\tutf16data.push( 0xd800 | ( value >> 10 ) );\n\t\t\t\t\tutf16data.push( 0xdc00 | ( value & 0x3ff ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction decodeItem() {\n\t\t\tvar initialByte = readUint8();\n\t\t\tvar majorType = initialByte >> 5;\n\t\t\tvar additionalInformation = initialByte & 0x1f;\n\t\t\tvar i;\n\t\t\tvar length;\n\n\t\t\tif ( majorType === 7 ) {\n\t\t\t\tswitch ( additionalInformation ) {\n\t\t\t\t\tcase 25:\n\t\t\t\t\t\treturn readFloat16();\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\treturn readFloat32();\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\treturn readFloat64();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlength = readLength( additionalInformation );\n\t\t\tif ( length < 0 && ( majorType < 2 || 6 < majorType ) )\n\t\t\t\tthrow \"Invalid length\";\n\n\t\t\tswitch ( majorType ) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn length;\n\t\t\t\tcase 1:\n\t\t\t\t\treturn -1 - length;\n\t\t\t\tcase 2:\n\t\t\t\t\tif ( length < 0 ) {\n\t\t\t\t\t\tvar elements = [];\n\t\t\t\t\t\tvar fullArrayLength = 0;\n\t\t\t\t\t\twhile ( ( length = readIndefiniteStringLength( majorType ) ) >= 0 ) {\n\t\t\t\t\t\t\tfullArrayLength += length;\n\t\t\t\t\t\t\telements.push( readArrayBuffer( length ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar fullArray = new Uint8Array( fullArrayLength );\n\t\t\t\t\t\tvar fullArrayOffset = 0;\n\t\t\t\t\t\tfor ( i = 0; i < elements.length; ++i ) {\n\t\t\t\t\t\t\tfullArray.set( elements[ i ], fullArrayOffset );\n\t\t\t\t\t\t\tfullArrayOffset += elements[ i ].length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn fullArray;\n\t\t\t\t\t}\n\t\t\t\t\treturn readArrayBuffer( length );\n\t\t\t\tcase 3:\n\t\t\t\t\tvar utf16data = [];\n\t\t\t\t\tif ( length < 0 ) {\n\t\t\t\t\t\twhile ( ( length = readIndefiniteStringLength( majorType ) ) >= 0 )\n\t\t\t\t\t\t\tappendUtf16data( utf16data, length );\n\t\t\t\t\t} else\n\t\t\t\t\t\tappendUtf16data( utf16data, length );\n\t\t\t\t\treturn String.fromCharCode.apply( null, utf16data );\n\t\t\t\tcase 4:\n\t\t\t\t\tvar retArray;\n\t\t\t\t\tif ( length < 0 ) {\n\t\t\t\t\t\tretArray = [];\n\t\t\t\t\t\twhile ( !readBreak() )\n\t\t\t\t\t\t\tretArray.push( decodeItem() );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArray = new Array( length );\n\t\t\t\t\t\tfor ( i = 0; i < length; ++i )\n\t\t\t\t\t\t\tretArray[ i ] = decodeItem();\n\t\t\t\t\t}\n\t\t\t\t\treturn retArray;\n\t\t\t\tcase 5:\n\t\t\t\t\tvar retObject = {};\n\t\t\t\t\tfor ( i = 0; i < length || length < 0 && !readBreak(); ++i ) {\n\t\t\t\t\t\tvar key = decodeItem();\n\t\t\t\t\t\tretObject[ key ] = decodeItem();\n\t\t\t\t\t}\n\t\t\t\t\treturn retObject;\n\t\t\t\tcase 6:\n\t\t\t\t\treturn tagger( decodeItem(), length );\n\t\t\t\tcase 7:\n\t\t\t\t\tswitch ( length ) {\n\t\t\t\t\t\tcase 20:\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tcase 21:\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tcase 22:\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 23:\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn simpleValue( length );\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar ret = decodeItem();\n\t\tif ( offset !== data.byteLength )\n\t\t\tthrow \"Remaining bytes\";\n\t\treturn ret;\n\t}\n\n\tvar obj = { encode: encode, decode: decode };\n\n\tif ( typeof define === \"function\" && define.amd )\n\t\tdefine( \"cbor/cbor\", obj );\n\telse if ( !global.CBOR )\n\t\tglobal.CBOR = obj;\n\n} )( this );\n"],
  "mappings": "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",
  "names": ["beep8", "c", "i", "p1", "undefined", "value", "dataView"]
}
